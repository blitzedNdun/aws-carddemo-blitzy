<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <!-- ====================================== -->
    <!-- CardDemo API Performance Test Plan     -->
    <!-- ====================================== -->
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="CardDemo API Performance Test Plan" enabled="true">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">${__P(base.url,http://localhost:8080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(threads,100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP</stringProp>
            <stringProp name="Argument.value">${__P(ramp.up,60)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DURATION" elementType="Argument">
            <stringProp name="Argument.name">DURATION</stringProp>
            <stringProp name="Argument.value">${__P(duration,300)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESPONSE_TIME_THRESHOLD" elementType="Argument">
            <stringProp name="Argument.name">RESPONSE_TIME_THRESHOLD</stringProp>
            <stringProp name="Argument.value">${__P(response.time.threshold,200)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TPS_TARGET" elementType="Argument">
            <stringProp name="Argument.name">TPS_TARGET</stringProp>
            <stringProp name="Argument.value">${__P(tps.target,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_ACCOUNT_ID" elementType="Argument">
            <stringProp name="Argument.name">TEST_ACCOUNT_ID</stringProp>
            <stringProp name="Argument.value">${__P(test.account.id,00000000001)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="JWT_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">JWT_TOKEN</stringProp>
            <stringProp name="Argument.value">${__P(jwt.token,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <stringProp name="TestPlan.comments">
        CardDemo API Performance Test Plan
        
        Purpose: Validate REST API performance against sub-200ms response time requirements
        at 95th percentile with 10,000 TPS sustained throughput and batch processing
        window compliance per Section 6.6.1.3 requirements.
        
        Test Scenarios:
        1. Account View Performance - GET /api/accounts/{id}
        2. Account Update Performance - PUT /api/accounts/{id}
        3. Transaction Listing Performance - GET /api/transactions
        4. Transaction Creation Performance - POST /api/transactions
        5. Load Testing - 10,000 TPS sustained load
        6. Batch Processing Window Validation
        
        SLA Requirements:
        - API Response Time: &lt;200ms at 95th percentile
        - Transaction Throughput: 10,000 TPS sustained
        - Batch Processing: Complete within 4-hour window
        - Memory Usage: Within 110% of baseline allocation
        
        Monitoring Integration:
        - Prometheus metrics collection
        - Grafana dashboard visualization
        - Automated threshold monitoring
        - Performance baseline comparison
      </stringProp>
    </TestPlan>
    <hashTree>
      <!-- ====================================== -->
      <!-- HTTP Request Defaults Configuration   -->
      <!-- ====================================== -->
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${__groovy(vars.get("BASE_URL").replace("http://", "").replace("https://", "").split(":")[0])}</stringProp>
        <stringProp name="HTTPSampler.port">${__groovy(vars.get("BASE_URL").contains(":") ? vars.get("BASE_URL").split(":")[2] : "8080")}</stringProp>
        <stringProp name="HTTPSampler.protocol">${__groovy(vars.get("BASE_URL").startsWith("https") ? "https" : "http")}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path">/api</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
        <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
      </ConfigTestElement>
      <hashTree/>
      
      <!-- ====================================== -->
      <!-- HTTP Header Manager Configuration     -->
      <!-- ====================================== -->
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">JMeter-CardDemo-Performance-Test/5.6.3</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${JWT_TOKEN}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      
      <!-- ====================================== -->
      <!-- Authentication Setup                   -->
      <!-- ====================================== -->
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Authentication Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1</longProp>
        <longProp name="ThreadGroup.end_time">1</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login - Get JWT Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/auth/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.postBodyRaw">true</stringProp>
          <elementProp name="HTTPSampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{
  "username": "admin",
  "password": "admin123"
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract JWT Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">JWT_TOKEN</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">INVALID_TOKEN</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Login Success Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2095064471">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Authentication failed - unable to obtain JWT token</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      
      <!-- ====================================== -->
      <!-- Account View Performance Testing       -->
      <!-- ====================================== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Account View Performance Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP}</stringProp>
        <longProp name="ThreadGroup.start_time">1</longProp>
        <longProp name="ThreadGroup.end_time">1</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <stringProp name="ThreadGroup.comments">
          Account View Performance Test
          
          Tests: GET /api/accounts/{id}
          Target: &lt;200ms response time at 95th percentile
          Load: Variable thread count with sustained load
          
          Validates AccountViewController.java performance
          with JPA repository query optimization.
        </stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account View - GET /api/accounts/{id}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cavw/accounts/${__Random(1,100000,TEST_ACCOUNT_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <!-- Response Time Assertion for 95th Percentile -->
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Time Assertion (200ms)" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2095064471">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Account view response time exceeded 200ms threshold</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion (200ms)" enabled="true">
            <stringProp name="DurationAssertion.duration">${RESPONSE_TIME_THRESHOLD}</stringProp>
          </DurationAssertion>
          <hashTree/>
          
          <!-- JSON Response Validation -->
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Validate Account Response" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">accountId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.accountId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      
      <!-- ====================================== -->
      <!-- Account Update Performance Testing     -->
      <!-- ====================================== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Account Update Performance Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__groovy(Integer.parseInt(vars.get("THREADS")) / 2)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP}</stringProp>
        <longProp name="ThreadGroup.start_time">1</longProp>
        <longProp name="ThreadGroup.end_time">1</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <stringProp name="ThreadGroup.comments">
          Account Update Performance Test
          
          Tests: PUT /api/accounts/{id}
          Target: &lt;200ms response time with optimistic locking
          Load: Reduced thread count to prevent conflicts
          
          Validates AccountUpdateController.java performance
          with transactional updates and concurrency control.
        </stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Account Update - PUT /api/accounts/{id}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/accounts/${__Random(1,100000,TEST_ACCOUNT_ID)}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.postBodyRaw">true</stringProp>
          <elementProp name="HTTPSampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{
  "accountId": "${__Random(1,100000,TEST_ACCOUNT_ID)}",
  "currentBalance": ${__Random(1000,50000)}.${__Random(10,99)},
  "creditLimit": ${__Random(5000,100000)}.00,
  "version": 1
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion (200ms)" enabled="true">
            <stringProp name="DurationAssertion.duration">${RESPONSE_TIME_THRESHOLD}</stringProp>
          </DurationAssertion>
          <hashTree/>
          
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Update Success Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2095064471">200</stringProp>
              <stringProp name="2090901251">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Account update failed or exceeded response time threshold</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      
      <!-- ====================================== -->
      <!-- Transaction Performance Testing        -->
      <!-- ====================================== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Transaction Performance Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP}</stringProp>
        <longProp name="ThreadGroup.start_time">1</longProp>
        <longProp name="ThreadGroup.end_time">1</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <stringProp name="ThreadGroup.comments">
          Transaction Performance Test
          
          Tests: GET /api/transactions and POST /api/transactions
          Target: &lt;200ms response time for listings, &lt;300ms for creation
          Load: High-volume transaction processing simulation
          
          Validates TransactionController.java performance
          with high-throughput transaction operations.
        </stringProp>
      </ThreadGroup>
      <hashTree>
        <!-- Transaction Listing Performance -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transaction List - GET /api/transactions" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__Random(0,10)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="size" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.name">size</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/transactions</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion (200ms)" enabled="true">
            <stringProp name="DurationAssertion.duration">${RESPONSE_TIME_THRESHOLD}</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        
        <!-- Transaction Creation Performance -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transaction Creation - POST /api/transactions" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/transactions</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">15000</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.postBodyRaw">true</stringProp>
          <elementProp name="HTTPSampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{
  "transactionId": "${__UUID()}",
  "accountId": "${__Random(1,100000,TEST_ACCOUNT_ID)}",
  "transactionType": "01",
  "transactionCategory": "0001",
  "transactionSource": "POS TERM",
  "transactionDescription": "Performance Test Transaction at ${__machineIP()}",
  "transactionAmount": ${__Random(10,1000)}.${__Random(10,99)},
  "merchantId": "${__Random(100000000,999999999)}",
  "merchantName": "Test Merchant ${__Random(1,1000)}",
  "merchantCity": "Test City ${__Random(1,100)}",
  "merchantZip": "${__Random(10000,99999)}",
  "cardNumber": "${__Random(1000000000000000,9999999999999999)}",
  "originalTimestamp": "${__time(yyyy-MM-dd HH:mm:ss.SSS)}",
  "processedTimestamp": "${__time(yyyy-MM-dd HH:mm:ss.SSS)}"
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion (300ms)" enabled="true">
            <stringProp name="DurationAssertion.duration">300</stringProp>
          </DurationAssertion>
          <hashTree/>
          
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Transaction Creation Success" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2090901251">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Transaction creation failed or exceeded response time threshold</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      
      <!-- ====================================== -->
      <!-- High-Volume Load Testing (10K TPS)    -->
      <!-- ====================================== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="High-Volume Load Test (10K TPS)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__groovy(Integer.parseInt(vars.get("TPS_TARGET")) / 10)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__groovy(Integer.parseInt(vars.get("RAMP_UP")) * 2)}</stringProp>
        <longProp name="ThreadGroup.start_time">1</longProp>
        <longProp name="ThreadGroup.end_time">1</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__groovy(Integer.parseInt(vars.get("DURATION")) * 2)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <stringProp name="ThreadGroup.comments">
          High-Volume Load Test (10K TPS)
          
          Target: 10,000 TPS sustained throughput
          Load: Calculated thread count based on TPS target
          Duration: Extended test duration for sustained load
          
          Validates Spring Cloud Gateway load balancing
          and database connection pool stress testing.
        </stringProp>
      </ThreadGroup>
      <hashTree>
        <!-- Throughput Controller for TPS Management -->
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="TPS Controller" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <stringProp name="ThroughputController.percentThroughput">${__groovy(Double.parseDouble(vars.get("TPS_TARGET")) / Double.parseDouble(vars.get("THREADS")))}</stringProp>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Load Test - Mixed Operations" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cavw/accounts/${__Random(1,100000,TEST_ACCOUNT_ID)}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Load Test Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">${__groovy(Integer.parseInt(vars.get("RESPONSE_TIME_THRESHOLD")) * 2)}</stringProp>
            </DurationAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      
      <!-- ====================================== -->
      <!-- Batch Processing Window Test           -->
      <!-- ====================================== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Batch Processing Window Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1</longProp>
        <longProp name="ThreadGroup.end_time">1</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <stringProp name="ThreadGroup.comments">
          Batch Processing Window Test
          
          Target: Complete batch processing within 4-hour window
          Tests: Spring Batch job execution monitoring
          
          Validates batch processing performance per
          Section 6.6.6.1 requirements.
        </stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Batch Job Status - GET /api/batch/jobs/interest-calculation" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/batch/jobs/interest-calculation</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">5000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Batch Window Assertion (4 hours)" enabled="true">
            <stringProp name="DurationAssertion.duration">14400000</stringProp>
          </DurationAssertion>
          <hashTree/>
          
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Batch Status" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">batchStatus</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.status</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">UNKNOWN</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Batch Completion Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1893493436">COMPLETED</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message">Batch processing did not complete within 4-hour window</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      
      <!-- ====================================== -->
      <!-- Performance Listeners and Reporting   -->
      <!-- ====================================== -->
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">performance-test-results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">response-times-over-time.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <ResultCollector guiclass="TransactionsPerSecondGui" testclass="ResultCollector" testname="Transactions Per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">transactions-per-second.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">error-results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <!-- ====================================== -->
      <!-- Performance Threshold Monitoring      -->
      <!-- ====================================== -->
      <BSFSampler guiclass="BSFSamplerGui" testclass="BSFSampler" testname="Performance Threshold Monitor" enabled="true">
        <stringProp name="BSFSampler.query">
          // Performance threshold monitoring and alerting
          // Integrates with Prometheus metrics collection
          
          import java.util.Properties;
          
          // Get test results from previous samplers
          String responseTime = vars.get("RESPONSE_TIME_THRESHOLD");
          String actualResponseTime = String.valueOf(prev.getTime());
          
          // Log performance metrics
          log.info("Performance Threshold Check:");
          log.info("Target Response Time: " + responseTime + "ms");
          log.info("Actual Response Time: " + actualResponseTime + "ms");
          
          // Check if threshold is exceeded
          if (prev.getTime() > Integer.parseInt(responseTime)) {
              log.warn("PERFORMANCE ALERT: Response time exceeded threshold!");
              log.warn("Threshold: " + responseTime + "ms, Actual: " + actualResponseTime + "ms");
              
              // Set failure flag for monitoring systems
              vars.put("PERFORMANCE_ALERT", "true");
              vars.put("ALERT_MESSAGE", "Response time exceeded " + responseTime + "ms threshold");
          } else {
              log.info("Performance within acceptable limits");
              vars.put("PERFORMANCE_ALERT", "false");
          }
          
          // Export metrics for Prometheus integration
          Properties metrics = new Properties();
          metrics.setProperty("response_time_ms", actualResponseTime);
          metrics.setProperty("response_time_threshold_ms", responseTime);
          metrics.setProperty("performance_alert", vars.get("PERFORMANCE_ALERT"));
          
          // Return success for monitoring
          return "Performance monitoring completed";
        </stringProp>
        <stringProp name="BSFSampler.language">groovy</stringProp>
        <stringProp name="BSFSampler.parameters"></stringProp>
        <stringProp name="BSFSampler.filename"></stringProp>
      </BSFSampler>
      <hashTree/>
      
      <!-- ====================================== -->
      <!-- Baseline Comparison Logic             -->
      <!-- ====================================== -->
      <BSFSampler guiclass="BSFSamplerGui" testclass="BSFSampler" testname="Baseline Comparison Engine" enabled="true">
        <stringProp name="BSFSampler.query">
          // Baseline comparison for performance regression detection
          // Compares current test results with historical baselines
          
          import java.util.Date;
          import java.text.SimpleDateFormat;
          
          // Historical baseline data (in production, this would be loaded from external source)
          def baselineResponseTime = 150; // Historical 95th percentile baseline
          def baselineThroughput = 8500;  // Historical TPS baseline
          
          // Current test metrics
          def currentResponseTime = prev.getTime();
          def testStartTime = new Date();
          
          // Performance regression analysis
          def responseTimeVariance = ((currentResponseTime - baselineResponseTime) / baselineResponseTime) * 100;
          
          log.info("Baseline Comparison Analysis:");
          log.info("Baseline Response Time: " + baselineResponseTime + "ms");
          log.info("Current Response Time: " + currentResponseTime + "ms");
          log.info("Performance Variance: " + String.format("%.2f", responseTimeVariance) + "%");
          
          // Regression detection (allow up to 10% performance degradation)
          if (responseTimeVariance > 10) {
              log.warn("PERFORMANCE REGRESSION DETECTED!");
              log.warn("Response time degraded by " + String.format("%.2f", responseTimeVariance) + "%");
              vars.put("REGRESSION_ALERT", "true");
              vars.put("REGRESSION_PERCENTAGE", String.format("%.2f", responseTimeVariance));
          } else if (responseTimeVariance < -5) {
              log.info("PERFORMANCE IMPROVEMENT DETECTED!");
              log.info("Response time improved by " + String.format("%.2f", Math.abs(responseTimeVariance)) + "%");
              vars.put("REGRESSION_ALERT", "false");
              vars.put("IMPROVEMENT_PERCENTAGE", String.format("%.2f", Math.abs(responseTimeVariance)));
          } else {
              log.info("Performance within acceptable variance range");
              vars.put("REGRESSION_ALERT", "false");
          }
          
          // Generate baseline comparison report
          def timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(testStartTime);
          def report = "Baseline Comparison Report - " + timestamp + "\n";
          report += "Current vs Baseline Performance:\n";
          report += "Response Time: " + currentResponseTime + "ms vs " + baselineResponseTime + "ms\n";
          report += "Variance: " + String.format("%.2f", responseTimeVariance) + "%\n";
          
          vars.put("BASELINE_REPORT", report);
          
          return "Baseline comparison completed";
        </stringProp>
        <stringProp name="BSFSampler.language">groovy</stringProp>
        <stringProp name="BSFSampler.parameters"></stringProp>
        <stringProp name="BSFSampler.filename"></stringProp>
      </BSFSampler>
      <hashTree/>
      
    </hashTree>
  </hashTree>
</jmeterTestPlan>