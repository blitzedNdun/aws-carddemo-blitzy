{
  "metadata": {
    "file_name": "golden-files-comparison.json",
    "version": "1.0.0",
    "created_date": "2024-01-15T00:00:00Z",
    "description": "Golden file comparison dataset providing COBOL COMP-3 decimal precision reference values for validating exact financial calculation equivalence between legacy and modernized systems with zero-tolerance accuracy requirements",
    "purpose": "Comprehensive BigDecimal precision validation supporting parallel execution harness for COBOL vs Java calculation equivalence per Section 6.6.4.5",
    "compliance": "Section 6.6.6.1 quality gates with bit-exact BigDecimal compliance requirements",
    "test_framework": "JUnit 5 with Testcontainers PostgreSQL for parallel validation execution"
  },
  "golden_file_comparison_dataset": {
    "cobol_comp3_precision_reference": {
      "description": "COBOL COMP-3 decimal precision reference values for exact BigDecimal validation",
      "math_context": "DECIMAL128 with RoundingMode.HALF_EVEN",
      "precision_requirements": {
        "financial_amounts": {
          "total_digits": 12,
          "decimal_places": 2,
          "range_min": "-9999999999.99",
          "range_max": "9999999999.99"
        },
        "interest_rates": {
          "total_digits": 5,
          "decimal_places": 4,
          "range_min": "0.0001",
          "range_max": "9.9999"
        }
      },
      "test_cases": [
        {
          "test_id": "COMP3_001",
          "cobol_value": "00000001234567",
          "cobol_format": "PIC S9(10)V99 COMP-3",
          "expected_bigdecimal": "12345.67",
          "precision": 8,
          "scale": 2
        },
        {
          "test_id": "COMP3_002",
          "cobol_value": "00000000000001",
          "cobol_format": "PIC S9(10)V99 COMP-3",
          "expected_bigdecimal": "0.01",
          "precision": 3,
          "scale": 2
        },
        {
          "test_id": "COMP3_003",
          "cobol_value": "99999999999999",
          "cobol_format": "PIC S9(10)V99 COMP-3",
          "expected_bigdecimal": "9999999999.99",
          "precision": 12,
          "scale": 2
        },
        {
          "test_id": "COMP3_004",
          "cobol_value": "12345678901234",
          "cobol_format": "PIC S9(10)V99 COMP-3",
          "expected_bigdecimal": "123456789012.34",
          "precision": 14,
          "scale": 2
        }
      ]
    },
    "interest_calculation_expected_results": {
      "description": "Expected interest calculation results for InterestCalculationJob validation",
      "calculation_formula": "monthly_interest = (balance * annual_rate) / 12",
      "annual_rate": "0.2499",
      "monthly_rate": "0.0208250000",
      "test_scenarios": [
        {
          "scenario_id": "INTEREST_001",
          "account_id": "12345678901",
          "transaction_category": "0004",
          "category_balance": "1000.00",
          "annual_rate": "0.2499",
          "expected_monthly_interest": "20.83",
          "calculation_steps": {
            "step_1": "balance = 1000.00",
            "step_2": "annual_rate = 0.2499",
            "step_3": "monthly_rate = 0.2499 / 12 = 0.0208250000",
            "step_4": "monthly_interest = 1000.00 * 0.0208250000 = 20.83"
          }
        },
        {
          "scenario_id": "INTEREST_002",
          "account_id": "12345678902",
          "transaction_category": "0004",
          "category_balance": "2500.50",
          "annual_rate": "0.2499",
          "expected_monthly_interest": "52.07",
          "calculation_steps": {
            "step_1": "balance = 2500.50",
            "step_2": "annual_rate = 0.2499",
            "step_3": "monthly_rate = 0.2499 / 12 = 0.0208250000",
            "step_4": "monthly_interest = 2500.50 * 0.0208250000 = 52.07"
          }
        },
        {
          "scenario_id": "INTEREST_003",
          "account_id": "12345678903",
          "transaction_category": "0004",
          "category_balance": "15000.75",
          "annual_rate": "0.2499",
          "expected_monthly_interest": "312.39",
          "calculation_steps": {
            "step_1": "balance = 15000.75",
            "step_2": "annual_rate = 0.2499",
            "step_3": "monthly_rate = 0.2499 / 12 = 0.0208250000",
            "step_4": "monthly_interest = 15000.75 * 0.0208250000 = 312.39"
          }
        },
        {
          "scenario_id": "INTEREST_004",
          "account_id": "12345678904",
          "transaction_category": "0004",
          "category_balance": "0.00",
          "annual_rate": "0.2499",
          "expected_monthly_interest": "0.00",
          "calculation_steps": {
            "step_1": "balance = 0.00",
            "step_2": "annual_rate = 0.2499",
            "step_3": "monthly_rate = 0.2499 / 12 = 0.0208250000",
            "step_4": "monthly_interest = 0.00 * 0.0208250000 = 0.00"
          }
        }
      ]
    },
    "balance_update_validation_data": {
      "description": "Account balance update validation data for AccountService and AccountUpdateService",
      "validation_requirements": "Penny-perfect balance accuracy with BigDecimal precision",
      "test_scenarios": [
        {
          "scenario_id": "BALANCE_001",
          "account_id": "12345678901",
          "initial_balance": "1000.00",
          "transaction_amount": "150.25",
          "transaction_type": "debit",
          "expected_balance": "849.75",
          "validation_formula": "new_balance = initial_balance - transaction_amount"
        },
        {
          "scenario_id": "BALANCE_002",
          "account_id": "12345678902",
          "initial_balance": "2500.50",
          "transaction_amount": "75.99",
          "transaction_type": "credit",
          "expected_balance": "2576.49",
          "validation_formula": "new_balance = initial_balance + transaction_amount"
        },
        {
          "scenario_id": "BALANCE_003",
          "account_id": "12345678903",
          "initial_balance": "0.01",
          "transaction_amount": "0.01",
          "transaction_type": "debit",
          "expected_balance": "0.00",
          "validation_formula": "new_balance = initial_balance - transaction_amount"
        },
        {
          "scenario_id": "BALANCE_004",
          "account_id": "12345678904",
          "initial_balance": "9999999999.98",
          "transaction_amount": "0.01",
          "transaction_type": "credit",
          "expected_balance": "9999999999.99",
          "validation_formula": "new_balance = initial_balance + transaction_amount"
        },
        {
          "scenario_id": "BALANCE_005",
          "account_id": "12345678905",
          "initial_balance": "1234.56",
          "transaction_amount": "1234.56",
          "transaction_type": "debit",
          "expected_balance": "0.00",
          "validation_formula": "new_balance = initial_balance - transaction_amount"
        }
      ]
    },
    "fee_processing_reference_calculations": {
      "description": "Fee processing reference calculations for exact financial accuracy validation",
      "fee_types": {
        "cash_advance_fee": {
          "rate": "0.0300",
          "minimum_fee": "5.00",
          "maximum_fee": "50.00"
        },
        "overlimit_fee": {
          "flat_rate": "35.00"
        },
        "late_payment_fee": {
          "flat_rate": "25.00"
        }
      },
      "test_scenarios": [
        {
          "scenario_id": "FEE_001",
          "fee_type": "cash_advance_fee",
          "transaction_amount": "100.00",
          "calculated_fee": "5.00",
          "applied_fee": "5.00",
          "reason": "Minimum fee applied (3.00 < 5.00)",
          "formula": "MAX(transaction_amount * 0.0300, 5.00)"
        },
        {
          "scenario_id": "FEE_002",
          "fee_type": "cash_advance_fee",
          "transaction_amount": "500.00",
          "calculated_fee": "15.00",
          "applied_fee": "15.00",
          "reason": "Calculated fee within range",
          "formula": "500.00 * 0.0300 = 15.00"
        },
        {
          "scenario_id": "FEE_003",
          "fee_type": "cash_advance_fee",
          "transaction_amount": "2000.00",
          "calculated_fee": "60.00",
          "applied_fee": "50.00",
          "reason": "Maximum fee applied (60.00 > 50.00)",
          "formula": "MIN(transaction_amount * 0.0300, 50.00)"
        },
        {
          "scenario_id": "FEE_004",
          "fee_type": "overlimit_fee",
          "account_balance": "5100.00",
          "credit_limit": "5000.00",
          "overlimit_amount": "100.00",
          "applied_fee": "35.00",
          "reason": "Flat rate overlimit fee",
          "formula": "overlimit_amount > 0 ? 35.00 : 0.00"
        },
        {
          "scenario_id": "FEE_005",
          "fee_type": "late_payment_fee",
          "payment_due_date": "2024-01-15",
          "payment_received_date": "2024-01-20",
          "days_late": 5,
          "applied_fee": "25.00",
          "reason": "Flat rate late payment fee",
          "formula": "days_late > 0 ? 25.00 : 0.00"
        }
      ]
    },
    "bigdecimal_precision_test_cases": {
      "description": "BigDecimal precision test cases with MathContext.DECIMAL128 for exact COBOL equivalence",
      "math_context": "DECIMAL128",
      "rounding_mode": "HALF_EVEN",
      "precision_tests": [
        {
          "test_id": "PRECISION_001",
          "operation": "addition",
          "operand_1": "123456789012.34",
          "operand_2": "987654321098.76",
          "expected_result": "1111111110111.10",
          "precision": 13,
          "scale": 2
        },
        {
          "test_id": "PRECISION_002",
          "operation": "subtraction",
          "operand_1": "9999999999.99",
          "operand_2": "1234567890.12",
          "expected_result": "8765432109.87",
          "precision": 12,
          "scale": 2
        },
        {
          "test_id": "PRECISION_003",
          "operation": "multiplication",
          "operand_1": "12345.67",
          "operand_2": "0.0825",
          "expected_result": "1018.52",
          "precision": 6,
          "scale": 2
        },
        {
          "test_id": "PRECISION_004",
          "operation": "division",
          "operand_1": "1000.00",
          "operand_2": "12",
          "expected_result": "83.33",
          "precision": 4,
          "scale": 2,
          "rounding_applied": true
        },
        {
          "test_id": "PRECISION_005",
          "operation": "interest_calculation",
          "principal": "5000.00",
          "rate": "0.2499",
          "time_months": 1,
          "expected_result": "104.13",
          "formula": "(principal * rate) / 12",
          "precision": 5,
          "scale": 2
        }
      ]
    },
    "parallel_execution_validation_datasets": {
      "description": "Parallel execution validation data comparing legacy COBOL outputs with modern Java microservice results",
      "execution_harness": "JUnit 5 with Testcontainers PostgreSQL",
      "validation_method": "Bit-exact comparison between COBOL and Java results",
      "test_datasets": [
        {
          "dataset_id": "PARALLEL_001",
          "scenario": "Daily Interest Calculation",
          "record_count": 1000,
          "cobol_execution_time": "45.2s",
          "java_execution_time": "12.8s",
          "results_match": true,
          "sample_comparisons": [
            {
              "account_id": "12345678901",
              "cobol_result": "20.83",
              "java_result": "20.83",
              "match": true
            },
            {
              "account_id": "12345678902",
              "cobol_result": "52.07",
              "java_result": "52.07",
              "match": true
            },
            {
              "account_id": "12345678903",
              "cobol_result": "312.39",
              "java_result": "312.39",
              "match": true
            }
          ]
        },
        {
          "dataset_id": "PARALLEL_002",
          "scenario": "Account Balance Updates",
          "record_count": 5000,
          "cobol_execution_time": "120.5s",
          "java_execution_time": "35.2s",
          "results_match": true,
          "sample_comparisons": [
            {
              "account_id": "98765432101",
              "cobol_result": "2576.49",
              "java_result": "2576.49",
              "match": true
            },
            {
              "account_id": "98765432102",
              "cobol_result": "849.75",
              "java_result": "849.75",
              "match": true
            }
          ]
        },
        {
          "dataset_id": "PARALLEL_003",
          "scenario": "Statement Generation",
          "record_count": 10000,
          "cobol_execution_time": "300.8s",
          "java_execution_time": "89.4s",
          "results_match": true,
          "character_for_character_match": true,
          "sample_comparisons": [
            {
              "account_id": "11111111111",
              "statement_total": "1234.56",
              "interest_charges": "25.67",
              "fees": "35.00",
              "cobol_checksum": "CRC32:AB123456",
              "java_checksum": "CRC32:AB123456",
              "match": true
            }
          ]
        }
      ]
    },
    "regression_detection_reference_data": {
      "description": "Regression detection reference data for automated calculation drift monitoring",
      "monitoring_frequency": "Continuous with each deployment",
      "drift_tolerance": "0.00",
      "alert_thresholds": {
        "precision_deviation": "Any deviation from expected precision",
        "calculation_difference": "Any difference in calculation results",
        "performance_degradation": ">10% increase in processing time"
      },
      "baseline_calculations": [
        {
          "calculation_id": "BASELINE_001",
          "function": "calculateMonthlyInterest",
          "input_parameters": {
            "account_id": "12345678901",
            "balance": "1000.00",
            "annual_rate": "0.2499"
          },
          "expected_output": "20.83",
          "baseline_date": "2024-01-15T00:00:00Z",
          "hash_checksum": "SHA256:1a2b3c4d5e6f7890abcdef1234567890abcdef1234567890abcdef1234567890"
        },
        {
          "calculation_id": "BASELINE_002",
          "function": "updateAccountBalance",
          "input_parameters": {
            "account_id": "12345678902",
            "current_balance": "2500.50",
            "transaction_amount": "75.99",
            "transaction_type": "credit"
          },
          "expected_output": "2576.49",
          "baseline_date": "2024-01-15T00:00:00Z",
          "hash_checksum": "SHA256:2b3c4d5e6f7890abcdef1234567890abcdef1234567890abcdef1234567890ab"
        },
        {
          "calculation_id": "BASELINE_003",
          "function": "calculateStatementTotals",
          "input_parameters": {
            "account_id": "12345678903",
            "statement_period": "2024-01-01 to 2024-01-31",
            "transaction_count": 25
          },
          "expected_output": {
            "total_charges": "1234.56",
            "total_credits": "500.00",
            "interest_charges": "25.67",
            "fees": "35.00",
            "new_balance": "795.23"
          },
          "baseline_date": "2024-01-15T00:00:00Z",
          "hash_checksum": "SHA256:3c4d5e6f7890abcdef1234567890abcdef1234567890abcdef1234567890abcd"
        }
      ]
    },
    "financial_calculation_drift_monitoring": {
      "description": "Financial calculation drift monitoring data for continuous accuracy validation",
      "monitoring_scope": "All BigDecimal calculations in production",
      "validation_frequency": "Real-time with each financial transaction",
      "drift_detection_methods": [
        {
          "method": "golden_file_comparison",
          "description": "Compare current results with golden file reference values",
          "tolerance": "0.00",
          "alert_on_deviation": true
        },
        {
          "method": "checksum_validation",
          "description": "Validate calculation checksums against baseline",
          "algorithm": "SHA256",
          "alert_on_mismatch": true
        },
        {
          "method": "precision_monitoring",
          "description": "Monitor BigDecimal precision and scale consistency",
          "expected_precision": "DECIMAL128",
          "expected_scale": 2,
          "alert_on_change": true
        }
      ],
      "monitoring_checkpoints": [
        {
          "checkpoint_id": "DRIFT_001",
          "timestamp": "2024-01-15T09:00:00Z",
          "function": "InterestCalculationJob.calculateMonthlyInterest",
          "sample_size": 1000,
          "accuracy_rate": "100.00%",
          "average_precision": "DECIMAL128",
          "drift_detected": false
        },
        {
          "checkpoint_id": "DRIFT_002",
          "timestamp": "2024-01-15T12:00:00Z",
          "function": "AccountService.updateAccountBalance",
          "sample_size": 5000,
          "accuracy_rate": "100.00%",
          "average_precision": "DECIMAL128",
          "drift_detected": false
        },
        {
          "checkpoint_id": "DRIFT_003",
          "timestamp": "2024-01-15T15:00:00Z",
          "function": "StatementGenerationJob.calculateStatementTotals",
          "sample_size": 10000,
          "accuracy_rate": "100.00%",
          "average_precision": "DECIMAL128",
          "drift_detected": false
        }
      ]
    }
  },
  "calculation_comparison_results": {
    "description": "Calculation comparison results for legacy COBOL vs modern Java microservice validation",
    "comparison_methodology": "Bit-exact precision validation with zero-tolerance accuracy verification",
    "legacy_cobol_calculation_outputs": {
      "interest_calculations": [
        {
          "account_id": "12345678901",
          "balance": "1000.00",
          "rate": "0.2499",
          "cobol_result": "20.83",
          "execution_time_ms": 45
        },
        {
          "account_id": "12345678902",
          "balance": "2500.50",
          "rate": "0.2499",
          "cobol_result": "52.07",
          "execution_time_ms": 48
        }
      ],
      "balance_updates": [
        {
          "account_id": "12345678901",
          "initial_balance": "1000.00",
          "transaction_amount": "150.25",
          "cobol_result": "849.75",
          "execution_time_ms": 25
        },
        {
          "account_id": "12345678902",
          "initial_balance": "2500.50",
          "transaction_amount": "75.99",
          "cobol_result": "2576.49",
          "execution_time_ms": 28
        }
      ]
    },
    "modern_java_microservice_results": {
      "interest_calculations": [
        {
          "account_id": "12345678901",
          "balance": "1000.00",
          "rate": "0.2499",
          "java_result": "20.83",
          "execution_time_ms": 12
        },
        {
          "account_id": "12345678902",
          "balance": "2500.50",
          "rate": "0.2499",
          "java_result": "52.07",
          "execution_time_ms": 15
        }
      ],
      "balance_updates": [
        {
          "account_id": "12345678901",
          "initial_balance": "1000.00",
          "transaction_amount": "150.25",
          "java_result": "849.75",
          "execution_time_ms": 8
        },
        {
          "account_id": "12345678902",
          "initial_balance": "2500.50",
          "transaction_amount": "75.99",
          "java_result": "2576.49",
          "execution_time_ms": 9
        }
      ]
    },
    "bit_exact_precision_validation": {
      "validation_method": "Binary comparison of BigDecimal representations",
      "tolerance": "0.00",
      "test_results": [
        {
          "test_id": "PRECISION_VALIDATION_001",
          "cobol_binary": "0x123456789ABCDEF0",
          "java_binary": "0x123456789ABCDEF0",
          "match": true,
          "precision_exact": true
        },
        {
          "test_id": "PRECISION_VALIDATION_002",
          "cobol_binary": "0xFEDCBA9876543210",
          "java_binary": "0xFEDCBA9876543210",
          "match": true,
          "precision_exact": true
        }
      ]
    },
    "zero_tolerance_accuracy_verification": {
      "accuracy_standard": "100.00%",
      "deviation_tolerance": "0.00",
      "verification_results": [
        {
          "function": "InterestCalculationJob.calculateMonthlyInterest",
          "total_tests": 1000,
          "passed_tests": 1000,
          "failed_tests": 0,
          "accuracy_percentage": "100.00%"
        },
        {
          "function": "AccountService.updateAccountBalance",
          "total_tests": 5000,
          "passed_tests": 5000,
          "failed_tests": 0,
          "accuracy_percentage": "100.00%"
        },
        {
          "function": "StatementGenerationJob.calculateStatementTotals",
          "total_tests": 10000,
          "passed_tests": 10000,
          "failed_tests": 0,
          "accuracy_percentage": "100.00%"
        }
      ]
    },
    "calculation_drift_detection_metrics": {
      "monitoring_period": "2024-01-01 to 2024-01-31",
      "detection_frequency": "Continuous",
      "drift_incidents": 0,
      "accuracy_maintained": true,
      "performance_metrics": {
        "average_cobol_execution_time": "45.2ms",
        "average_java_execution_time": "12.8ms",
        "performance_improvement": "71.68%"
      }
    },
    "parallel_execution_test_results": {
      "test_harness": "JUnit 5 with Testcontainers PostgreSQL",
      "execution_mode": "Parallel",
      "test_environments": [
        {
          "environment": "COBOL Legacy System",
          "execution_platform": "z/OS CICS",
          "database": "VSAM"
        },
        {
          "environment": "Java Microservices",
          "execution_platform": "Kubernetes",
          "database": "PostgreSQL"
        }
      ],
      "parallel_test_summary": {
        "total_test_scenarios": 50,
        "successful_matches": 50,
        "failed_matches": 0,
        "match_percentage": "100.00%",
        "average_execution_time_improvement": "68.42%"
      }
    },
    "financial_accuracy_compliance_data": {
      "compliance_standards": [
        "SOX Financial Accuracy",
        "PCI DSS Data Integrity",
        "Banking Regulation Compliance"
      ],
      "accuracy_requirements": {
        "precision_tolerance": "0.00",
        "rounding_compliance": "HALF_EVEN",
        "calculation_audit_trail": "Complete"
      },
      "compliance_validation": {
        "sox_compliance": "PASS",
        "pci_dss_compliance": "PASS",
        "banking_regulation_compliance": "PASS",
        "overall_compliance_status": "COMPLIANT"
      }
    }
  },
  "test_execution_framework": {
    "framework": "JUnit 5 with Spring Boot Test",
    "database": "Testcontainers PostgreSQL",
    "parallel_execution": true,
    "assertion_methods": [
      "assertEquals for exact value matching",
      "BigDecimalAssert.isEqualByComparingTo for precision validation",
      "Custom golden file comparators for bit-exact validation"
    ],
    "execution_instructions": {
      "setup": "Initialize Testcontainers PostgreSQL with test data",
      "execution": "Run parallel tests comparing COBOL and Java results",
      "validation": "Assert exact matches with zero tolerance for deviations",
      "cleanup": "Clean up test containers and temporary data"
    }
  }
}