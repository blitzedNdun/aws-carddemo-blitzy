{
  "PenetrationTestScenarios": {
    "metadata": {
      "version": "1.0.0",
      "created": "2024-12-20",
      "description": "Comprehensive penetration testing scenarios for Spring Security validation per Section 6.4.5.2 requirements",
      "compliance": ["PCI DSS", "SOX", "NIST Cybersecurity Framework"],
      "testFramework": "OWASP ZAP 2.16.1 with Spring Security integration",
      "targetApplication": "CardDemo Spring Boot Microservices",
      "baseUrl": "https://carddemo-api.test.local"
    },
    "authenticationBypassScenarios": {
      "description": "Authentication bypass and session manipulation attempts per Section 6.4.5.3",
      "scenarios": [
        {
          "id": "AUTH_001",
          "name": "JWT Token Manipulation Attack",
          "description": "Attempt to bypass authentication using modified JWT tokens",
          "category": "Authentication Bypass",
          "severity": "HIGH",
          "testSteps": [
            {
              "step": 1,
              "action": "Obtain valid JWT token through legitimate login",
              "endpoint": "/api/auth/login",
              "method": "POST",
              "payload": {
                "username": "testuser@carddemo.com",
                "password": "SecureTestPass123!"
              },
              "expectedResponse": "JWT token in response body"
            },
            {
              "step": 2,
              "action": "Modify JWT signature to test signature validation",
              "manipulation": "Alter last character of JWT signature",
              "expectedResult": "403 Forbidden - Invalid token signature",
              "validationPoint": "JwtAuthenticationFilter.validateAndParseJwt()"
            },
            {
              "step": 3,
              "action": "Modify JWT payload claims (user_type: 'A' to 'X')",
              "manipulation": "Change user role in JWT payload",
              "expectedResult": "401 Unauthorized - Invalid user type",
              "validationPoint": "SecurityConfig.securityFilterChain()"
            },
            {
              "step": 4,
              "action": "Test expired JWT token acceptance",
              "manipulation": "Use JWT token past expiration time",
              "expectedResult": "401 Unauthorized - Token expired",
              "validationPoint": "JwtDecoder.decode() validation"
            }
          ],
          "securityControls": [
            "JWT signature verification with HS256 algorithm",
            "Token expiration validation",
            "User role claim validation",
            "Security context establishment"
          ],
          "attackVectors": [
            "Token signature tampering",
            "Privilege escalation via role manipulation",
            "Replay attacks with expired tokens",
            "Algorithm confusion attacks"
          ]
        },
        {
          "id": "AUTH_002",
          "name": "Session Hijacking Attack Simulation",
          "description": "Attempt session hijacking through Redis session manipulation",
          "category": "Session Management",
          "severity": "HIGH",
          "testSteps": [
            {
              "step": 1,
              "action": "Establish legitimate user session",
              "endpoint": "/api/auth/login",
              "method": "POST",
              "expectedResult": "Valid session in Redis store"
            },
            {
              "step": 2,
              "action": "Attempt session ID enumeration",
              "manipulation": "Brute force session IDs in Redis",
              "expectedResult": "Session access denied without valid JWT",
              "validationPoint": "Redis session store isolation"
            },
            {
              "step": 3,
              "action": "Test concurrent session limit enforcement",
              "manipulation": "Create multiple sessions for same user",
              "expectedResult": "Session limit enforcement or oldest session invalidation",
              "validationPoint": "Spring Session management"
            },
            {
              "step": 4,
              "action": "Validate session timeout enforcement",
              "manipulation": "Use session beyond configured timeout",
              "expectedResult": "Session automatically invalidated",
              "validationPoint": "Redis TTL expiration"
            }
          ],
          "securityControls": [
            "Redis session isolation",
            "Session timeout enforcement",
            "JWT-Redis session binding",
            "Concurrent session management"
          ]
        },
        {
          "id": "AUTH_003",
          "name": "Brute Force Authentication Attack",
          "description": "Validate authentication rate limiting and account lockout mechanisms",
          "category": "Authentication Security",
          "severity": "MEDIUM",
          "testSteps": [
            {
              "step": 1,
              "action": "Attempt rapid authentication requests",
              "endpoint": "/api/auth/login",
              "method": "POST",
              "requestCount": 100,
              "timeWindow": "60 seconds",
              "expectedResult": "Rate limiting enforcement after threshold"
            },
            {
              "step": 2,
              "action": "Test account lockout after failed attempts",
              "manipulation": "Multiple failed login attempts for single user",
              "failureThreshold": 5,
              "expectedResult": "Account temporarily locked",
              "validationPoint": "AuthenticationService.login()"
            },
            {
              "step": 3,
              "action": "Validate password complexity enforcement",
              "manipulation": "Attempt login with weak passwords",
              "payloads": ["123456", "password", "admin", "test"],
              "expectedResult": "Authentication failure with appropriate error message"
            }
          ],
          "securityControls": [
            "Rate limiting per IP address",
            "Account lockout mechanism",
            "Password complexity validation",
            "Audit logging of failed attempts"
          ]
        }
      ]
    },
    "sqlInjectionScenarios": {
      "description": "SQL injection attack simulation tests validating Spring Security protection mechanisms",
      "scenarios": [
        {
          "id": "SQL_001",
          "name": "Authentication Bypass via SQL Injection",
          "description": "Attempt SQL injection in authentication endpoint to bypass login",
          "category": "SQL Injection",
          "severity": "CRITICAL",
          "testSteps": [
            {
              "step": 1,
              "action": "Test SQL injection in username field",
              "endpoint": "/api/auth/login",
              "method": "POST",
              "payloads": [
                "admin' OR '1'='1' --",
                "admin'; DROP TABLE users; --",
                "' UNION SELECT * FROM users WHERE '1'='1",
                "admin' OR 1=1 LIMIT 1 --"
              ],
              "expectedResult": "Input validation failure, no SQL execution",
              "validationPoint": "JPA parameter binding protection"
            },
            {
              "step": 2,
              "action": "Test SQL injection in password field",
              "endpoint": "/api/auth/login",
              "method": "POST",
              "payloads": [
                "' OR '1'='1' --",
                "') OR ('1'='1') --",
                "' UNION SELECT password FROM users --"
              ],
              "expectedResult": "BCrypt password validation prevents injection",
              "validationPoint": "SecurityConfig.passwordEncoder()"
            }
          ],
          "securityControls": [
            "JPA prepared statements",
            "Input parameter validation",
            "BCrypt password hashing",
            "SQL query parameterization"
          ],
          "attackVectors": [
            "Union-based SQL injection",
            "Boolean-based blind SQL injection",
            "Time-based blind SQL injection",
            "Error-based SQL injection"
          ]
        },
        {
          "id": "SQL_002",
          "name": "Data Exfiltration via SQL Injection",
          "description": "Attempt data extraction through SQL injection in API endpoints",
          "category": "SQL Injection",
          "severity": "HIGH",
          "testSteps": [
            {
              "step": 1,
              "action": "Test account view endpoint for SQL injection",
              "endpoint": "/api/account/view/{accountId}",
              "method": "GET",
              "payloads": [
                "1' UNION SELECT * FROM users --",
                "1; SELECT password FROM users WHERE username='admin' --",
                "1' OR 1=1 --"
              ],
              "expectedResult": "Path variable validation prevents injection",
              "validationPoint": "Spring MVC parameter binding"
            },
            {
              "step": 2,
              "action": "Test transaction history endpoint",
              "endpoint": "/api/transaction/history",
              "method": "GET",
              "queryParams": {
                "accountId": "1' UNION SELECT * FROM accounts --",
                "limit": "10; SELECT * FROM cards --"
              },
              "expectedResult": "Query parameter validation and type checking",
              "validationPoint": "@RequestParam validation"
            }
          ],
          "securityControls": [
            "Spring MVC parameter validation",
            "Type-safe query parameters",
            "JPA repository method protection",
            "Role-based data access control"
          ]
        }
      ]
    },
    "xssVulnerabilityScenarios": {
      "description": "Cross-Site Scripting (XSS) vulnerability testing for React frontend and API responses",
      "scenarios": [
        {
          "id": "XSS_001",
          "name": "Stored XSS Attack Simulation",
          "description": "Test stored XSS vulnerabilities in user input fields",
          "category": "Cross-Site Scripting",
          "severity": "HIGH",
          "testSteps": [
            {
              "step": 1,
              "action": "Attempt stored XSS in user profile update",
              "endpoint": "/api/user/profile/update",
              "method": "PUT",
              "payloads": [
                "<script>alert('XSS')</script>",
                "<img src=x onerror=alert('XSS')>",
                "javascript:alert('XSS')",
                "<svg onload=alert('XSS')>"
              ],
              "expectedResult": "Input sanitization prevents script execution",
              "validationPoint": "Bean validation and input sanitization"
            },
            {
              "step": 2,
              "action": "Test XSS in transaction description field",
              "endpoint": "/api/transaction/add",
              "method": "POST",
              "payload": {
                "accountId": "12345",
                "amount": "100.00",
                "description": "<script>document.location='http://evil.com'</script>"
              },
              "expectedResult": "HTML encoding prevents script execution",
              "validationPoint": "React component XSS protection"
            }
          ],
          "securityControls": [
            "Input validation and sanitization",
            "Output encoding in React components",
            "Content Security Policy (CSP)",
            "Bean validation framework"
          ],
          "attackVectors": [
            "Script tag injection",
            "Event handler injection",
            "JavaScript protocol injection",
            "SVG-based XSS"
          ]
        },
        {
          "id": "XSS_002",
          "name": "Reflected XSS Attack Testing",
          "description": "Test reflected XSS vulnerabilities in API responses",
          "category": "Cross-Site Scripting",
          "severity": "MEDIUM",
          "testSteps": [
            {
              "step": 1,
              "action": "Test XSS in search functionality",
              "endpoint": "/api/search",
              "method": "GET",
              "queryParams": {
                "query": "<script>alert('Reflected XSS')</script>",
                "type": "account"
              },
              "expectedResult": "Query parameter encoding prevents execution",
              "validationPoint": "Spring MVC response encoding"
            },
            {
              "step": 2,
              "action": "Test XSS in error messages",
              "endpoint": "/api/account/view/invalid<script>alert('XSS')</script>",
              "method": "GET",
              "expectedResult": "Error message sanitization",
              "validationPoint": "Exception handler response encoding"
            }
          ],
          "securityControls": [
            "Query parameter validation",
            "Response content encoding",
            "Error message sanitization",
            "HTTP security headers"
          ]
        }
      ]
    },
    "csrfAttackScenarios": {
      "description": "CSRF attack simulation validating Spring Security CSRF protection mechanisms",
      "scenarios": [
        {
          "id": "CSRF_001",
          "name": "Cross-Site Request Forgery Attack",
          "description": "Test CSRF protection for state-changing operations",
          "category": "CSRF Attack",
          "severity": "HIGH",
          "testSteps": [
            {
              "step": 1,
              "action": "Attempt unauthorized account update via CSRF",
              "endpoint": "/api/account/update/12345",
              "method": "PUT",
              "attackVector": "External form submission without CSRF token",
              "payload": {
                "balance": "999999.99",
                "status": "ACTIVE"
              },
              "expectedResult": "CSRF token validation failure",
              "validationPoint": "CsrfSecurityConfig.csrfTokenRepository()"
            },
            {
              "step": 2,
              "action": "Test CSRF protection in transaction creation",
              "endpoint": "/api/transaction/add",
              "method": "POST",
              "attackVector": "Malicious website form submission",
              "payload": {
                "fromAccount": "12345",
                "toAccount": "67890",
                "amount": "1000.00"
              },
              "expectedResult": "CSRF token missing or invalid error",
              "validationPoint": "Spring Security CSRF filter"
            },
            {
              "step": 3,
              "action": "Validate CSRF token generation and validation",
              "endpoint": "/api/csrf-token",
              "method": "GET",
              "expectedResult": "Valid CSRF token returned",
              "followUpTest": {
                "action": "Use token in legitimate request",
                "expectedResult": "Request processed successfully"
              }
            }
          ],
          "securityControls": [
            "CSRF token generation and validation",
            "Double-submit cookie pattern",
            "SameSite cookie attribute",
            "Origin header validation"
          ],
          "attackVectors": [
            "Malicious form submission",
            "AJAX request forgery",
            "Image-based CSRF",
            "Link-based CSRF"
          ]
        }
      ]
    },
    "authorizationBypassScenarios": {
      "description": "Authorization boundary testing covering JWT token manipulation and session hijacking attempts",
      "scenarios": [
        {
          "id": "AUTHZ_001",
          "name": "Privilege Escalation Attack",
          "description": "Attempt unauthorized access to admin-only functionality",
          "category": "Authorization Bypass",
          "severity": "CRITICAL",
          "testSteps": [
            {
              "step": 1,
              "action": "Attempt admin endpoint access with user role",
              "endpoint": "/api/admin/users",
              "method": "GET",
              "headers": {
                "Authorization": "Bearer {USER_ROLE_JWT_TOKEN}"
              },
              "expectedResult": "403 Forbidden - Insufficient privileges",
              "validationPoint": "@PreAuthorize('hasRole(ADMIN)') annotation"
            },
            {
              "step": 2,
              "action": "Test vertical privilege escalation",
              "endpoint": "/api/users/create",
              "method": "POST",
              "headers": {
                "Authorization": "Bearer {USER_ROLE_JWT_TOKEN}"
              },
              "payload": {
                "username": "newadmin",
                "userType": "A",
                "roles": ["ADMIN"]
              },
              "expectedResult": "403 Forbidden - Cannot create admin users",
              "validationPoint": "Role-based authorization check"
            },
            {
              "step": 3,
              "action": "Test horizontal privilege escalation",
              "endpoint": "/api/account/view/99999",
              "method": "GET",
              "headers": {
                "Authorization": "Bearer {USER_ROLE_JWT_TOKEN}"
              },
              "expectedResult": "403 Forbidden - Cannot access other user's account",
              "validationPoint": "Account ownership validation"
            }
          ],
          "securityControls": [
            "Role-based access control (RBAC)",
            "Method-level security annotations",
            "Resource ownership validation",
            "JWT role claim verification"
          ]
        },
        {
          "id": "AUTHZ_002",
          "name": "Direct Object Reference Attack",
          "description": "Test insecure direct object reference vulnerabilities",
          "category": "Authorization Bypass",
          "severity": "HIGH",
          "testSteps": [
            {
              "step": 1,
              "action": "Attempt access to other user's transaction history",
              "endpoint": "/api/transaction/history/{accountId}",
              "method": "GET",
              "manipulation": "Use different user's accountId",
              "expectedResult": "403 Forbidden - Account access denied",
              "validationPoint": "Account ownership verification"
            },
            {
              "step": 2,
              "action": "Test card information disclosure",
              "endpoint": "/api/card/details/{cardId}",
              "method": "GET",
              "manipulation": "Sequential cardId enumeration",
              "expectedResult": "Authorization check prevents access",
              "validationPoint": "Card ownership validation"
            }
          ],
          "securityControls": [
            "Object-level authorization",
            "User context validation",
            "Resource ownership checks",
            "Data access control"
          ]
        }
      ]
    },
    "containerSecurityScenarios": {
      "description": "Cloud-native security patterns and container protection validation per Section 6.4.5.2",
      "scenarios": [
        {
          "id": "CONTAINER_001",
          "name": "Container Escape Attack Simulation",
          "description": "Test container isolation and escape prevention mechanisms",
          "category": "Container Security",
          "severity": "HIGH",
          "testSteps": [
            {
              "step": 1,
              "action": "Test application container file system access",
              "endpoint": "/api/system/files",
              "method": "GET",
              "manipulation": "Attempt to access host file system paths",
              "payloads": [
                "../../../etc/passwd",
                "/proc/version",
                "/var/run/docker.sock"
              ],
              "expectedResult": "File access denied - container isolation enforced",
              "validationPoint": "Container security context constraints"
            },
            {
              "step": 2,
              "action": "Test privilege escalation within container",
              "manipulation": "Attempt to execute privileged operations",
              "expectedResult": "Operation denied - non-root container execution",
              "validationPoint": "Pod security standards enforcement"
            }
          ],
          "securityControls": [
            "Container security context",
            "Pod security standards",
            "Resource limits and quotas",
            "Network policy isolation"
          ]
        },
        {
          "id": "CONTAINER_002",
          "name": "Kubernetes RBAC Testing",
          "description": "Validate Kubernetes role-based access control implementation",
          "category": "Kubernetes Security",
          "severity": "MEDIUM",
          "testSteps": [
            {
              "step": 1,
              "action": "Test service account permissions",
              "manipulation": "Attempt unauthorized Kubernetes API access",
              "expectedResult": "RBAC policies prevent unauthorized access",
              "validationPoint": "ServiceAccount and ClusterRole bindings"
            },
            {
              "step": 2,
              "action": "Validate network policy enforcement",
              "manipulation": "Attempt cross-namespace communication",
              "expectedResult": "Network policies block unauthorized traffic",
              "validationPoint": "NetworkPolicy resource enforcement"
            }
          ],
          "securityControls": [
            "Kubernetes RBAC policies",
            "Network policies",
            "Pod security contexts",
            "Service account isolation"
          ]
        }
      ]
    }
  },
  "SecurityTestConfiguration": {
    "owaspZapIntegration": {
      "zapVersion": "2.16.1",
      "scanProfiles": [
        {
          "name": "baseline",
          "description": "Basic security scanning for all endpoints",
          "config": {
            "maxDuration": 30,
            "alertThreshold": "MEDIUM",
            "contextName": "carddemo-context"
          }
        },
        {
          "name": "full-scan",
          "description": "Comprehensive security assessment",
          "config": {
            "maxDuration": 120,
            "alertThreshold": "LOW",
            "contextName": "carddemo-full-context",
            "spiderScan": true,
            "activeScan": true

          }
        }
      ],
      "authenticationConfig": {
        "type": "jwt",
        "loginUrl": "/api/auth/login",
        "usernameParameter": "username",
        "passwordParameter": "password",
        "tokenExtraction": {
          "location": "body",
          "jsonPath": "$.token"
        },
        "tokenUsage": {
          "header": "Authorization",
          "prefix": "Bearer "
        }
      }
    },
    "vulnerabilityAssessmentProfiles": {
      "pciDssCompliance": {
        "requirements": [
          "PCI DSS 6.5.1 - Injection flaws",
          "PCI DSS 6.5.7 - Cross-site scripting",
          "PCI DSS 6.5.9 - Insecure cryptographic storage",
          "PCI DSS 6.5.10 - Insecure communications"
        ],
        "testCategories": [
          "SQL Injection",
          "XSS Vulnerabilities",
          "Authentication Bypass",
          "Session Management",
          "Cryptographic Controls"
        ]
      },
      "owaspTop10": {
        "categories": [
          "A01:2021 - Broken Access Control",
          "A02:2021 - Cryptographic Failures",
          "A03:2021 - Injection",
          "A04:2021 - Insecure Design",
          "A05:2021 - Security Misconfiguration",
          "A06:2021 - Vulnerable Components",
          "A07:2021 - Authentication Failures",
          "A08:2021 - Software Integrity Failures",
          "A09:2021 - Logging Monitoring Failures",
          "A10:2021 - Server-Side Request Forgery"
        ]
      }
    },
    "attackVectorDefinitions": {
      "injectionAttacks": [
        "SQL Injection",
        "NoSQL Injection",
        "Command Injection",
        "LDAP Injection",
        "XPath Injection"
      ],
      "authenticationAttacks": [
        "Brute Force",
        "Credential Stuffing",
        "Session Fixation",
        "Session Hijacking",
        "JWT Manipulation"
      ],
      "authorizationAttacks": [
        "Privilege Escalation",
        "Insecure Direct Object Reference",
        "Missing Authorization",
        "Path Traversal"
      ],
      "clientSideAttacks": [
        "Cross-Site Scripting (XSS)",
        "Cross-Site Request Forgery (CSRF)",
        "Clickjacking",
        "DOM-based XSS"
      ]
    },
    "securityControlValidation": {
      "springSecurityControls": [
        {
          "control": "JWT Authentication",
          "validation": "Token signature verification with HS256",
          "testMethod": "Token manipulation and validation"
        },
        {
          "control": "Role-Based Authorization",
          "validation": "@PreAuthorize annotation enforcement",
          "testMethod": "Privilege escalation attempts"
        },
        {
          "control": "CSRF Protection",
          "validation": "Double-submit cookie pattern",
          "testMethod": "Cross-site request forgery simulation"
        },
        {
          "control": "Session Management",
          "validation": "Redis-backed session storage with TTL",
          "testMethod": "Session hijacking and timeout testing"
        },
        {
          "control": "Input Validation",
          "validation": "Bean validation and sanitization",
          "testMethod": "Injection attack simulation"
        }
      ],
      "infrastructureControls": [
        {
          "control": "Container Security",
          "validation": "Pod security standards and contexts",
          "testMethod": "Container escape attempts"
        },
        {
          "control": "Network Policies",
          "validation": "Kubernetes network isolation",
          "testMethod": "Unauthorized network access testing"
        },
        {
          "control": "RBAC Policies",
          "validation": "Service account permissions",
          "testMethod": "Kubernetes API unauthorized access"
        }
      ]
    },
    "complianceTestingScenarios": {
      "pciDssRequirements": [
        {
          "requirement": "6.5.1",
          "description": "Injection flaws, particularly SQL injection",
          "testScenarios": ["SQL_001", "SQL_002"],
          "validationCriteria": "No successful injection attacks"
        },
        {
          "requirement": "6.5.7",
          "description": "Cross-site scripting (XSS)",
          "testScenarios": ["XSS_001", "XSS_002"],
          "validationCriteria": "Input sanitization and output encoding"
        },
        {
          "requirement": "8.2.3",
          "description": "Strong authentication mechanisms",
          "testScenarios": ["AUTH_001", "AUTH_003"],
          "validationCriteria": "Multi-factor authentication and password complexity"
        }
      ],
      "nistCybersecurityFramework": [
        {
          "function": "Identify",
          "category": "Asset Management",
          "testScenarios": ["CONTAINER_001", "CONTAINER_002"],
          "validationCriteria": "Container and infrastructure inventory"
        },
        {
          "function": "Protect",
          "category": "Access Control",
          "testScenarios": ["AUTHZ_001", "AUTHZ_002"],
          "validationCriteria": "Role-based access control implementation"
        },
        {
          "function": "Detect",
          "category": "Security Monitoring",
          "testScenarios": ["AUTH_003"],
          "validationCriteria": "Failed authentication attempt detection"
        }
      ]
    },
    "automatedPenetrationTestExecution": {
      "schedule": {
        "frequency": "daily",
        "time": "02:00 UTC",
        "duration": "4 hours"
      },
      "environments": [
        {
          "name": "carddemo-integration",
          "url": "https://carddemo-integration.test.local",
          "scanProfile": "baseline"
        },
        {
          "name": "carddemo-uat",
          "url": "https://carddemo-uat.test.local",
          "scanProfile": "full-scan"
        }
      ],
      "reporting": {
        "formats": ["HTML", "JSON", "XML"],
        "distribution": [
          "security-team@carddemo.com",
          "development-team@carddemo.com"
        ],
        "alerting": {
          "highSeverity": "immediate",
          "mediumSeverity": "daily",
          "lowSeverity": "weekly"
        }
      }
    },
    "securityScanningParameters": {
      "scanDepth": "deep",
      "maxScanTime": 7200,
      "concurrentScans": 3,
      "userAgentString": "OWASP ZAP 2.16.1 Security Scanner",
      "excludePatterns": [
        "/api/health",
        "/api/metrics",
        "/api/info"
      ],
      "includePatterns": [
        "/api/auth/*",
        "/api/account/*",
        "/api/transaction/*",
        "/api/user/*",
        "/api/admin/*"
      ],
      "authenticationHandling": {
        "automaticReauth": true,
        "sessionTimeout": 1800,
        "tokenRefresh": true
      }
    }
  }
}