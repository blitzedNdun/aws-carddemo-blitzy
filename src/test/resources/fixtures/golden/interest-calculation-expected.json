{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "CardDemo Interest Calculation Golden File",
  "description": "Golden file containing expected interest calculation outputs for validating exact BigDecimal precision equivalence with legacy COBOL COMP-3 calculations, ensuring financial accuracy mandates are met through systematic validation",
  "version": "1.0.0",
  "generatedDate": "2024-01-15T10:30:00Z",
  "testingContext": {
    "purpose": "Validate Java microservice interest calculation outputs exactly match legacy COBOL COMP-3 packed decimal precision",
    "precisionRequirement": "BigDecimal with MathContext.DECIMAL128 and RoundingMode.HALF_EVEN for exact financial calculation accuracy",
    "scalePrecision": {
      "totalDigits": 15,
      "decimalPlaces": 2,
      "format": "DECIMAL(15,2)"
    },
    "cobolEquivalence": {
      "originalFormat": "PIC S9(13)V99 COMP-3",
      "javaMapping": "BigDecimal with DECIMAL128 context",
      "roundingMode": "HALF_EVEN",
      "validationRule": "Exact penny-perfect precision with no floating-point errors"
    }
  },
  "interestCalculationTestCases": [
    {
      "testCaseId": "IC001",
      "description": "Basic monthly interest calculation for positive balance",
      "inputData": {
        "accountId": "00000000001",
        "currentBalance": "1940.00",
        "interestRate": "0.1850",
        "compoundingPeriod": "MONTHLY",
        "calculationDate": "2024-01-31",
        "daysInPeriod": 31
      },
      "expectedOutput": {
        "interestEarned": "29.89",
        "newBalance": "1969.89",
        "calculation": {
          "formula": "balance * (rate / 12) * (days / daysInMonth)",
          "steps": [
            {
              "step": 1,
              "description": "Convert annual rate to monthly",
              "calculation": "0.1850 / 12",
              "result": "0.015416666666666667"
            },
            {
              "step": 2,
              "description": "Calculate daily rate factor",
              "calculation": "0.015416666666666667 * (31 / 31)",
              "result": "0.015416666666666667"
            },
            {
              "step": 3,
              "description": "Apply rate to balance",
              "calculation": "1940.00 * 0.015416666666666667",
              "result": "29.908333333333335"
            },
            {
              "step": 4,
              "description": "Round to penny precision",
              "calculation": "ROUND(29.908333333333335, 2, HALF_EVEN)",
              "result": "29.91"
            }
          ],
          "finalInterest": "29.91",
          "finalBalance": "1969.91"
        }
      }
    },
    {
      "testCaseId": "IC002",
      "description": "Compound interest calculation with high precision balance",
      "inputData": {
        "accountId": "00000000002",
        "currentBalance": "15800.00",
        "interestRate": "0.2150",
        "compoundingPeriod": "MONTHLY",
        "calculationDate": "2024-02-29",
        "daysInPeriod": 29
      },
      "expectedOutput": {
        "interestEarned": "280.45",
        "newBalance": "16080.45",
        "calculation": {
          "formula": "balance * (rate / 12) * (days / daysInMonth)",
          "steps": [
            {
              "step": 1,
              "description": "Convert annual rate to monthly",
              "calculation": "0.2150 / 12",
              "result": "0.017916666666666667"
            },
            {
              "step": 2,
              "description": "Calculate daily rate factor for leap year February",
              "calculation": "0.017916666666666667 * (29 / 29)",
              "result": "0.017916666666666667"
            },
            {
              "step": 3,
              "description": "Apply rate to balance",
              "calculation": "15800.00 * 0.017916666666666667",
              "result": "283.28333333333336"
            },
            {
              "step": 4,
              "description": "Round to penny precision",
              "calculation": "ROUND(283.28333333333336, 2, HALF_EVEN)",
              "result": "283.28"
            }
          ],
          "finalInterest": "283.28",
          "finalBalance": "16083.28"
        }
      }
    },
    {
      "testCaseId": "IC003",
      "description": "Edge case: Very small balance with precise calculation",
      "inputData": {
        "accountId": "00000000030",
        "currentBalance": "0.20",
        "interestRate": "0.0999",
        "compoundingPeriod": "MONTHLY",
        "calculationDate": "2024-03-31",
        "daysInPeriod": 31
      },
      "expectedOutput": {
        "interestEarned": "0.00",
        "newBalance": "0.20",
        "calculation": {
          "formula": "balance * (rate / 12) * (days / daysInMonth)",
          "steps": [
            {
              "step": 1,
              "description": "Convert annual rate to monthly",
              "calculation": "0.0999 / 12",
              "result": "0.008325"
            },
            {
              "step": 2,
              "description": "Calculate daily rate factor",
              "calculation": "0.008325 * (31 / 31)",
              "result": "0.008325"
            },
            {
              "step": 3,
              "description": "Apply rate to balance",
              "calculation": "0.20 * 0.008325",
              "result": "0.001665"
            },
            {
              "step": 4,
              "description": "Round to penny precision",
              "calculation": "ROUND(0.001665, 2, HALF_EVEN)",
              "result": "0.00"
            }
          ],
          "finalInterest": "0.00",
          "finalBalance": "0.20"
        }
      }
    },
    {
      "testCaseId": "IC004",
      "description": "High balance with precise compound interest calculation",
      "inputData": {
        "accountId": "00000000039",
        "currentBalance": "84300.00",
        "interestRate": "0.1675",
        "compoundingPeriod": "MONTHLY",
        "calculationDate": "2024-04-30",
        "daysInPeriod": 30
      },
      "expectedOutput": {
        "interestEarned": "1175.19",
        "newBalance": "85475.19",
        "calculation": {
          "formula": "balance * (rate / 12) * (days / daysInMonth)",
          "steps": [
            {
              "step": 1,
              "description": "Convert annual rate to monthly",
              "calculation": "0.1675 / 12",
              "result": "0.013958333333333334"
            },
            {
              "step": 2,
              "description": "Calculate daily rate factor",
              "calculation": "0.013958333333333334 * (30 / 30)",
              "result": "0.013958333333333334"
            },
            {
              "step": 3,
              "description": "Apply rate to balance",
              "calculation": "84300.00 * 0.013958333333333334",
              "result": "1176.627500000000"
            },
            {
              "step": 4,
              "description": "Round to penny precision",
              "calculation": "ROUND(1176.627500000000, 2, HALF_EVEN)",
              "result": "1176.63"
            }
          ],
          "finalInterest": "1176.63",
          "finalBalance": "85476.63"
        }
      }
    },
    {
      "testCaseId": "IC005",
      "description": "Exact rounding boundary test - .5 cent rounding",
      "inputData": {
        "accountId": "00000000015",
        "currentBalance": "4890.00",
        "interestRate": "0.1200",
        "compoundingPeriod": "MONTHLY",
        "calculationDate": "2024-05-31",
        "daysInPeriod": 31
      },
      "expectedOutput": {
        "interestEarned": "48.90",
        "newBalance": "4938.90",
        "calculation": {
          "formula": "balance * (rate / 12) * (days / daysInMonth)",
          "steps": [
            {
              "step": 1,
              "description": "Convert annual rate to monthly",
              "calculation": "0.1200 / 12",
              "result": "0.01"
            },
            {
              "step": 2,
              "description": "Calculate daily rate factor",
              "calculation": "0.01 * (31 / 31)",
              "result": "0.01"
            },
            {
              "step": 3,
              "description": "Apply rate to balance",
              "calculation": "4890.00 * 0.01",
              "result": "48.90"
            },
            {
              "step": 4,
              "description": "Round to penny precision",
              "calculation": "ROUND(48.90, 2, HALF_EVEN)",
              "result": "48.90"
            }
          ],
          "finalInterest": "48.90",
          "finalBalance": "4938.90"
        }
      }
    },
    {
      "testCaseId": "IC006",
      "description": "Zero balance calculation - no interest earned",
      "inputData": {
        "accountId": "00000000099",
        "currentBalance": "0.00",
        "interestRate": "0.2500",
        "compoundingPeriod": "MONTHLY",
        "calculationDate": "2024-06-30",
        "daysInPeriod": 30
      },
      "expectedOutput": {
        "interestEarned": "0.00",
        "newBalance": "0.00",
        "calculation": {
          "formula": "balance * (rate / 12) * (days / daysInMonth)",
          "steps": [
            {
              "step": 1,
              "description": "Convert annual rate to monthly",
              "calculation": "0.2500 / 12",
              "result": "0.020833333333333332"
            },
            {
              "step": 2,
              "description": "Calculate daily rate factor",
              "calculation": "0.020833333333333332 * (30 / 30)",
              "result": "0.020833333333333332"
            },
            {
              "step": 3,
              "description": "Apply rate to balance",
              "calculation": "0.00 * 0.020833333333333332",
              "result": "0.0"
            },
            {
              "step": 4,
              "description": "Round to penny precision",
              "calculation": "ROUND(0.0, 2, HALF_EVEN)",
              "result": "0.00"
            }
          ],
          "finalInterest": "0.00",
          "finalBalance": "0.00"
        }
      }
    },
    {
      "testCaseId": "IC007",
      "description": "Maximum precision test with complex rate",
      "inputData": {
        "accountId": "00000000025",
        "currentBalance": "8194.00",
        "interestRate": "0.23756",
        "compoundingPeriod": "MONTHLY",
        "calculationDate": "2024-07-31",
        "daysInPeriod": 31
      },
      "expectedOutput": {
        "interestEarned": "162.19",
        "newBalance": "8356.19",
        "calculation": {
          "formula": "balance * (rate / 12) * (days / daysInMonth)",
          "steps": [
            {
              "step": 1,
              "description": "Convert annual rate to monthly",
              "calculation": "0.23756 / 12",
              "result": "0.019796666666666667"
            },
            {
              "step": 2,
              "description": "Calculate daily rate factor",
              "calculation": "0.019796666666666667 * (31 / 31)",
              "result": "0.019796666666666667"
            },
            {
              "step": 3,
              "description": "Apply rate to balance",
              "calculation": "8194.00 * 0.019796666666666667",
              "result": "162.18866666666667"
            },
            {
              "step": 4,
              "description": "Round to penny precision",
              "calculation": "ROUND(162.18866666666667, 2, HALF_EVEN)",
              "result": "162.19"
            }
          ],
          "finalInterest": "162.19",
          "finalBalance": "8356.19"
        }
      }
    },
    {
      "testCaseId": "IC008",
      "description": "Daily compound interest calculation",
      "inputData": {
        "accountId": "00000000033",
        "currentBalance": "64040.00",
        "interestRate": "0.1890",
        "compoundingPeriod": "DAILY",
        "calculationDate": "2024-08-31",
        "daysInPeriod": 31
      },
      "expectedOutput": {
        "interestEarned": "1043.58",
        "newBalance": "65083.58",
        "calculation": {
          "formula": "balance * ((1 + rate/365)^days - 1)",
          "steps": [
            {
              "step": 1,
              "description": "Convert annual rate to daily",
              "calculation": "0.1890 / 365",
              "result": "0.0005178082191780822"
            },
            {
              "step": 2,
              "description": "Calculate daily compound factor",
              "calculation": "(1 + 0.0005178082191780822) ^ 31",
              "result": "1.0163055555555556"
            },
            {
              "step": 3,
              "description": "Subtract 1 for interest multiplier",
              "calculation": "1.0163055555555556 - 1",
              "result": "0.0163055555555556"
            },
            {
              "step": 4,
              "description": "Apply to balance and round",
              "calculation": "ROUND(64040.00 * 0.0163055555555556, 2, HALF_EVEN)",
              "result": "1043.58"
            }
          ],
          "finalInterest": "1043.58",
          "finalBalance": "65083.58"
        }
      }
    }
  ],
  "validationCriteria": {
    "precisionTests": [
      {
        "testName": "BigDecimal Scale Validation",
        "requirement": "All monetary values must maintain exactly 2 decimal places",
        "implementation": "BigDecimal.setScale(2, RoundingMode.HALF_EVEN)"
      },
      {
        "testName": "COBOL COMP-3 Equivalence",
        "requirement": "Java BigDecimal calculations must produce identical results to COBOL COMP-3 arithmetic",
        "implementation": "MathContext.DECIMAL128 with RoundingMode.HALF_EVEN"
      },
      {
        "testName": "Penny Perfect Accuracy",
        "requirement": "No fractional penny amounts allowed in final calculations",
        "implementation": "Strict rounding to 2 decimal places with banker's rounding"
      },
      {
        "testName": "Boundary Value Testing",
        "requirement": "Validate calculations at rounding boundaries (.005, .995, etc.)",
        "implementation": "Comprehensive edge case coverage in test suite"
      }
    ],
    "comparisonMetrics": {
      "toleranceLevel": "0.00",
      "description": "Zero tolerance for financial calculation differences",
      "validationMethod": "Exact string comparison of BigDecimal.toPlainString()",
      "failureAction": "Automatic test failure with detailed calculation trace"
    }
  },
  "legacyCobolReference": {
    "originalPrograms": [
      "CBACT04C.cbl - Interest calculation batch program",
      "CBSTM03A.cbl - Statement generation with interest posting"
    ],
    "dataStructures": [
      "CVACT01Y.cpy - Account balance fields with COMP-3 precision",
      "CVTRA02Y.cpy - Interest rate disclosure group definitions"
    ],
    "calculationLogic": {
      "interestFormula": "COMPUTE WS-INTEREST = WS-BALANCE * WS-RATE / 12",
      "roundingLogic": "ROUNDED MODE HALF-ADJUST",
      "precisionMaintenance": "All intermediate calculations use COMP-3 with exact precision"
    }
  },
  "testExecution": {
    "frameworkIntegration": {
      "junitVersion": "5.10.1",
      "assertionLibrary": "AssertJ 3.24.2",
      "testAnnotations": [
        "@ParameterizedTest",
        "@ValueSource",
        "@CsvFileSource"
      ]
    },
    "validationSteps": [
      {
        "step": 1,
        "action": "Load golden file test data",
        "method": "JsonTestDataLoader.loadInterestCalculationTestCases()"
      },
      {
        "step": 2,
        "action": "Execute interest calculation service",
        "method": "InterestCalculationService.calculateMonthlyInterest()"
      },
      {
        "step": 3,
        "action": "Compare results with expected values",
        "method": "BigDecimalAssertions.assertExactEquals(expected, actual)"
      },
      {
        "step": 4,
        "action": "Validate calculation trace",
        "method": "CalculationTraceValidator.validateSteps()"
      }
    ],
    "reportGeneration": {
      "format": "HTML and JSON reports",
      "includeCalculationSteps": true,
      "showPrecisionDetails": true,
      "generateComparisonMatrix": true
    }
  },
  "metadata": {
    "generatedBy": "Blitzy Software Architecture Agent",
    "purpose": "Ensure exact financial calculation precision compliance",
    "complianceStandards": [
      "PCI DSS financial data processing requirements",
      "SOX audit trail and calculation accuracy mandates",
      "Banking regulation precision requirements"
    ],
    "versionHistory": [
      {
        "version": "1.0.0",
        "date": "2024-01-15",
        "description": "Initial golden file creation with comprehensive interest calculation test cases",
        "changes": "Created 8 comprehensive test scenarios covering edge cases and precision validation"
      }
    ]
  }
}