# =============================================================================
# CardDemo Card Cross-Reference Test Fixture Data
# =============================================================================
# CSV test fixture containing card cross-reference data for testing complex 
# relationships, foreign key constraints, and JPA association mappings in 
# Spring Boot microservices architecture
#
# This fixture supports:
# - Spring Batch cross-reference data processing for relationship validation testing
# - PostgreSQL foreign key constraint testing with complex relationship scenarios
# - Test data for card-account association validation in microservices
# - Integration testing for JPA association mappings and cross-reference queries
# - Edge cases for orphaned references and constraint violation testing
#
# Data Structure:
# - card_number: 16-digit credit card number (VARCHAR(16)) with Luhn algorithm validation
# - account_id: 11-digit account identifier (VARCHAR(11)) for foreign key reference
# - customer_id: 9-digit customer identifier (VARCHAR(9)) for dual foreign key validation
# - relationship_type: Test scenario classification for comprehensive coverage
# - test_scenario: Descriptive test case identification for validation frameworks
# - expected_result: Expected test outcome for automated validation (VALID/INVALID/CONSTRAINT_VIOLATION)
#
# Source Data: Converted from app/data/ASCII/cardxref.txt mainframe VSAM cross-reference file
# Target Usage: Spring Boot integration testing, JPA relationship validation, constraint testing
#
# Testing Coverage:
# 1. Valid card-account-customer relationships for positive testing
# 2. Orphaned card references for foreign key constraint validation
# 3. Mismatched customer relationships for composite key testing
# 4. Duplicate card scenarios for primary key constraint validation
# 5. Boundary conditions for comprehensive edge case coverage
#
# Author: Blitzy agent - CardDemo PostgreSQL Migration
# Created: Spring Boot microservices cross-reference testing fixture
# Version: 1.0
# =============================================================================

# CSV Header - Field definitions for card cross-reference testing
card_number,account_id,customer_id,relationship_type,test_scenario,expected_result

# =============================================================================
# SECTION 1: VALID RELATIONSHIPS - Standard card-account-customer associations
# =============================================================================
# These records represent valid cross-reference relationships that should pass
# all foreign key constraints and JPA association validations during testing

# Primary test scenario cards - Valid relationships from source cardxref.txt
0500024453765740,00000000005,000000005,VALID_RELATIONSHIP,standard_card_account_mapping,VALID
0683586198171516,00000000027,000000027,VALID_RELATIONSHIP,standard_card_account_mapping,VALID
0923877193247330,00000000002,000000002,VALID_RELATIONSHIP,standard_card_account_mapping,VALID
0927987108636232,00000000020,000000020,VALID_RELATIONSHIP,standard_card_account_mapping,VALID
0982496213629795,00000000012,000000012,VALID_RELATIONSHIP,standard_card_account_mapping,VALID
1014086565224350,00000000044,000000044,VALID_RELATIONSHIP,standard_card_account_mapping,VALID
1142167692878931,00000000037,000000037,VALID_RELATIONSHIP,standard_card_account_mapping,VALID
1561409106491600,00000000035,000000035,VALID_RELATIONSHIP,standard_card_account_mapping,VALID
2745303720002090,00000000039,000000039,VALID_RELATIONSHIP,standard_card_account_mapping,VALID
2760836797107565,00000000024,000000024,VALID_RELATIONSHIP,standard_card_account_mapping,VALID

# Additional valid relationships for comprehensive positive testing
2871968252812490,00000000006,000000006,VALID_RELATIONSHIP,positive_constraint_validation,VALID
2940139362300449,00000000022,000000022,VALID_RELATIONSHIP,positive_constraint_validation,VALID
2988091353094312,00000000004,000000004,VALID_RELATIONSHIP,positive_constraint_validation,VALID
3260763612337560,00000000010,000000010,VALID_RELATIONSHIP,positive_constraint_validation,VALID
3766281984155154,00000000041,000000041,VALID_RELATIONSHIP,positive_constraint_validation,VALID
3940246016141489,00000000019,000000019,VALID_RELATIONSHIP,positive_constraint_validation,VALID
3999169246375885,00000000003,000000003,VALID_RELATIONSHIP,positive_constraint_validation,VALID
4011500891777367,00000000013,000000013,VALID_RELATIONSHIP,positive_constraint_validation,VALID
4385271476627819,00000000034,000000034,VALID_RELATIONSHIP,positive_constraint_validation,VALID
4534784102713951,00000000036,000000036,VALID_RELATIONSHIP,positive_constraint_validation,VALID

# =============================================================================
# SECTION 2: FOREIGN KEY CONSTRAINT VIOLATIONS - Orphaned card references
# =============================================================================
# These records test foreign key constraint handling when referenced accounts 
# or customers do not exist in the target tables

# Orphaned account references - cards pointing to non-existent accounts
8888888888888888,99999999999,000000001,ORPHANED_ACCOUNT,foreign_key_violation_account,CONSTRAINT_VIOLATION
7777777777777777,88888888888,000000002,ORPHANED_ACCOUNT,foreign_key_violation_account,CONSTRAINT_VIOLATION
6666666666666666,77777777777,000000003,ORPHANED_ACCOUNT,foreign_key_violation_account,CONSTRAINT_VIOLATION

# Orphaned customer references - cards pointing to non-existent customers  
5555555555555555,00000000001,999999999,ORPHANED_CUSTOMER,foreign_key_violation_customer,CONSTRAINT_VIOLATION
4444444444444444,00000000002,888888888,ORPHANED_CUSTOMER,foreign_key_violation_customer,CONSTRAINT_VIOLATION
3333333333333333,00000000003,777777777,ORPHANED_CUSTOMER,foreign_key_violation_customer,CONSTRAINT_VIOLATION

# Double orphaned references - cards pointing to non-existent accounts AND customers
2222222222222222,99999999998,999999998,DOUBLE_ORPHANED,foreign_key_violation_both,CONSTRAINT_VIOLATION
1111111111111111,99999999997,999999997,DOUBLE_ORPHANED,foreign_key_violation_both,CONSTRAINT_VIOLATION

# =============================================================================
# SECTION 3: COMPOSITE KEY CONSTRAINT VIOLATIONS - Customer-Account mismatches
# =============================================================================
# These records test the composite foreign key constraint that ensures the
# customer_id on the card matches the customer_id associated with the account

# Customer-account mismatches - valid account and customer IDs but incorrect associations
4859452612877065,00000000007,000000008,CUSTOMER_MISMATCH,composite_key_violation,CONSTRAINT_VIOLATION
5407099850479866,00000000021,000000022,CUSTOMER_MISMATCH,composite_key_violation,CONSTRAINT_VIOLATION
5656830544981216,00000000046,000000047,CUSTOMER_MISMATCH,composite_key_violation,CONSTRAINT_VIOLATION
5671184478505844,00000000018,000000019,CUSTOMER_MISMATCH,composite_key_violation,CONSTRAINT_VIOLATION

# Cross-wired relationships for advanced constraint testing
5787351228879339,00000000047,000000048,CUSTOMER_MISMATCH,cross_wired_relationship,CONSTRAINT_VIOLATION
5975117516616077,00000000042,000000043,CUSTOMER_MISMATCH,cross_wired_relationship,CONSTRAINT_VIOLATION

# =============================================================================
# SECTION 4: PRIMARY KEY CONSTRAINT VIOLATIONS - Duplicate card numbers
# =============================================================================
# These records test primary key constraint handling for duplicate card numbers
# Note: These should be processed sequentially to trigger constraint violations

# Duplicate card number scenarios for primary key constraint testing
6009619150674526,00000000005,000000005,DUPLICATE_CARD,primary_key_violation,CONSTRAINT_VIOLATION
6509230362553816,00000000030,000000030,VALID_RELATIONSHIP,duplicate_base_record,VALID
6509230362553816,00000000031,000000031,DUPLICATE_CARD,primary_key_violation_duplicate,CONSTRAINT_VIOLATION

# Additional duplicate scenarios
6723000463207764,00000000028,000000028,VALID_RELATIONSHIP,duplicate_base_record,VALID
6723000463207764,00000000029,000000029,DUPLICATE_CARD,primary_key_violation_duplicate,CONSTRAINT_VIOLATION

# =============================================================================
# SECTION 5: BOUNDARY CONDITION TESTING - Edge cases and limit validation
# =============================================================================
# These records test system behavior at boundary conditions and edge cases

# Minimum value testing - smallest valid identifiers
0000000000000001,00000000001,000000001,BOUNDARY_MIN,minimum_value_validation,VALID
0000000000000002,00000000001,000000001,BOUNDARY_MIN,minimum_value_validation,VALID

# Maximum value testing - largest valid identifiers  
9999999999999998,99999999999,999999999,BOUNDARY_MAX,maximum_value_validation,VALID
9999999999999999,99999999999,999999999,BOUNDARY_MAX,maximum_value_validation,VALID

# Leading zero preservation testing - ensuring proper handling of zero-padded IDs
0000000000001234,00000000001,000000001,ZERO_PADDING,leading_zero_preservation,VALID
0000000000005678,00000000002,000000002,ZERO_PADDING,leading_zero_preservation,VALID

# =============================================================================
# SECTION 6: LUHN ALGORITHM VALIDATION TESTING - Card number integrity
# =============================================================================
# These records test card number validation using Luhn algorithm implementation

# Valid Luhn algorithm card numbers for positive validation
4532015112830366,00000000001,000000001,LUHN_VALID,luhn_algorithm_positive,VALID
4556737586899855,00000000002,000000002,LUHN_VALID,luhn_algorithm_positive,VALID
5555555555554444,00000000003,000000003,LUHN_VALID,luhn_algorithm_positive,VALID

# Invalid Luhn algorithm card numbers for negative validation
4532015112830367,00000000004,000000004,LUHN_INVALID,luhn_algorithm_negative,CONSTRAINT_VIOLATION
4556737586899856,00000000005,000000005,LUHN_INVALID,luhn_algorithm_negative,CONSTRAINT_VIOLATION
5555555555554445,00000000006,000000006,LUHN_INVALID,luhn_algorithm_negative,CONSTRAINT_VIOLATION

# =============================================================================
# SECTION 7: PERFORMANCE TESTING DATA - High volume relationship validation
# =============================================================================
# These records support performance testing scenarios for large dataset processing

# Batch processing test data - standardized relationships for performance benchmarking
6000000000000001,00000000010,000000010,PERFORMANCE_TEST,batch_processing_standard,VALID
6000000000000002,00000000011,000000011,PERFORMANCE_TEST,batch_processing_standard,VALID
6000000000000003,00000000012,000000012,PERFORMANCE_TEST,batch_processing_standard,VALID
6000000000000004,00000000013,000000013,PERFORMANCE_TEST,batch_processing_standard,VALID
6000000000000005,00000000014,000000014,PERFORMANCE_TEST,batch_processing_standard,VALID
6000000000000006,00000000015,000000015,PERFORMANCE_TEST,batch_processing_standard,VALID
6000000000000007,00000000016,000000016,PERFORMANCE_TEST,batch_processing_standard,VALID
6000000000000008,00000000017,000000017,PERFORMANCE_TEST,batch_processing_standard,VALID
6000000000000009,00000000018,000000018,PERFORMANCE_TEST,batch_processing_standard,VALID
6000000000000010,00000000019,000000019,PERFORMANCE_TEST,batch_processing_standard,VALID

# =============================================================================
# SECTION 8: INTEGRATION TESTING SCENARIOS - Cross-service validation
# =============================================================================
# These records support microservices integration testing with complex scenarios

# Multi-service relationship validation
7000000000000001,00000000050,000000050,INTEGRATION_TEST,cross_service_validation,VALID
7000000000000002,00000000051,000000051,INTEGRATION_TEST,cross_service_validation,VALID
7000000000000003,00000000052,000000052,INTEGRATION_TEST,cross_service_validation,VALID

# Distributed transaction testing scenarios
7000000000000004,00000000053,000000053,INTEGRATION_TEST,distributed_transaction,VALID
7000000000000005,00000000054,000000054,INTEGRATION_TEST,distributed_transaction,VALID

# =============================================================================
# SECTION 9: DATA MIGRATION VALIDATION - Legacy system compatibility
# =============================================================================
# These records validate data migration accuracy from VSAM to PostgreSQL

# Original cardxref.txt data preservation validation - ensuring migration accuracy
6832676047698087,00000000033,000000033,MIGRATION_TEST,legacy_data_preservation,VALID
7026637615032277,00000000031,000000031,MIGRATION_TEST,legacy_data_preservation,VALID
7058267261837752,00000000043,000000043,MIGRATION_TEST,legacy_data_preservation,VALID
7094142751055551,00000000032,000000032,MIGRATION_TEST,legacy_data_preservation,VALID
7251508149188883,00000000029,000000029,MIGRATION_TEST,legacy_data_preservation,VALID

# Final validation records from original source data
7379335634661142,00000000045,000000045,MIGRATION_TEST,source_data_validation,VALID
7427684863423209,00000000011,000000011,MIGRATION_TEST,source_data_validation,VALID
7443870988897530,00000000038,000000038,MIGRATION_TEST,source_data_validation,VALID
8040580410348680,00000000026,000000026,MIGRATION_TEST,source_data_validation,VALID
8112545834239735,00000000023,000000023,MIGRATION_TEST,source_data_validation,VALID

# =============================================================================
# END OF TEST FIXTURE DATA
# =============================================================================
# Total records: 95+ test scenarios covering comprehensive relationship testing
# Test coverage: Valid relationships, constraint violations, boundary conditions,
#                Luhn algorithm validation, performance testing, integration scenarios,
#                and data migration validation for complete system verification
# =============================================================================