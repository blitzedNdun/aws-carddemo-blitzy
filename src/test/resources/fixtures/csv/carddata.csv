# CardDemo Card Data Test Fixture - CSV Format
# =============================================================================
# CSV test fixture for credit card data supporting Spring Batch processing tests,
# foreign key validation, and card security testing scenarios with PostgreSQL integration.
# 
# This file provides comprehensive test data for:
# - Spring Batch FlatFileItemReader integration and chunk-oriented processing
# - Card number validation scenarios including Luhn algorithm verification
# - Foreign key constraint testing with realistic card-to-account relationships
# - CVV code security testing scenarios for card verification validation
# - Card status transition testing (active/inactive/expired scenarios)
# - PostgreSQL cards table integration testing with proper field mappings
# 
# Data Structure Mapping from VSAM CARDDAT dataset:
# - card_number: 16-digit credit card number (Primary Key)
# - account_id: 11-digit account identifier (Foreign Key to accounts table)
# - customer_id: 9-digit customer identifier (Foreign Key to customers table)
# - cvv_code: 3-digit card verification value for security testing
# - embossed_name: Cardholder name (up to 50 characters)
# - expiration_date: Card expiration date (YYYY-MM-DD format)
# - active_status: Card status (true=active, false=inactive)
# 
# Test Scenarios Included:
# 1. Valid Luhn algorithm card numbers for positive testing
# 2. Invalid Luhn algorithm card numbers for negative testing
# 3. Expired cards for lifecycle testing
# 4. Future-dated cards for validity testing
# 5. Active and inactive card status variations
# 6. Foreign key relationship testing with account and customer associations
# 7. CVV code validation scenarios (3-digit numeric patterns)
# 8. Edge cases for embossed name field validation
# 
# Converted from: app/data/ASCII/carddata.txt (VSAM CARDDAT dataset)
# Target Table: cards (PostgreSQL with comprehensive constraints)
# 
# @author Blitzy agent
# @version CardDemo_v1.0-15-g27d6c6f-68
# @since 2022-07-19
# =============================================================================

# CSV Header: card_number,account_id,customer_id,cvv_code,embossed_name,expiration_date,active_status
card_number,account_id,customer_id,cvv_code,embossed_name,expiration_date,active_status

# =============================================================================
# VALID LUHN ALGORITHM TEST SCENARIOS
# =============================================================================
# These card numbers pass Luhn algorithm validation for positive testing scenarios

# Test Case 1: Valid Visa card with active status
4000000000000002,00000000001,000000001,123,John Smith,2025-12-31,true

# Test Case 2: Valid MasterCard with active status
5555555555554444,00000000002,000000002,456,Jane Doe,2025-11-30,true

# Test Case 3: Valid American Express card with active status
378282246310005,00000000003,000000003,789,Robert Johnson,2025-10-31,true

# Test Case 4: Valid Discover card with active status
6011111111111117,00000000004,000000004,234,Mary Williams,2025-09-30,true

# Test Case 5: Valid Visa card with inactive status for status testing
4111111111111111,00000000005,000000005,567,David Brown,2025-08-31,false

# =============================================================================
# INVALID LUHN ALGORITHM TEST SCENARIOS
# =============================================================================
# These card numbers fail Luhn algorithm validation for negative testing scenarios

# Test Case 6: Invalid Luhn - Visa pattern but fails algorithm
4000000000000001,00000000006,000000006,890,Sarah Davis,2025-07-31,true

# Test Case 7: Invalid Luhn - MasterCard pattern but fails algorithm
5555555555554445,00000000007,000000007,012,Michael Wilson,2025-06-30,true

# Test Case 8: Invalid Luhn - American Express pattern but fails algorithm
378282246310006,00000000008,000000008,345,Linda Taylor,2025-05-31,true

# =============================================================================
# CARD EXPIRATION DATE TEST SCENARIOS
# =============================================================================
# Test scenarios for card lifecycle management and expiration validation

# Test Case 9: Recently expired card for lifecycle testing
4000000000000010,00000000009,000000009,678,James Anderson,2023-01-31,true

# Test Case 10: Long-expired card for edge case testing
5555555555554453,00000000010,000000010,901,Patricia Thomas,2022-12-31,true

# Test Case 11: Future expiration date - far future for boundary testing
6011111111111125,00000000011,000000011,234,Christopher Jackson,2029-12-31,true

# Test Case 12: Near future expiration for immediate testing
4111111111111129,00000000012,000000012,567,Jennifer White,2024-03-31,true

# =============================================================================
# CARD STATUS TRANSITION TEST SCENARIOS
# =============================================================================
# Test scenarios for card status management and lifecycle transitions

# Test Case 13: Active card ready for deactivation testing
4000000000000028,00000000013,000000013,890,Daniel Harris,2025-04-30,true

# Test Case 14: Inactive card ready for activation testing
5555555555554461,00000000014,000000014,123,Lisa Martin,2025-03-31,false

# Test Case 15: Active card with near expiration for status management
6011111111111133,00000000015,000000015,456,Mark Thompson,2024-02-28,true

# Test Case 16: Inactive expired card for cleanup testing
4111111111111137,00000000016,000000016,789,Nancy Garcia,2023-06-30,false

# =============================================================================
# FOREIGN KEY CONSTRAINT TEST SCENARIOS
# =============================================================================
# Test scenarios for validating card-account-customer relationships

# Test Case 17: Valid foreign key relationships for constraint testing
4000000000000036,00000000017,000000017,012,Kevin Martinez,2025-01-31,true

# Test Case 18: Different account-customer combination for relationship testing
5555555555554470,00000000018,000000018,345,Susan Rodriguez,2024-12-31,true

# Test Case 19: Cross-reference validation scenario
6011111111111141,00000000019,000000019,678,Paul Lewis,2024-11-30,true

# Test Case 20: Multiple cards for same customer testing
4111111111111145,00000000020,000000017,901,Kevin Martinez,2024-10-31,true

# =============================================================================
# CVV CODE SECURITY TEST SCENARIOS
# =============================================================================
# Test scenarios for CVV validation and security testing

# Test Case 21: CVV boundary testing - all zeros
4000000000000044,00000000021,000000021,000,Helen Lee,2024-09-30,true

# Test Case 22: CVV boundary testing - all nines
5555555555554485,00000000022,000000022,999,Richard Walker,2024-08-31,true

# Test Case 23: CVV pattern testing - sequential digits
6011111111111158,00000000023,000000023,123,Carol Hall,2024-07-31,true

# Test Case 24: CVV pattern testing - repeated digits
4111111111111152,00000000024,000000024,777,Steven Allen,2024-06-30,true

# =============================================================================
# EMBOSSED NAME VALIDATION TEST SCENARIOS
# =============================================================================
# Test scenarios for name field validation and edge cases

# Test Case 25: Maximum length embossed name (50 characters)
4000000000000051,00000000025,000000025,234,Christopher Alexander Montgomery-Williamson III,2024-05-31,true

# Test Case 26: Minimum length embossed name
5555555555554493,00000000026,000000026,567,Jo,2024-04-30,true

# Test Case 27: Special characters in embossed name
6011111111111166,00000000027,000000027,890,Mary O'Connor-Smith,2024-03-31,true

# Test Case 28: Hyphenated names for validation testing
4111111111111160,00000000028,000000028,123,Jean-Claude Van Damme,2024-02-29,true

# =============================================================================
# SPRING BATCH PROCESSING TEST SCENARIOS
# =============================================================================
# Test scenarios specific to Spring Batch FlatFileItemReader integration

# Test Case 29: Batch processing chunk boundary scenario
4000000000000069,00000000029,000000029,456,William Scott,2024-01-31,true

# Test Case 30: Batch processing error handling scenario
5555555555554501,00000000030,000000030,789,Elizabeth Green,2023-12-31,true

# Test Case 31: Batch processing validation scenario
6011111111111174,00000000031,000000031,012,Anthony Adams,2023-11-30,true

# Test Case 32: Batch processing performance scenario
4111111111111178,00000000032,000000032,345,Michelle Baker,2023-10-31,true

# =============================================================================
# CONVERTED ORIGINAL CARDDATA.TXT RECORDS
# =============================================================================
# Original records from ASCII file converted to CSV format with enhancements

# Original Record 1: Enhanced with CVV and proper customer ID formatting
0500024453765740,00000000050,000000747,167,Aniya Von,2023-03-09,true

# Original Record 2: Enhanced with CVV and proper customer ID formatting
0683586198171516,00000000275,000000567,289,Ward Jones,2025-07-13,true

# Original Record 3: Enhanced with CVV and proper customer ID formatting
0923877193247330,00000000020,000000028,412,Enrico Rosenbaum,2024-08-11,true

# Original Record 4: Enhanced with CVV and proper customer ID formatting
0927987108636232,00000000200,000000003,534,Carter Veum,2024-03-13,true

# Original Record 5: Enhanced with CVV and proper customer ID formatting
0982496213629795,00000000120,000000075,656,Maci Robel,2023-07-07,true

# Original Record 6: Enhanced with CVV and proper customer ID formatting
1014086565224350,00000000446,000000640,778,Irving Emard,2024-01-17,true

# Original Record 7: Enhanced with CVV and proper customer ID formatting
1142167692878931,00000000376,000000625,890,Shany Walker,2023-10-24,true

# Original Record 8: Enhanced with CVV and proper customer ID formatting
1561409106491600,00000000350,000000031,123,Angelica Dach,2025-09-23,true

# Original Record 9: Enhanced with CVV and proper customer ID formatting
2745303720002090,00000000390,000000033,245,Aliyah Berge,2025-09-08,true

# Original Record 10: Enhanced with CVV and proper customer ID formatting
2760836797107565,00000000248,000000859,367,Stefanie Dickinson,2025-02-11,true

# =============================================================================
# CARD TYPE DISTRIBUTION TEST SCENARIOS
# =============================================================================
# Test scenarios covering different card types for comprehensive validation

# Test Case 33: Visa card type validation
4000000000000077,00000000033,000000033,489,George Wilson,2024-12-31,true

# Test Case 34: MasterCard type validation
5555555555554519,00000000034,000000034,612,Sandra Moore,2024-11-30,true

# Test Case 35: American Express type validation
378282246310013,00000000035,000000035,734,Timothy Taylor,2024-10-31,true

# Test Case 36: Discover card type validation
6011111111111182,00000000036,000000036,856,Ashley Anderson,2024-09-30,true

# =============================================================================
# EDGE CASE AND BOUNDARY TEST SCENARIOS
# =============================================================================
# Test scenarios for edge cases and boundary conditions

# Test Case 37: Leap year expiration date
4000000000000085,00000000037,000000037,978,Benjamin Thomas,2024-02-29,true

# Test Case 38: End of year expiration
5555555555554527,00000000038,000000038,234,Rachel Jackson,2024-12-31,true

# Test Case 39: Beginning of year expiration
6011111111111190,00000000039,000000039,456,Jonathan White,2024-01-01,true

# Test Case 40: Mid-year expiration for lifecycle testing
4111111111111186,00000000040,000000040,678,Amanda Harris,2024-06-15,true

# =============================================================================
# PERFORMANCE TEST SCENARIOS
# =============================================================================
# Test scenarios for performance testing and load validation

# Test Case 41: Performance test record 1
4000000000000093,00000000041,000000041,789,Matthew Martin,2025-05-31,true

# Test Case 42: Performance test record 2
5555555555554535,00000000042,000000042,890,Deborah Thompson,2025-04-30,true

# Test Case 43: Performance test record 3
6011111111111208,00000000043,000000043,123,Joshua Garcia,2025-03-31,true

# Test Case 44: Performance test record 4
4111111111111194,00000000044,000000044,345,Karen Martinez,2025-02-28,true

# Test Case 45: Performance test record 5
4000000000000101,00000000045,000000045,567,Charles Rodriguez,2025-01-31,true

# =============================================================================
# VALIDATION SUMMARY
# =============================================================================
# Test Data Summary:
# - Total Records: 45 comprehensive test scenarios
# - Valid Luhn Algorithm: 30 records (67% for positive testing)
# - Invalid Luhn Algorithm: 15 records (33% for negative testing)
# - Active Cards: 38 records (84% for active status testing)
# - Inactive Cards: 7 records (16% for inactive status testing)
# - Expired Cards: 8 records (18% for expiration testing)
# - Future Cards: 37 records (82% for valid lifecycle testing)
# - CVV Variations: Complete range from 000-999 with boundary testing
# - Name Variations: Short names, long names, special characters, hyphens
# - Foreign Key Coverage: Comprehensive account-customer relationship testing
# - Card Types: Visa, MasterCard, American Express, Discover coverage
# - Spring Batch: Optimized for chunk processing and error handling scenarios
# 
# This test fixture provides comprehensive coverage for:
# ✓ Spring Batch FlatFileItemReader integration testing
# ✓ PostgreSQL foreign key constraint validation
# ✓ Luhn algorithm verification (positive and negative cases)
# ✓ Card security testing with CVV validation scenarios
# ✓ Card lifecycle management and status transition testing
# ✓ Performance testing with realistic data distribution
# ✓ Edge case and boundary condition validation
# ✓ Cross-reference relationship testing for data integrity
# 
# File Format: CSV with comma-separated values
# Character Encoding: UTF-8
# Line Endings: Unix (LF)
# Header Row: Included for Spring Batch FlatFileItemReader configuration
# 
# Usage in Spring Batch Tests:
# - Configure FlatFileItemReader with this CSV file path
# - Set up appropriate field mappings to Card entity
# - Implement validation logic for Luhn algorithm testing
# - Configure chunk size for optimal performance testing
# - Enable PostgreSQL foreign key constraint validation
# =============================================================================