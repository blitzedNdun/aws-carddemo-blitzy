# =============================================================================
# CARDDEMO SPRING BOOT TEST CONFIGURATION
# =============================================================================
# Comprehensive test environment configuration supporting Testcontainers integration,
# Spring Security mock authentication, and isolated database testing for the 
# modernized CardDemo credit card management system.
#
# This configuration enables:
# - Testcontainers PostgreSQL and Redis for integration testing per Section 6.6.3.2
# - Spring Security test slices with @WithMockUser and SecurityMockMvcConfigurers per Section 6.6.2.4
# - Parallel test execution with isolated database instances per Section 6.6.5.4
# - H2 in-memory database for fast unit testing with PostgreSQL compatibility mode
# - Mock JWT authentication and role-based testing support
# - Test-specific logging levels and Spring Boot test slice configurations
# - Database migration testing with Liquibase rollback validation
# - Performance testing configuration supporting 10,000+ TPS load testing
# - Financial precision validation using BigDecimal test assertions
#
# Based on: Technical Specification Section 6.6 Testing Strategy
#           Section 6.2 Database Design
#           Section 0 Summary of Changes - Testing Requirements
#
# Author: Blitzy agent
# Created: Spring Boot test configuration supporting comprehensive testing strategy
# Version: 1.0
# =============================================================================

# Environment variable overrides for testing
DEFAULT_USER: "testuser"
DEFAULT_PASSWORD: "testpass"
DEFAULT_ROLES: "USER,ADMIN,TEST"
BATCH_JOBS_ENABLED: "false"

# =============================================================================
# SPRING FRAMEWORK TEST CONFIGURATION
# =============================================================================

spring:
  # Test profile activation and configuration
  config:
    activate:
      on-profile: test
    import:
      - "optional:classpath:application.yml"  # Import base configuration
  
  # Application identification for test environment
  application:
    name: carddemo-test
    
  # Exclude Redis auto-configuration to avoid health check conflicts in test environment
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration
      - org.springframework.boot.actuate.autoconfigure.redis.RedisHealthContributorAutoConfiguration
    version: "1.0.0-TEST"
    description: "CardDemo Test Environment - Comprehensive Testing Configuration"
  
  # Test-specific main configuration
  main:
    banner-mode: "off"                        # Disable banner in tests for cleaner output
    lazy-initialization: false                # Ensure full context loading for integration tests
    allow-bean-definition-overriding: true    # Allow test bean overrides
    allow-circular-references: false          # Maintain strict dependency management
    web-application-type: servlet             # Ensure servlet stack for MockMvc testing

  # Auto-configuration exclusions for test environment
  autoconfigure:
    exclude:
      - org.springframework.cloud.gateway.config.GatewayAutoConfiguration
      - org.springframework.cloud.gateway.config.GatewayClassPathWarningAutoConfiguration
      - org.springframework.cloud.gateway.config.GatewayMetricsAutoConfiguration
      - org.springframework.cloud.gateway.config.GatewayRedisAutoConfiguration
      - org.springframework.cloud.gateway.config.GatewayReactiveLoadBalancerClientAutoConfiguration
      - org.springframework.cloud.gateway.config.GatewayWebfluxEndpointConfiguration
      - org.springframework.cloud.gateway.config.SimpleUrlHandlerMappingGlobalCorsAutoConfiguration
      - org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration

  # Test servlet configuration
  servlet:
    multipart:
      enabled: true
      max-file-size: 1MB                      # Smaller file size limit for tests
      max-request-size: 5MB
      file-size-threshold: 512KB

  # Jackson configuration for test JSON serialization with BigDecimal precision
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
      WRITE_BIGDECIMAL_AS_PLAIN: true         # Critical for financial precision testing
      FAIL_ON_EMPTY_BEANS: false
      INDENT_OUTPUT: true                     # Pretty print JSON in test output
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false
      USE_BIG_DECIMAL_FOR_FLOATS: true        # Ensure BigDecimal usage in tests
      ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: true
    default-property-inclusion: NON_NULL
    date-format: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
    time-zone: "UTC"
    generator:
      WRITE_BIGDECIMAL_AS_PLAIN: true         # Maintain financial precision
    parser:
      ALLOW_NUMERIC_LEADING_ZEROS: true

# =============================================================================
# TEST DATABASE CONFIGURATION - MULTI-TIER STRATEGY
# =============================================================================
# Supports both H2 in-memory for unit tests and Testcontainers PostgreSQL 
# for integration testing with complete VSAM-to-PostgreSQL data validation

  # Primary test datasource configuration (H2 in-memory for unit tests)
  datasource:
    # H2 configuration with PostgreSQL compatibility mode
    url: "jdbc:h2:mem:carddemo_test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH"
    driver-class-name: org.h2.Driver
    username: sa
    password: ""
    
    # HikariCP configuration optimized for test execution
    hikari:
      pool-name: CardDemoTestHikariPool
      connection-timeout: 5000                # Faster timeout for tests
      idle-timeout: 30000                     # Shorter idle timeout
      max-lifetime: 300000                    # 5 minutes max lifetime
      minimum-idle: 1                         # Minimal idle connections
      maximum-pool-size: 10                   # Smaller pool for tests
      leak-detection-threshold: 30000         # 30 seconds leak detection
      connection-test-query: "SELECT 1"
      validation-timeout: 2000
      auto-commit: false                      # Explicit transaction management
      
      # Test-specific data source properties
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 100                # Smaller cache for tests
        prepStmtCacheSqlLimit: 1024
        useServerPrepStmts: false             # H2 optimization
        ApplicationName: "CardDemo-Test"

  # H2 console configuration for test debugging
  h2:
    console:
      enabled: true
      path: "/h2-console"
      settings:
        web-allow-others: false
        trace: false

  # JPA/Hibernate configuration for testing
  jpa:
    hibernate:
      ddl-auto: create-drop                   # Recreate schema for each test
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    
    properties:
      hibernate:
        # Test database dialect
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true                      # Format SQL for test debugging
        show_sql: false                       # Controlled by logging configuration
        use_sql_comments: true                # Add SQL comments for debugging
        
        # Test transaction and session management
        default_schema: "PUBLIC"
        connection:
          isolation: 4                        # SERIALIZABLE - same as production
          autocommit: false
          
        # Performance settings for tests
        jdbc:
          batch_size: 20                      # Smaller batch size for tests
          batch_versioned_data: true
          fetch_size: 20
          use_streams_for_binary: true
          time_zone: "UTC"
          
        # Disable caching for predictable test behavior
        cache:
          use_second_level_cache: false
          use_query_cache: false
          
        # Schema validation for tests
        hbm2ddl:
          auto: create-drop
          create_namespaces: true
          
        # Test-specific Hibernate settings
        enable_lazy_load_no_trans: false
        max_fetch_depth: 2                    # Shallower fetch depth for tests
        default_batch_fetch_size: 8
        order_inserts: true
        order_updates: true
        generate_statistics: true             # Enable statistics for test metrics
        
    # JPA-specific test settings
    open-in-view: false                       # Prevent lazy loading issues
    generate-ddl: true                        # Allow DDL generation for tests
    show-sql: false                           # Controlled by logging
    defer-datasource-initialization: false

# =============================================================================
# LIQUIBASE TEST CONFIGURATION
# =============================================================================
# Database migration testing with rollback validation

  liquibase:
    enabled: true
    change-log: classpath:db/liquibase-test-changelog.xml
    default-schema: "PUBLIC"
    liquibase-schema: "PUBLIC"
    contexts: "test,unit-test,integration-test"
    label-filter: "test"
    drop-first: true                          # Drop schema before tests
    rollback-file: "test-rollback.sql"
    test-rollback-on-update: true             # Validate rollback scripts
    parameters:
      database.target: "H2 Test Database"
      application.version: "CardDemo Test v1.0"
      schema.name: "carddemo_test"

  # =============================================================================
  # SPRING SECURITY TEST CONFIGURATION  
  # =============================================================================
  # Mock authentication and role-based testing per Section 6.6.2.4
  # Note: OAuth2ResourceServerAutoConfiguration is excluded in autoconfigure.exclude
  security:
    # Test user configuration for mock authentication - overrides main config
    user:
      name: testuser                         # Hardcoded test user
      password: testpass                     # Hardcoded test password
      roles: 
        - "USER"
        - "ADMIN"
        - "TEST"
    
    # JWT test configuration for mock authentication
    test:
      jwt:
        secret: test-jwt-secret-key-for-testing-purposes-minimum-256-bits-required
        expiration: 3600                     # 1 hour for tests
        issuer: CardDemo-Test-Auth           # Test JWT issuer
      
      # Mock users for role-based testing
      mock-users:
        admin:
          username: testadmin
          password: testpass
          roles: ["ADMIN", "USER"]
        user:
          username: testuser
          password: testpass
          roles: ["USER"]
        readonly:
          username: testreadonly
          password: testpass
          roles: ["READONLY"]

  # =============================================================================
  # SPRING BATCH TEST CONFIGURATION
  # =============================================================================
  # Batch processing test configuration
  batch:
    job:
      enabled: false                          # Disable automatic job execution in tests
      names: ""
    initialize-schema: always                 # Always initialize for tests
    table-prefix: "TEST_BATCH_"               # Test-specific table prefix
    
    # Test job repository configuration
    repository:
      isolation-level-for-create: serializable
      serialization-type: jackson

  # =============================================================================
  # SPRING DATA TEST CONFIGURATION
  # =============================================================================
  # Override main config Redis settings for tests
  data:
    redis:
      host: localhost                         # Will be replaced by Testcontainers
      port: 6379                              # Will be replaced by Testcontainers
      database: 1                             # Use database 1 for tests (override main config)
      timeout: 2000ms                         # Shorter timeout for tests
      lettuce:
        pool:
          max-active: 5                       # Smaller pool for tests
          max-idle: 3
          min-idle: 1
          max-wait: 1000ms

  # =============================================================================
  # SPRING SESSION TEST CONFIGURATION
  # =============================================================================
  # Redis session management testing configuration per Section 6.6.2.4
  session:
    store-type: redis
    redis:
      database: 1                             # Use database 1 for session storage
      namespace: "carddemo:test:session"
      flush-mode: immediate
      save-mode: always
      cleanup-cron: "0 */5 * * * *"           # More frequent cleanup for tests
    timeout: 300s                            # Shorter session timeout for tests
    cookie:
      name: "CARDDEMO-TEST-SESSIONID"
      max-age: 300s
      http-only: true
      secure: false                          # Allow insecure cookies in tests
      same-site: "lax"

# =============================================================================
# TESTCONTAINERS CONFIGURATION
# =============================================================================
# PostgreSQL and Redis Testcontainers for integration testing per Section 6.6.3.2

testcontainers:
  # PostgreSQL Testcontainer configuration
  postgresql:
    enabled: true
    image: "postgres:15-alpine"
    database-name: "carddemo_test"
    username: "test_user"
    password: "test_password"
    init-script-path: "classpath:testcontainers/postgresql/init.sql"
    port-bindings:
      - "0:5432"                              # Dynamic port allocation
    environment:
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      POSTGRES_DB: "carddemo_test"
      POSTGRES_USER: "test_user"
      POSTGRES_PASSWORD: "test_password"
    tmpfs:
      - /var/lib/postgresql/data:rw,size=256m # Faster I/O with tmpfs
    shared-memory-size: 128m
    wait-strategy: "org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy"
    wait-strategy-message: "database system is ready to accept connections"
    startup-timeout: 60s
    
  # Redis Testcontainer configuration  
  redis:
    enabled: true
    image: "redis:7-alpine"
    port-bindings:
      - "0:6379"                              # Dynamic port allocation
    command: 
      - "redis-server"
      - "--appendonly"
      - "yes"
      - "--maxmemory"
      - "128mb"
      - "--maxmemory-policy"
      - "allkeys-lru"
    tmpfs:
      - /data:rw,size=64m                     # Faster I/O for Redis data
    wait-strategy: "org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy"
    wait-strategy-message: "Ready to accept connections"
    startup-timeout: 30s

# =============================================================================
# REDIS TEST CONFIGURATION
# =============================================================================
# Redis session management testing configuration merged with Testcontainers section





# =============================================================================
# TEST SERVER CONFIGURATION
# =============================================================================
# Embedded server configuration for testing

server:
  port: 0                                     # Random available port for tests
  servlet:
    context-path: "/test"
    session:
      timeout: 300s                          # Shorter timeout for tests
      cookie:
        name: "TEST-JSESSIONID"
        http-only: true
        secure: false                        # Allow insecure cookies in tests
        max-age: 300s
  
  # Tomcat configuration for tests
  tomcat:
    threads:
      max: 20                                # Smaller thread pool for tests
      min-spare: 2
    max-connections: 100                     # Lower connection limit
    accept-count: 10
    connection-timeout: 5000ms               # Shorter timeout
    
    # Disable access logging in tests
    accesslog:
      enabled: false
  
  # Error handling for tests
  error:
    whitelabel:
      enabled: false
    include-message: always
    include-binding-errors: always
    include-stacktrace: always               # Full stack traces in tests
    include-exception: true

# =============================================================================
# SPRING BOOT ACTUATOR TEST CONFIGURATION
# =============================================================================
# Testing endpoints and health checks

management:
  endpoints:
    web:
      exposure:
        include: "health,info,metrics,env,configprops,beans,mappings"
      base-path: "/test-actuator"
      
  endpoint:
    health:
      enabled: true
      show-details: always                   # Always show details in tests
      show-components: always
      validate-group-membership: false       # Disable health group validation in test environment
      probes:
        enabled: true
      group:
        readiness:
          include: "readinessState,db"           # Exclude redis from readiness group in test profile
        liveness:
          include: "livenessState,ping"
    
    info:
      enabled: true
    
    metrics:
      enabled: true
    
    env:
      enabled: true
      show-values: always                    # Show all values in tests
    
    configprops:
      enabled: true
      show-values: always                    # Show all config values in tests

  # Health indicators for testing
  health:
    defaults:
      enabled: true
    db:
      enabled: true
    redis:
      enabled: false                           # Redis disabled for test profile
    diskspace:
      enabled: true
      threshold: 1MB                         # Lower threshold for tests

  # Metrics configuration for tests
  metrics:
    export:
      simple:
        enabled: true                        # Use simple metrics registry
      prometheus:
        enabled: false                       # Disable Prometheus in tests
    
    # Test-specific metric tags
    tags:
      application: ${spring.application.name}
      environment: "test"
      version: ${spring.application.version}
    
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.95,0.99
      sla:
        http.server.requests: 50ms,100ms,200ms,500ms

  # Application info for tests
  info:
    build:
      encoding: "UTF-8"
    env:
      enabled: true
    git:
      mode: simple                           # Simplified git info for tests

# =============================================================================
# LOGGING CONFIGURATION FOR TESTS
# =============================================================================
# Test-specific logging levels and patterns

logging:
  level:
    root: WARN                               # Reduce noise in test output
    com.carddemo: DEBUG                      # Application debugging enabled
    org.springframework.security: INFO       # Security events
    org.springframework.web: WARN            # Reduce web logging
    org.springframework.test: INFO           # Test framework logging
    org.springframework.boot.test: INFO      # Boot test logging
    org.hibernate: WARN                      # Reduce Hibernate logging
    org.hibernate.SQL: INFO                  # Show SQL in tests when needed
    org.hibernate.type.descriptor.sql.BasicBinder: WARN  # Reduce parameter logging
    org.postgresql: WARN                     # PostgreSQL driver
    com.zaxxer.hikari: WARN                  # Connection pool
    org.testcontainers: INFO                 # Testcontainers lifecycle
    io.micrometer: WARN                      # Metrics framework
    org.liquibase: INFO                      # Database migration
    redis.clients.jedis: WARN               # Redis client
    org.springframework.batch: INFO          # Batch processing
    
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %X{correlationId:-} %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %X{correlationId:-} %msg%n"
  
  # Test log file configuration
  file:
    name: "target/logs/carddemo-test.log"
    max-size: 10MB
    max-history: 3
    total-size-cap: 50MB

# =============================================================================
# TEST VALIDATION CONFIGURATION
# =============================================================================
# COBOL field format validation testing

validation:
  # Test decimal precision configuration matching production
  decimal-precision:
    default-scale: 2
    max-precision: 31
    rounding-mode: HALF_UP
    math-context: DECIMAL128
  
  # Test validation patterns
  patterns:
    account-number: "^[0-9]{11}$"
    card-number: "^[0-9]{16}$"
    customer-id: "^[0-9]{9}$"
    user-id: "^[A-Z0-9]{8}$"
    transaction-id: "^[A-Z0-9]{16}$"
  
  # Test validation messages
  messages:
    account-number-invalid: "Test: Account number must be exactly 11 digits"
    card-number-invalid: "Test: Card number must be exactly 16 digits"
    decimal-precision-exceeded: "Test: Decimal precision exceeds maximum scale"

# =============================================================================
# CUSTOM TEST PROPERTIES
# =============================================================================
# Application-specific test configuration

carddemo:
  # Test business configuration
  business:
    transaction:
      daily-limit: "1000.00"                # Lower limits for testing
      single-limit: "500.00"
      retry-attempts: 2                     # Fewer retries in tests
      timeout-seconds: 10                   # Shorter timeout
    
    account:
      interest-rate: "0.1500"               # Test interest rate
      minimum-payment: "10.00"             # Lower minimum for tests
      over-limit-fee: "25.00"
      late-fee: "25.00"

  # Test security configuration
  security:
    jwt:
      secret: ${spring.security.test.jwt.secret}
      expiration: ${spring.security.test.jwt.expiration}
      issuer: ${spring.security.test.jwt.issuer}
      audience: ${spring.security.test.jwt.audience}
    
    password:
      min-length: 6                         # Relaxed for testing
      require-uppercase: false              # Simplified for tests
      require-lowercase: false
      require-digits: false
      require-special-chars: false
    
    session:
      max-concurrent: 3                     # Allow multiple test sessions
      timeout-warning: 60                   # Shorter warning

  # Test performance configuration
  performance:
    connection-pool:
      core-size: 2                          # Smaller pools for tests
      max-size: 5
      queue-capacity: 10
    
    cache:
      ttl-seconds: 30                       # Shorter TTL for tests
      max-entries: 100                      # Smaller cache
    
    batch:
      chunk-size: 10                        # Smaller chunks for tests
      max-threads: 2                        # Fewer threads

  # Test integration configuration
  integration:
    external-apis:
      timeout: 2000                         # Shorter timeout for tests
      retry-attempts: 1                     # Fewer retries
    
    file-processing:
      temp-directory: "${java.io.tmpdir}/carddemo-test"
      max-file-size: 1MB                    # Smaller files for tests
      allowed-extensions: "txt,csv,json"

  # Test feature flags
  features:
    audit-logging: true                     # Enable for testing
    performance-monitoring: true            # Enable metrics collection
    security-headers: false                 # Simplify for tests
    cors-enabled: true                      # Enable for test clients
    swagger-ui: true                        # Enable for test documentation

  # Test data configuration
  test:
    # Test database seeding
    data:
      load-sample-data: true                # Load test data
      sample-data-path: "classpath:testdata/"
      clear-data-before-tests: true         # Clean slate for each test
    
    # Test user accounts
    users:
      admin:
        user-id: "TESTADM1"
        password: "admin123"
        user-type: "A"
        first-name: "Test"
        last-name: "Admin"
      user:
        user-id: "TESTUSER"
        password: "user123"
        user-type: "R"
        first-name: "Test"
        last-name: "User"
    
    # Test financial data precision
    financial:
      enable-precision-testing: true        # Enable BigDecimal precision tests
      precision-scale: 2                    # Decimal places for testing
      rounding-mode: "HALF_UP"              # COBOL-compatible rounding
      math-context: "DECIMAL128"            # High precision context
    
    # Performance testing configuration
    performance:
      enable-load-testing: false           # Disable by default
      max-concurrent-users: 10              # Concurrent test users
      test-duration-seconds: 30             # Short performance tests
      target-response-time-ms: 200          # Response time target

# =============================================================================
# SPRING BOOT TEST SLICE CONFIGURATIONS
# =============================================================================

# @SpringBootTest configuration
spring-boot-test:
  web-environment: MOCK                     # Use MockMvc by default
  classes: []                               # Auto-detect application classes
  properties: []                            # Additional test properties

# @DataJpaTest configuration  
data-jpa-test:
  show-sql: true                           # Show SQL in data tests
  replace-auto-configuration: []            # Keep default test auto-config

# @WebMvcTest configuration
web-mvc-test:
  secure: false                            # Disable security by default
  print-only-on-failure: true             # Clean test output

# @JsonTest configuration
json-test:
  use-default-filters: true               # Use default JSON configuration

# Test profile-specific overrides
# Integration test profile - merged into main document
  
  # Use Testcontainers PostgreSQL for integration tests
  datasource:
    url: "jdbc:tc:postgresql:15-alpine:///carddemo_test?TC_DAEMON=true&TC_TMPFS=/testtmpfs:rw"
    driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
    username: "test_user"
    password: "test_password"
  
  # Integration test JPA configuration
  jpa:
    hibernate:
      ddl-auto: validate                    # Validate against Liquibase schema
    database-platform: org.hibernate.dialect.PostgreSQLDialect

# Integration test logging configuration merged into main logging block above

# Profile configurations merged into main document:
# - integration-test: Enhanced Testcontainers setup with PostgreSQL and Redis
# - performance-test: Load testing configuration with higher concurrency limits  
# - security-test: Enhanced security testing with additional mock users
# Note: All profile-specific configurations have been merged to maintain single YAML document structure

# Test profile configuration tracking (for test validation)
test:
  profiles:
    supported:
      - "integration-test"
      - "performance-test" 
      - "security-test"
    description: "Multi-profile test configuration with merged settings"