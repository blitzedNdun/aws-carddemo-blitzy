<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.20.xsd
                        http://www.liquibase.org/xml/ns/dbchangelog-ext
                        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <!-- ========================================================================= -->
    <!-- MASTER LIQUIBASE CHANGELOG FOR TEST ENVIRONMENTS                        -->
    <!-- ========================================================================= -->
    <!-- 
         CardDemo Test Environment Master Changelog
         
         Purpose: Orchestrate all database schema creation and validation changesets
                  for PostgreSQL integration testing with Testcontainers
         
         Author: Blitzy agent
         Version: CardDemo_v1.0-15-g27d6c6f-68
         
         Key Features:
         - PostgreSQL schema compliance with VSAM record layouts
         - Testcontainers PostgreSQL integration support
         - COBOL data precision preservation through BigDecimal mapping
         - Rollback support for test scenario isolation and cleanup
         - Comprehensive test data loading and validation
         
         Execution Order:
         1. Create core application tables (users, customers, accounts, cards, transactions)
         2. Create reference and lookup tables (transaction types, categories)
         3. Create optimized indexes for performance testing
         4. Load essential test reference data
         
         Environment Support:
         - Development testing (carddemo-dev namespace)
         - Integration testing (carddemo-integration namespace)
         - UAT testing (carddemo-uat namespace)
         - Performance testing (carddemo-performance namespace)
    -->

    <!-- ========================================================================= -->
    <!-- TEST ENVIRONMENT CONFIGURATION                                           -->
    <!-- ========================================================================= -->
    
    <!-- Test Environment Properties -->
    <property name="test.environment" value="${test.environment}" defaultValue="integration"/>
    <property name="test.namespace" value="carddemo-${test.environment}"/>
    <property name="test.schema" value="public"/>
    
    <!-- Database Connection Properties for Testcontainers -->
    <property name="test.database.url" value="${test.database.url}" defaultValue="jdbc:postgresql://localhost:5432/carddemo_test"/>
    <property name="test.database.username" value="${test.database.username}" defaultValue="test"/>
    <property name="test.database.password" value="${test.database.password}" defaultValue="test"/>
    
    <!-- Test Data Volume Configuration -->
    <property name="test.data.volume" value="${test.data.volume}" defaultValue="medium"/>
    <property name="test.data.customers" value="${test.data.customers}" defaultValue="10000"/>
    <property name="test.data.accounts" value="${test.data.accounts}" defaultValue="15000"/>
    <property name="test.data.transactions" value="${test.data.transactions}" defaultValue="100000"/>
    
    <!-- ========================================================================= -->
    <!-- CHANGESET 1: CREATE TEST USERS TABLE                                     -->
    <!-- ========================================================================= -->
    
    <!-- 
         Maps COBOL SEC-USER-DATA structure from CSUSR01Y.cpy to PostgreSQL
         with Spring Security BCrypt integration and comprehensive test data
    -->
    <include file="db/changesets/001-create-test-users-table.sql" relativeToChangelogFile="false"/>
    
    <!-- ========================================================================= -->
    <!-- CHANGESET 2: CREATE TEST ACCOUNTS TABLE                                  -->
    <!-- ========================================================================= -->
    
    <!-- 
         Maps COBOL ACCOUNT-RECORD structure from CVACT01Y.cpy to PostgreSQL
         preserving exact financial precision with BigDecimal mapping
    -->
    <include file="db/changesets/002-create-test-accounts-table.sql" relativeToChangelogFile="false"/>
    
    <!-- ========================================================================= -->
    <!-- CHANGESET 3: CREATE TEST TRANSACTIONS TABLE                              -->
    <!-- ========================================================================= -->
    
    <!-- 
         Maps COBOL TRAN-RECORD structure from CVTRA05Y.cpy to PostgreSQL
         with monthly partitioning for high-volume integration testing
    -->
    <include file="db/changesets/003-create-test-transactions-table.sql" relativeToChangelogFile="false"/>
    
    <!-- ========================================================================= -->
    <!-- CHANGESET 4: CREATE TEST REFERENCE TABLES                                -->
    <!-- ========================================================================= -->
    
    <!-- 
         Creates PostgreSQL reference tables for transaction types and categories
         supporting comprehensive transaction validation in test environments
    -->
    <include file="db/changesets/004-create-test-reference-tables.sql" relativeToChangelogFile="false"/>
    
    <!-- ========================================================================= -->
    <!-- CHANGESET 5: CREATE TEST INDEXES                                         -->
    <!-- ========================================================================= -->
    
    <!-- 
         Creates PostgreSQL B-tree indexes replicating VSAM alternate index
         performance characteristics for comprehensive integration testing
    -->
    <include file="db/changesets/005-create-test-indexes.sql" relativeToChangelogFile="false"/>
    
    <!-- ========================================================================= -->
    <!-- CHANGESET 6: LOAD TEST REFERENCE DATA                                    -->
    <!-- ========================================================================= -->
    
    <!-- 
         Loads essential reference data into test PostgreSQL tables providing
         lookup data required for comprehensive integration testing scenarios
    -->
    <include file="db/changesets/006-load-test-reference-data.sql" relativeToChangelogFile="false"/>
    
    <!-- ========================================================================= -->
    <!-- TEST ENVIRONMENT VALIDATION                                              -->
    <!-- ========================================================================= -->
    
    <!-- Validate Test Schema Creation -->
    <changeSet id="test-schema-validation" author="blitzy-agent" context="test">
        <comment>Validate test schema creation and table structure compliance</comment>
        
        <!-- Verify all required tables exist -->
        <preConditions onFail="HALT">
            <tableExists tableName="users"/>
            <tableExists tableName="accounts"/>
            <tableExists tableName="transactions"/>
            <tableExists tableName="transaction_types"/>
            <tableExists tableName="transaction_categories"/>
        </preConditions>
        
        <!-- Validate table row counts for test data -->
        <sql>
            -- Verify users table has test data
            SELECT CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as users_data_check
            FROM users;
            
            -- Verify transaction_types table has reference data
            SELECT CASE WHEN COUNT(*) >= 10 THEN 'PASS' ELSE 'FAIL' END as transaction_types_check
            FROM transaction_types;
            
            -- Verify transaction_categories table has reference data
            SELECT CASE WHEN COUNT(*) >= 20 THEN 'PASS' ELSE 'FAIL' END as transaction_categories_check
            FROM transaction_categories;
        </sql>
        
        <rollback>
            <comment>Test schema validation rollback - no action required</comment>
        </rollback>
    </changeSet>
    
    <!-- ========================================================================= -->
    <!-- TEST PERFORMANCE VALIDATION                                              -->
    <!-- ========================================================================= -->
    
    <!-- Validate Index Performance -->
    <changeSet id="test-index-performance-validation" author="blitzy-agent" context="test">
        <comment>Validate index performance for sub-200ms response time compliance</comment>
        
        <!-- Create test queries to validate index performance -->
        <sql>
            <![CDATA[
            -- Test primary key performance (should be sub-1ms)
            EXPLAIN (ANALYZE, BUFFERS) 
            SELECT * FROM users WHERE user_id = 'USER0001';
            
            -- Test account lookup performance (should be sub-10ms)
            EXPLAIN (ANALYZE, BUFFERS)
            SELECT * FROM accounts WHERE account_id = '00000000001';
            
            -- Test transaction date range performance (should be sub-50ms)
            EXPLAIN (ANALYZE, BUFFERS)
            SELECT * FROM transactions 
            WHERE transaction_timestamp >= CURRENT_DATE - INTERVAL '30 days'
            AND transaction_timestamp < CURRENT_DATE;
            ]]>
        </sql>
        
        <rollback>
            <comment>Index performance validation rollback - no action required</comment>
        </rollback>
    </changeSet>
    
    <!-- ========================================================================= -->
    <!-- TEST DATA PRECISION VALIDATION                                           -->
    <!-- ========================================================================= -->
    
    <!-- Validate BigDecimal Precision -->
    <changeSet id="test-bigdecimal-precision-validation" author="blitzy-agent" context="test">
        <comment>Validate BigDecimal precision compliance for financial calculations</comment>
        
        <!-- Test COBOL COMP-3 precision equivalence -->
        <sql>
            -- Verify account balance precision (DECIMAL(12,2) for COBOL S9(10)V99)
            SELECT 
                account_id,
                current_balance,
                CASE 
                    WHEN current_balance::TEXT ~ '^-?[0-9]{1,10}\.[0-9]{2}$' THEN 'PASS'
                    ELSE 'FAIL'
                END as precision_check
            FROM accounts
            WHERE current_balance IS NOT NULL
            LIMIT 10;
            
            -- Verify transaction amount precision (DECIMAL(11,2) for COBOL S9(09)V99)
            SELECT 
                transaction_id,
                transaction_amount,
                CASE 
                    WHEN transaction_amount::TEXT ~ '^-?[0-9]{1,9}\.[0-9]{2}$' THEN 'PASS'
                    ELSE 'FAIL'
                END as precision_check
            FROM transactions
            WHERE transaction_amount IS NOT NULL
            LIMIT 10;
        </sql>
        
        <rollback>
            <comment>BigDecimal precision validation rollback - no action required</comment>
        </rollback>
    </changeSet>
    
    <!-- ========================================================================= -->
    <!-- TEST TRANSACTION ISOLATION VALIDATION                                    -->
    <!-- ========================================================================= -->
    
    <!-- Validate Transaction Isolation -->
    <changeSet id="test-transaction-isolation-validation" author="blitzy-agent" context="test">
        <comment>Validate SERIALIZABLE transaction isolation for VSAM-equivalent behavior</comment>
        
        <!-- Test transaction isolation level -->
        <sql>
            -- Verify current transaction isolation level
            SHOW transaction_isolation;
            
            -- Test concurrent access patterns
            SELECT 
                schemaname,
                tablename,
                attname,
                n_distinct,
                correlation
            FROM pg_stats 
            WHERE schemaname = 'public' 
            AND tablename IN ('users', 'accounts', 'transactions')
            ORDER BY tablename, attname;
        </sql>
        
        <rollback>
            <comment>Transaction isolation validation rollback - no action required</comment>
        </rollback>
    </changeSet>
    
    <!-- ========================================================================= -->
    <!-- TEST ENVIRONMENT CLEANUP SUPPORT                                         -->
    <!-- ========================================================================= -->
    
    <!-- Test Environment Reset -->
    <changeSet id="test-environment-reset" author="blitzy-agent" context="test-cleanup">
        <comment>Reset test environment for clean test execution</comment>
        
        <!-- Truncate all test tables in dependency order -->
        <sql>
            -- Disable triggers for cleanup
            SET session_replication_role = replica;
            
            -- Truncate tables in reverse dependency order
            TRUNCATE TABLE transactions CASCADE;
            TRUNCATE TABLE accounts CASCADE;
            TRUNCATE TABLE users CASCADE;
            
            -- Re-enable triggers
            SET session_replication_role = DEFAULT;
            
            -- Reset sequences
            SELECT setval('users_id_seq', 1, false);
            SELECT setval('accounts_id_seq', 1, false);
            SELECT setval('transactions_id_seq', 1, false);
        </sql>
        
        <rollback>
            <comment>Test environment reset rollback - restore from backup if available</comment>
        </rollback>
    </changeSet>
    
    <!-- ========================================================================= -->
    <!-- TESTCONTAINERS INTEGRATION SUPPORT                                       -->
    <!-- ========================================================================= -->
    
    <!-- Testcontainers Configuration -->
    <changeSet id="testcontainers-configuration" author="blitzy-agent" context="testcontainers">
        <comment>Configure PostgreSQL for Testcontainers integration testing</comment>
        
        <!-- Configure PostgreSQL for optimal test performance -->
        <sql>
            -- Set test-optimized PostgreSQL configuration
            ALTER SYSTEM SET shared_buffers = '256MB';
            ALTER SYSTEM SET effective_cache_size = '1GB';
            ALTER SYSTEM SET maintenance_work_mem = '64MB';
            ALTER SYSTEM SET checkpoint_completion_target = 0.9;
            ALTER SYSTEM SET wal_buffers = '16MB';
            ALTER SYSTEM SET default_statistics_target = 100;
            ALTER SYSTEM SET random_page_cost = 1.1;
            ALTER SYSTEM SET effective_io_concurrency = 200;
            
            -- Reload configuration
            SELECT pg_reload_conf();
            
            -- Create test-specific extensions if needed
            CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
            CREATE EXTENSION IF NOT EXISTS "pgcrypto";
        </sql>
        
        <rollback>
            <comment>Testcontainers configuration rollback - reset to defaults</comment>
            <sql>
                -- Reset to default PostgreSQL configuration
                ALTER SYSTEM RESET shared_buffers;
                ALTER SYSTEM RESET effective_cache_size;
                ALTER SYSTEM RESET maintenance_work_mem;
                ALTER SYSTEM RESET checkpoint_completion_target;
                ALTER SYSTEM RESET wal_buffers;
                ALTER SYSTEM RESET default_statistics_target;
                ALTER SYSTEM RESET random_page_cost;
                ALTER SYSTEM RESET effective_io_concurrency;
                
                SELECT pg_reload_conf();
            </sql>
        </rollback>
    </changeSet>
    
    <!-- ========================================================================= -->
    <!-- COMPREHENSIVE TEST VALIDATION SUMMARY                                    -->
    <!-- ========================================================================= -->
    
    <!-- Final Test Environment Validation -->
    <changeSet id="final-test-validation" author="blitzy-agent" context="test">
        <comment>Final comprehensive validation of test environment readiness</comment>
        
        <!-- Comprehensive test environment validation -->
        <sql>
            -- Generate test environment validation report
            SELECT 
                'Test Environment Validation Report' as report_title,
                '${test.environment}' as environment,
                '${test.namespace}' as namespace,
                NOW() as validation_timestamp;
            
            -- Validate table structure compliance
            SELECT 
                'Table Structure Validation' as validation_type,
                COUNT(*) as table_count,
                CASE WHEN COUNT(*) >= 5 THEN 'PASS' ELSE 'FAIL' END as status
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            AND table_name IN ('users', 'accounts', 'transactions', 'transaction_types', 'transaction_categories');
            
            -- Validate index performance optimization
            SELECT 
                'Index Performance Validation' as validation_type,
                COUNT(*) as index_count,
                CASE WHEN COUNT(*) >= 10 THEN 'PASS' ELSE 'FAIL' END as status
            FROM pg_indexes 
            WHERE schemaname = 'public';
            
            -- Validate test data availability
            SELECT 
                'Test Data Validation' as validation_type,
                SUM(CASE WHEN table_name = 'users' THEN row_count ELSE 0 END) as user_count,
                SUM(CASE WHEN table_name = 'transaction_types' THEN row_count ELSE 0 END) as type_count,
                SUM(CASE WHEN table_name = 'transaction_categories' THEN row_count ELSE 0 END) as category_count,
                CASE 
                    WHEN SUM(CASE WHEN table_name = 'users' THEN row_count ELSE 0 END) > 0 
                    AND SUM(CASE WHEN table_name = 'transaction_types' THEN row_count ELSE 0 END) > 0 
                    AND SUM(CASE WHEN table_name = 'transaction_categories' THEN row_count ELSE 0 END) > 0 
                    THEN 'PASS' 
                    ELSE 'FAIL' 
                END as status
            FROM (
                SELECT 
                    schemaname,
                    tablename as table_name,
                    n_tup_ins as row_count
                FROM pg_stat_user_tables
                WHERE schemaname = 'public'
            ) t;
            
            -- Final validation summary
            SELECT 
                'FINAL VALIDATION SUMMARY' as summary,
                'Test environment is ready for integration testing' as message,
                'CardDemo PostgreSQL test schema successfully created' as status,
                'All COBOL-to-PostgreSQL mappings validated' as precision_status,
                'Testcontainers integration configured' as integration_status,
                'Test data loaded and validated' as data_status;
        </sql>
        
        <rollback>
            <comment>Final test validation rollback - no action required</comment>
        </rollback>
    </changeSet>
    
    <!-- ========================================================================= -->
    <!-- CHANGELOG METADATA                                                       -->
    <!-- ========================================================================= -->
    
    <!-- 
         Change Log History:
         - Version 1.0: Initial test environment schema creation
         - Supports PostgreSQL 15+ with Testcontainers integration
         - Preserves COBOL data precision through BigDecimal mapping
         - Provides comprehensive rollback support
         - Includes performance validation and optimization
         - Supports multiple test environment configurations
         
         Dependencies:
         - PostgreSQL 15+ database server
         - Liquibase 4.20.0+ for migration management
         - Testcontainers 1.21.3+ for integration testing
         - Spring Boot 3.2.x for application framework
         - JUnit 5.13.3+ for test execution
         
         Usage:
         - Development: mvn liquibase:update -Dtest.environment=dev
         - Integration: mvn liquibase:update -Dtest.environment=integration
         - UAT: mvn liquibase:update -Dtest.environment=uat
         - Performance: mvn liquibase:update -Dtest.environment=performance
         - Cleanup: mvn liquibase:update -Dtest.environment=cleanup
    -->

</databaseChangeLog>