<?xml version="1.0" encoding="UTF-8"?>
<!--
============================================================================
CardDemo Test Environment - Master Liquibase Changelog
============================================================================
Purpose: Master Liquibase changelog orchestrating all test database schema 
         creation and validation changesets for PostgreSQL integration 
         testing with Testcontainers support
Environment: Test environment for Spring Boot microservices testing
Source: Derived from COBOL copybook structures preserving VSAM record layouts
Dependencies: PostgreSQL 15+, Liquibase 4.20.0, Testcontainers
============================================================================
Business Context: Supporting CardDemo mainframe-to-cloud transformation
- Migrating from COBOL/CICS/VSAM to Java 21/Spring Boot/PostgreSQL
- Maintaining exact financial precision with BigDecimal mapping
- Preserving VSAM alternate index performance with B-tree indexes
- Supporting 10,000+ TPS transaction processing integration tests
============================================================================
-->

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                   https://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.20.xsd">

    <!--
    ============================================================================
    MASTER CHANGELOG METADATA AND CONFIGURATION
    ============================================================================
    -->
    
    <!-- Master changelog properties for test environment -->
    <property name="test.environment" value="integration-testing" />
    <property name="database.vendor" value="postgresql" />
    <property name="schema.version" value="test-v1.0.0" />
    <property name="changelog.author" value="carddemo-test-automation" />
    <property name="testcontainers.compatible" value="true" />
    
    <!-- Database connection validation for test environment -->
    <preConditions onFail="HALT" onError="HALT">
        <and>
            <!-- Verify PostgreSQL database engine -->
            <dbms type="postgresql" />
            <!-- Verify minimum PostgreSQL version for advanced features -->
            <sqlCheck expectedResult="1">
                SELECT CASE WHEN version() ~ 'PostgreSQL (1[5-9]|[2-9][0-9])' THEN 1 ELSE 0 END
            </sqlCheck>
            <!-- Verify test environment schema creation permissions -->
            <sqlCheck expectedResult="1">
                SELECT CASE WHEN has_database_privilege(current_user, current_database(), 'CREATE') THEN 1 ELSE 0 END
            </sqlCheck>
        </and>
    </preConditions>

    <!--
    ============================================================================
    CHANGESET 1: TEST USERS TABLE CREATION
    ============================================================================
    Purpose: Create PostgreSQL users table for Spring Security authentication
    Source: app/cpy/CSUSR01Y.cpy (SEC-USER-DATA structure)
    Features: BCrypt password hashing, test user scenarios, Spring Security integration
    ============================================================================
    -->
    
    <include file="changesets/001-create-test-users-table.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!--
    ============================================================================
    CHANGESET 2: TEST ACCOUNTS TABLE CREATION
    ============================================================================
    Purpose: Create PostgreSQL accounts table with exact COBOL financial precision
    Source: app/cpy/CVACT01Y.cpy (ACCOUNT-RECORD structure)
    Features: DECIMAL(12,2) precision, foreign key relationships, financial constraints
    ============================================================================
    -->
    
    <include file="changesets/002-create-test-accounts-table.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!--
    ============================================================================
    CHANGESET 3: TEST TRANSACTIONS TABLE CREATION
    ============================================================================
    Purpose: Create partitioned PostgreSQL transactions table for high-volume testing
    Source: app/cpy/CVTRA05Y.cpy (TRAN-RECORD structure)
    Features: Monthly RANGE partitioning, transaction processing optimization
    ============================================================================
    -->
    
    <include file="changesets/003-create-test-transactions-table.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!--
    ============================================================================
    CHANGESET 4: TEST REFERENCE TABLES CREATION
    ============================================================================
    Purpose: Create PostgreSQL reference tables for transaction classification
    Source: app/cpy/CVTRA03Y.cpy, app/cpy/CVTRA04Y.cpy (reference structures)
    Features: Transaction types, categories, validation lookup tables
    ============================================================================
    -->
    
    <include file="changesets/004-create-test-reference-tables.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!--
    ============================================================================
    CHANGESET 5: TEST INDEXES CREATION
    ============================================================================
    Purpose: Create PostgreSQL B-tree indexes replicating VSAM alternate index performance
    Source: Database Design 6.2.1.3 - Indexing Strategy
    Features: Sub-200ms query response optimization, composite indexes, covering indexes
    ============================================================================
    -->
    
    <include file="changesets/005-create-test-indexes.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!--
    ============================================================================
    CHANGESET 6: TEST REFERENCE DATA LOADING
    ============================================================================
    Purpose: Load essential test reference data for comprehensive integration testing
    Source: Transaction types and categories from COBOL copybooks
    Features: Test scenario data, integration test support, validation datasets
    ============================================================================
    -->
    
    <include file="changesets/006-load-test-reference-data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!--
    ============================================================================
    POST-DEPLOYMENT VALIDATION AND VERIFICATION
    ============================================================================
    Purpose: Comprehensive validation of test environment database schema
    Execution: Runs after all changesets complete successfully
    Features: Table validation, constraint verification, test data validation
    ============================================================================
    -->
    
    <changeSet id="test-environment-validation" author="carddemo-test-automation">
        <comment>
            Comprehensive validation of test environment database schema creation
            and data loading for CardDemo microservices integration testing
        </comment>
        
        <!-- Validate all core tables exist and are accessible -->
        <sql>
            -- Verify all primary tables exist in correct schema
            SELECT 
                schemaname, 
                tablename, 
                tableowner,
                hasindexes,
                hasrules,
                hastriggers
            FROM pg_tables 
            WHERE schemaname = 'public' 
            AND tablename IN ('users', 'accounts', 'transactions', 'transaction_types', 'transaction_categories')
            ORDER BY tablename;
        </sql>
        
        <!-- Validate foreign key relationships are properly established -->
        <sql>
            -- Verify foreign key constraints are active
            SELECT 
                tc.constraint_name,
                tc.table_name,
                kcu.column_name,
                ccu.table_name AS foreign_table_name,
                ccu.column_name AS foreign_column_name,
                rc.update_rule,
                rc.delete_rule
            FROM information_schema.table_constraints AS tc
            JOIN information_schema.key_column_usage AS kcu
                ON tc.constraint_name = kcu.constraint_name
            JOIN information_schema.referential_constraints AS rc
                ON tc.constraint_name = rc.constraint_name
            JOIN information_schema.constraint_column_usage AS ccu
                ON rc.unique_constraint_name = ccu.constraint_name
            WHERE tc.constraint_type = 'FOREIGN KEY'
            AND tc.table_schema = 'public'
            ORDER BY tc.table_name, tc.constraint_name;
        </sql>
        
        <!-- Validate indexes are created and optimized -->
        <sql>
            -- Verify all performance-critical indexes exist
            SELECT 
                schemaname,
                tablename,
                indexname,
                indexdef
            FROM pg_indexes 
            WHERE schemaname = 'public'
            AND (indexname LIKE 'idx_%' OR indexname LIKE 'pk_%')
            ORDER BY tablename, indexname;
        </sql>
        
        <!-- Validate test data has been loaded correctly -->
        <sql>
            -- Verify test data is available for integration testing
            SELECT 
                'users' as table_name,
                count(*) as row_count,
                min(created_at) as oldest_record,
                max(created_at) as newest_record
            FROM users
            WHERE is_test_user = true
            
            UNION ALL
            
            SELECT 
                'accounts' as table_name,
                count(*) as row_count,
                min(created_at) as oldest_record,
                max(created_at) as newest_record
            FROM accounts
            WHERE is_test_account = true
            
            UNION ALL
            
            SELECT 
                'transaction_types' as table_name,
                count(*) as row_count,
                min(created_timestamp) as oldest_record,
                max(created_timestamp) as newest_record
            FROM transaction_types
            WHERE active_status = true
            
            ORDER BY table_name;
        </sql>
        
        <!-- Validate BigDecimal precision for financial data -->
        <sql>
            -- Verify decimal precision matches COBOL COMP-3 requirements
            SELECT 
                'Financial Precision Validation' as validation_type,
                count(*) as accounts_with_precision,
                min(current_balance) as min_balance,
                max(current_balance) as max_balance,
                avg(current_balance) as avg_balance,
                stddev(current_balance) as balance_stddev
            FROM accounts
            WHERE is_test_account = true
            AND current_balance IS NOT NULL;
        </sql>
        
        <!-- Validate transaction processing table partitioning -->
        <sql>
            -- Verify transaction table partitioning is configured
            SELECT 
                schemaname,
                tablename,
                partitiontype,
                partitionkey,
                partitionboundary
            FROM (
                SELECT 
                    schemaname,
                    tablename,
                    'RANGE' as partitiontype,
                    'processing_timestamp' as partitionkey,
                    'Monthly' as partitionboundary
                FROM pg_tables 
                WHERE schemaname = 'public' 
                AND tablename = 'transactions'
            ) partition_info;
        </sql>
        
        <rollback>
            <comment>
                Rollback for validation changeset - no action required
                as validation queries do not modify database state
            </comment>
        </rollback>
    </changeSet>

    <!--
    ============================================================================
    TESTCONTAINERS INTEGRATION VERIFICATION
    ============================================================================
    Purpose: Verify test environment compatibility with Testcontainers framework
    Features: Container readiness checks, performance validation, test isolation
    ============================================================================
    -->
    
    <changeSet id="testcontainers-compatibility-check" author="carddemo-test-automation">
        <comment>
            Testcontainers compatibility verification for PostgreSQL integration testing
            ensuring proper container lifecycle management and test isolation
        </comment>
        
        <!-- Verify PostgreSQL container configuration -->
        <sql>
            -- Testcontainers PostgreSQL configuration validation
            SELECT 
                'PostgreSQL Configuration' as check_type,
                setting as value
            FROM pg_settings 
            WHERE name IN (
                'max_connections',
                'shared_buffers',
                'effective_cache_size',
                'maintenance_work_mem',
                'checkpoint_completion_target',
                'wal_buffers',
                'default_statistics_target'
            )
            ORDER BY name;
        </sql>
        
        <!-- Verify database performance characteristics -->
        <sql>
            -- Performance baseline verification for integration testing
            SELECT 
                'Database Performance Metrics' as metric_type,
                pg_database_size(current_database()) as database_size_bytes,
                (SELECT count(*) FROM pg_stat_user_tables) as user_tables_count,
                (SELECT count(*) FROM pg_stat_user_indexes) as user_indexes_count,
                current_timestamp as measurement_time;
        </sql>
        
        <!-- Verify test environment isolation capabilities -->
        <sql>
            -- Test environment isolation verification
            SELECT 
                'Test Environment Isolation' as isolation_type,
                current_database() as test_database,
                current_user as test_user,
                inet_server_addr() as server_address,
                inet_server_port() as server_port,
                pg_backend_pid() as backend_process_id;
        </sql>
        
        <rollback>
            <comment>
                Rollback for Testcontainers compatibility check - no action required
                as verification queries do not modify database state
            </comment>
        </rollback>
    </changeSet>

    <!--
    ============================================================================
    FINAL VALIDATION AND READINESS CONFIRMATION
    ============================================================================
    Purpose: Final comprehensive validation of test environment readiness
    Features: Complete schema validation, performance verification, test data confirmation
    ============================================================================
    -->
    
    <changeSet id="test-environment-readiness" author="carddemo-test-automation">
        <comment>
            Final validation of test environment readiness for CardDemo microservices
            integration testing with comprehensive schema and data verification
        </comment>
        
        <!-- Comprehensive table and constraint validation -->
        <sql>
            -- Final comprehensive validation summary
            WITH validation_summary AS (
                SELECT 
                    'Tables Created' as validation_category,
                    count(*) as count_value
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                AND table_type = 'BASE TABLE'
                
                UNION ALL
                
                SELECT 
                    'Foreign Keys' as validation_category,
                    count(*) as count_value
                FROM information_schema.table_constraints
                WHERE table_schema = 'public'
                AND constraint_type = 'FOREIGN KEY'
                
                UNION ALL
                
                SELECT 
                    'Indexes Created' as validation_category,
                    count(*) as count_value
                FROM pg_indexes 
                WHERE schemaname = 'public'
                AND indexname NOT LIKE 'pg_%'
                
                UNION ALL
                
                SELECT 
                    'Test Users' as validation_category,
                    count(*) as count_value
                FROM users
                WHERE is_test_user = true
                
                UNION ALL
                
                SELECT 
                    'Test Accounts' as validation_category,
                    count(*) as count_value
                FROM accounts
                WHERE is_test_account = true
                
                UNION ALL
                
                SELECT 
                    'Reference Data Records' as validation_category,
                    count(*) as count_value
                FROM transaction_types
                WHERE active_status = true
            )
            SELECT 
                validation_category,
                count_value,
                CASE 
                    WHEN validation_category = 'Tables Created' AND count_value >= 5 THEN 'PASS'
                    WHEN validation_category = 'Foreign Keys' AND count_value >= 3 THEN 'PASS'
                    WHEN validation_category = 'Indexes Created' AND count_value >= 8 THEN 'PASS'
                    WHEN validation_category = 'Test Users' AND count_value >= 3 THEN 'PASS'
                    WHEN validation_category = 'Test Accounts' AND count_value >= 5 THEN 'PASS'
                    WHEN validation_category = 'Reference Data Records' AND count_value >= 10 THEN 'PASS'
                    ELSE 'REVIEW'
                END as validation_status,
                current_timestamp as validation_timestamp
            FROM validation_summary
            ORDER BY validation_category;
        </sql>
        
        <!-- Test environment readiness confirmation -->
        <sql>
            -- Test environment readiness confirmation
            SELECT 
                'CardDemo Test Environment Status' as status_type,
                'READY FOR INTEGRATION TESTING' as status_message,
                current_database() as database_name,
                version() as postgresql_version,
                current_timestamp as readiness_timestamp;
        </sql>
        
        <rollback>
            <comment>
                Rollback for readiness confirmation - no action required
                as validation queries do not modify database state
            </comment>
        </rollback>
    </changeSet>

    <!--
    ============================================================================
    CHANGELOG COMPLETION AND AUDIT TRAIL
    ============================================================================
    -->
    
    <changeSet id="changelog-completion-audit" author="carddemo-test-automation">
        <comment>
            Changelog completion audit trail for test environment deployment
            tracking and compliance verification
        </comment>
        
        <!-- Create audit record for changelog completion -->
        <sql>
            -- Insert audit record for test environment deployment
            INSERT INTO DATABASECHANGELOG (
                ID, 
                AUTHOR, 
                FILENAME, 
                DATEEXECUTED, 
                ORDEREXECUTED, 
                EXECTYPE, 
                MD5SUM, 
                DESCRIPTION, 
                COMMENTS, 
                TAG, 
                LIQUIBASE, 
                CONTEXTS, 
                LABELS, 
                DEPLOYMENT_ID
            ) VALUES (
                'test-environment-audit-' || extract(epoch from now()),
                'carddemo-test-automation',
                'test-changelog-master.xml',
                now(),
                (SELECT COALESCE(MAX(ORDEREXECUTED), 0) + 1 FROM DATABASECHANGELOG),
                'EXECUTED',
                'audit-record',
                'Test environment deployment completed successfully',
                'CardDemo PostgreSQL test environment ready for integration testing',
                'test-v1.0.0',
                '4.20.0',
                'test-environment',
                'integration-testing,testcontainers',
                'test-deployment-' || extract(epoch from now())
            );
        </sql>
        
        <rollback>
            <comment>
                Remove audit record for changelog completion
            </comment>
            <sql>
                DELETE FROM DATABASECHANGELOG 
                WHERE ID LIKE 'test-environment-audit-%'
                AND AUTHOR = 'carddemo-test-automation';
            </sql>
        </rollback>
    </changeSet>

</databaseChangeLog>