package com.carddemo.batch.dto;

import com.carddemo.card.Card;
import com.carddemo.common.util.BigDecimalUtils;
import com.carddemo.common.util.DateUtils;
import java.time.LocalDateTime;
import java.io.Serializable;
import java.util.Objects;

/**
 * CardReportDTO - Data Transfer Object for card report output containing structured report data
 * including card details, account information, and formatted output lines for Spring Batch
 * FlatFileItemWriter report generation.
 * 
 * This DTO converts from COBOL CBACT02C.cbl batch program functionality that reads and prints
 * card data file to modern Java-based Spring Batch report generation. The class implements
 * the exact format and structure of original COBOL CBACT02C report with enhanced formatting
 * utilities and comprehensive field display logic.
 * 
 * Key Features:
 * - Structured DTO for card report output with fields matching COBOL card record layout
 * - Report line formatting methods for header, detail, and summary records
 * - Card information formatting utilities for consistent column alignment and field display
 * - Report formatting utilities for COBOL-equivalent output formatting
 * - Report metadata fields including generation timestamp and record count information
 * - Support for Spring Batch FlatFileItemWriter for report file generation
 * 
 * Based on COBOL source files:
 * - CBACT02C.cbl: Main batch program for card report generation
 * - CVACT02Y.cpy: Card record structure definition (150 bytes)
 * 
 * Technical Implementation:
 * - Maps COBOL card record layout to Java fields with exact field correspondence
 * - Implements report line formatting maintaining COBOL display formatting conventions
 * - Uses BigDecimalUtils for financial data formatting and precision
 * - Uses DateUtils for date formatting in reports
 * - Supports Spring Batch FlatFileItemWriter with formatted text output
 * 
 * Report Format Characteristics:
 * - Fixed-width field formatting matching COBOL DISPLAY statements
 * - Column alignment for consistent report presentation
 * - Header, detail, and summary line formatting
 * - Timestamp and record count metadata
 * - Card data validation and formatting for report output
 * 
 * Performance Considerations:
 * - Efficient string formatting for large batch processing
 * - StringBuilder usage for complex formatting operations
 * - Cached formatting patterns for repeated use
 * - Optimized field alignment calculations
 * 
 * @author Blitzy Agent
 * @version 1.0
 * @since 2024-01-01
 */
public class CardReportDTO implements Serializable {
    
    private static final long serialVersionUID = 1L;
    
    // Report formatting constants matching COBOL display layout
    private static final String REPORT_HEADER_FORMAT = "CREDIT CARD REPORT - %s";
    private static final String DETAIL_LINE_FORMAT = "%-16s %-11s %-50s %-10s %-1s %-3s";
    private static final String SUMMARY_LINE_FORMAT = "TOTAL CARDS PROCESSED: %,d";
    private static final String SEPARATOR_LINE = "=" + "=".repeat(99);
    private static final String COLUMN_HEADER = String.format("%-16s %-11s %-50s %-10s %-1s %-3s",
            "CARD NUMBER", "ACCOUNT ID", "EMBOSSED NAME", "EXPIRY DATE", "STATUS", "CVV");
    
    // Card data fields matching COBOL CVACT02Y.cpy structure
    
    /**
     * Card number field (16 characters)
     * Mapped from COBOL: CARD-NUM PIC X(16)
     */
    private String cardNumber;
    
    /**
     * Account ID field (11 digits)
     * Mapped from COBOL: CARD-ACCT-ID PIC 9(11)
     */
    private String accountId;
    
    /**
     * Embossed name field (50 characters)
     * Mapped from COBOL: CARD-EMBOSSED-NAME PIC X(50)
     */
    private String embossedName;
    
    /**
     * Expiration date field (10 characters)
     * Mapped from COBOL: CARD-EXPIRAION-DATE PIC X(10)
     */
    private String expirationDate;
    
    /**
     * Active status field (1 character)
     * Mapped from COBOL: CARD-ACTIVE-STATUS PIC X(01)
     */
    private String activeStatus;
    
    /**
     * CVV code field (3 digits)
     * Mapped from COBOL: CARD-CVV-CD PIC 9(03)
     */
    private String cvvCode;
    
    // Report metadata fields
    
    /**
     * Report generation timestamp
     * Used for report header and audit trail
     */
    private LocalDateTime generationTimestamp;
    
    /**
     * Record count for summary information
     * Used in summary line formatting
     */
    private long recordCount;
    
    /**
     * Formatted report line for output
     * Generated by formatting methods
     */
    private String reportLine;
    
    // Constructors
    
    /**
     * Default constructor for Spring Batch framework
     */
    public CardReportDTO() {
        this.generationTimestamp = LocalDateTime.now();
        this.recordCount = 0L;
    }
    
    /**
     * Constructor with Card entity for data population
     * 
     * @param card the Card entity to populate DTO from
     */
    public CardReportDTO(Card card) {
        this();
        if (card != null) {
            populateFromCard(card);
        }
    }
    
    /**
     * Constructor with all card fields
     * 
     * @param cardNumber the card number
     * @param accountId the account ID
     * @param embossedName the embossed name
     * @param expirationDate the expiration date
     * @param activeStatus the active status
     * @param cvvCode the CVV code
     */
    public CardReportDTO(String cardNumber, String accountId, String embossedName, 
                        String expirationDate, String activeStatus, String cvvCode) {
        this();
        this.cardNumber = cardNumber;
        this.accountId = accountId;
        this.embossedName = embossedName;
        this.expirationDate = expirationDate;
        this.activeStatus = activeStatus;
        this.cvvCode = cvvCode;
    }
    
    // Core population methods
    
    /**
     * Populates DTO fields from Card entity
     * 
     * @param card the Card entity to populate from
     */
    private void populateFromCard(Card card) {
        if (card == null) {
            return;
        }
        
        this.cardNumber = card.getCardNumber();
        this.accountId = card.getAccountId();
        this.embossedName = card.getEmbossedName();
        this.cvvCode = card.getCvvCode();
        this.activeStatus = card.getActiveStatus() != null ? card.getActiveStatus().name().substring(0, 1) : "U";
        
        // Format expiration date using DateUtils
        if (card.getExpirationDate() != null) {
            this.expirationDate = DateUtils.formatDateForDisplay(card.getExpirationDate());
        } else {
            this.expirationDate = "00/00/0000";
        }
    }
    
    // Report formatting methods
    
    /**
     * Formats card data as a header line for report output
     * 
     * @return formatted header line string
     */
    public String formatAsHeaderLine() {
        StringBuilder headerBuilder = new StringBuilder();
        
        // Main header with timestamp
        String timestamp = DateUtils.formatDateForDisplay(generationTimestamp.toLocalDate()) + 
                          " " + generationTimestamp.format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"));
        headerBuilder.append(String.format(REPORT_HEADER_FORMAT, timestamp)).append(System.lineSeparator());
        
        // Separator line
        headerBuilder.append(SEPARATOR_LINE).append(System.lineSeparator());
        
        // Column headers
        headerBuilder.append(COLUMN_HEADER).append(System.lineSeparator());
        
        // Second separator line
        headerBuilder.append(SEPARATOR_LINE).append(System.lineSeparator());
        
        this.reportLine = headerBuilder.toString();
        return this.reportLine;
    }
    
    /**
     * Formats card data as a detail line for report output
     * 
     * @return formatted detail line string
     */
    public String formatAsDetailLine() {
        // Ensure all fields are not null for formatting
        String safeCardNumber = ensureFieldLength(cardNumber, 16);
        String safeAccountId = ensureFieldLength(accountId, 11);
        String safeEmbossedName = ensureFieldLength(embossedName, 50);
        String safeExpirationDate = ensureFieldLength(expirationDate, 10);
        String safeActiveStatus = ensureFieldLength(activeStatus, 1);
        String safeCvvCode = ensureFieldLength(cvvCode, 3);
        
        this.reportLine = String.format(DETAIL_LINE_FORMAT,
                safeCardNumber,
                safeAccountId,
                safeEmbossedName,
                safeExpirationDate,
                safeActiveStatus,
                safeCvvCode);
        
        return this.reportLine;
    }
    
    /**
     * Formats card data as a summary line for report output
     * 
     * @return formatted summary line string
     */
    public String formatAsSummaryLine() {
        StringBuilder summaryBuilder = new StringBuilder();
        
        // Separator line
        summaryBuilder.append(SEPARATOR_LINE).append(System.lineSeparator());
        
        // Summary information
        summaryBuilder.append(String.format(SUMMARY_LINE_FORMAT, recordCount)).append(System.lineSeparator());
        
        // Report completion timestamp
        String completionTime = DateUtils.formatDateForDisplay(LocalDateTime.now().toLocalDate()) + 
                               " " + LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss"));
        summaryBuilder.append("REPORT COMPLETED: ").append(completionTime).append(System.lineSeparator());
        
        // Final separator
        summaryBuilder.append(SEPARATOR_LINE).append(System.lineSeparator());
        
        this.reportLine = summaryBuilder.toString();
        return this.reportLine;
    }
    
    /**
     * Ensures field is not null and has proper length for formatting
     * 
     * @param field the field to check
     * @param maxLength maximum length for the field
     * @return safe field value for formatting
     */
    private String ensureFieldLength(String field, int maxLength) {
        if (field == null) {
            return " ".repeat(maxLength);
        }
        
        if (field.length() > maxLength) {
            return field.substring(0, maxLength);
        }
        
        return field;
    }
    
    // Getters and setters
    
    /**
     * Gets the card number
     * 
     * @return card number string
     */
    public String getCardNumber() {
        return cardNumber;
    }
    
    /**
     * Sets the card number
     * 
     * @param cardNumber the card number to set
     */
    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }
    
    /**
     * Gets the account ID
     * 
     * @return account ID string
     */
    public String getAccountId() {
        return accountId;
    }
    
    /**
     * Sets the account ID
     * 
     * @param accountId the account ID to set
     */
    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }
    
    /**
     * Gets the embossed name
     * 
     * @return embossed name string
     */
    public String getEmbossedName() {
        return embossedName;
    }
    
    /**
     * Sets the embossed name
     * 
     * @param embossedName the embossed name to set
     */
    public void setEmbossedName(String embossedName) {
        this.embossedName = embossedName;
    }
    
    /**
     * Gets the expiration date
     * 
     * @return expiration date string
     */
    public String getExpirationDate() {
        return expirationDate;
    }
    
    /**
     * Sets the expiration date
     * 
     * @param expirationDate the expiration date to set
     */
    public void setExpirationDate(String expirationDate) {
        this.expirationDate = expirationDate;
    }
    
    /**
     * Gets the active status
     * 
     * @return active status string
     */
    public String getActiveStatus() {
        return activeStatus;
    }
    
    /**
     * Sets the active status
     * 
     * @param activeStatus the active status to set
     */
    public void setActiveStatus(String activeStatus) {
        this.activeStatus = activeStatus;
    }
    
    /**
     * Gets the CVV code
     * 
     * @return CVV code string
     */
    public String getCvvCode() {
        return cvvCode;
    }
    
    /**
     * Sets the CVV code
     * 
     * @param cvvCode the CVV code to set
     */
    public void setCvvCode(String cvvCode) {
        this.cvvCode = cvvCode;
    }
    
    /**
     * Gets the generation timestamp
     * 
     * @return generation timestamp
     */
    public LocalDateTime getGenerationTimestamp() {
        return generationTimestamp;
    }
    
    /**
     * Sets the generation timestamp
     * 
     * @param generationTimestamp the generation timestamp to set
     */
    public void setGenerationTimestamp(LocalDateTime generationTimestamp) {
        this.generationTimestamp = generationTimestamp;
    }
    
    /**
     * Gets the record count
     * 
     * @return record count
     */
    public long getRecordCount() {
        return recordCount;
    }
    
    /**
     * Sets the record count
     * 
     * @param recordCount the record count to set
     */
    public void setRecordCount(long recordCount) {
        this.recordCount = recordCount;
    }
    
    /**
     * Gets the formatted report line
     * 
     * @return formatted report line string
     */
    public String getReportLine() {
        return reportLine;
    }
    
    /**
     * Sets the formatted report line
     * 
     * @param reportLine the formatted report line to set
     */
    public void setReportLine(String reportLine) {
        this.reportLine = reportLine;
    }
    
    // Utility methods
    
    /**
     * Creates a CardReportDTO from a Card entity
     * 
     * @param card the Card entity to convert
     * @return CardReportDTO populated with card data
     */
    public static CardReportDTO fromCard(Card card) {
        return new CardReportDTO(card);
    }
    
    /**
     * Validates that all required fields are present
     * 
     * @return true if all required fields are present
     */
    public boolean isValid() {
        return cardNumber != null && !cardNumber.trim().isEmpty() &&
               accountId != null && !accountId.trim().isEmpty() &&
               embossedName != null && !embossedName.trim().isEmpty();
    }
    
    /**
     * Gets a summary description of the card
     * 
     * @return summary string
     */
    public String getSummaryDescription() {
        return String.format("Card %s for Account %s (%s)",
                cardNumber != null ? cardNumber : "UNKNOWN",
                accountId != null ? accountId : "UNKNOWN",
                embossedName != null ? embossedName : "UNKNOWN");
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        CardReportDTO that = (CardReportDTO) obj;
        return Objects.equals(cardNumber, that.cardNumber) &&
               Objects.equals(accountId, that.accountId) &&
               Objects.equals(embossedName, that.embossedName) &&
               Objects.equals(expirationDate, that.expirationDate) &&
               Objects.equals(activeStatus, that.activeStatus) &&
               Objects.equals(cvvCode, that.cvvCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(cardNumber, accountId, embossedName, expirationDate, activeStatus, cvvCode);
    }
    
    @Override
    public String toString() {
        return "CardReportDTO{" +
                "cardNumber='" + (cardNumber != null ? cardNumber.substring(0, 4) + "****" : "null") + '\'' +
                ", accountId='" + accountId + '\'' +
                ", embossedName='" + embossedName + '\'' +
                ", expirationDate='" + expirationDate + '\'' +
                ", activeStatus='" + activeStatus + '\'' +
                ", cvvCode='" + (cvvCode != null ? "***" : "null") + '\'' +
                ", generationTimestamp=" + generationTimestamp +
                ", recordCount=" + recordCount +
                '}';
    }
}