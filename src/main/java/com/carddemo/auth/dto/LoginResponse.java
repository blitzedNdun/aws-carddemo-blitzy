package com.carddemo.auth.dto;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * DTO for authentication response containing JWT token, user information, and 
 * role-based routing data for successful login processing and frontend state management.
 * 
 * Maps COBOL COSGN00C authentication success data to Spring Security JWT response format.
 * Converts SEC-USR-TYPE ('A'/'U') to Spring Security roles (ROLE_ADMIN/ROLE_USER).
 * 
 * This DTO represents the successful authentication response equivalent to 
 * CICS XCTL to COADM01C (admin) or COMEN01C (user) based on user type.
 * 
 * Business Rules:
 * - User type 'A' maps to ROLE_ADMIN with administrative privileges
 * - User type 'U' maps to ROLE_USER with standard transaction processing access
 * - JWT token provides stateless authentication for microservices
 * - Timestamp enables audit trail and session management
 * 
 * Security Implementation:
 * - JWT token contains user context and role claims for Spring Security
 * - Role information enables frontend routing and authorization decisions
 * - Timestamp supports compliance audit requirements and session timeout
 */
public class LoginResponse {

    /**
     * JWT authentication token containing user identity and role claims.
     * Generated by Spring Security JWT encoder with HS256 algorithm.
     * Token includes user_id, user_type, roles array, and expiration claims.
     */
    @JsonProperty("token")
    private String token;

    /**
     * User identifier from USRSEC SEC-USR-ID field (8 characters).
     * Corresponds to CDEMO-USER-ID in CARDDEMO-COMMAREA.
     * Used for session context and transaction audit trail.
     */
    @JsonProperty("userId")
    private String userId;

    /**
     * User type indicator from USRSEC SEC-USR-TYPE field.
     * Values: 'A' for Admin users, 'U' for Regular users.
     * Maps to CDEMO-USER-TYPE in COMMAREA for menu routing decisions.
     */
    @JsonProperty("userType")
    private String userType;

    /**
     * Spring Security role designation for authorization framework.
     * Derived from userType: 'A' -> ROLE_ADMIN, 'U' -> ROLE_USER.
     * Enables @PreAuthorize annotations and method-level security.
     */
    @JsonProperty("role")
    private String role;

    /**
     * Authentication timestamp for audit trail and session management.
     * Records successful login time for compliance reporting.
     * Used for session timeout calculations and security monitoring.
     */
    @JsonProperty("timestamp")
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private LocalDateTime timestamp;

    /**
     * User's first name from USRSEC SEC-USR-FNAME for display purposes.
     * Provides personalized greeting in frontend components.
     */
    @JsonProperty("firstName")
    private String firstName;

    /**
     * User's last name from USRSEC SEC-USR-LNAME for display purposes.
     * Combined with firstName for complete user identification.
     */
    @JsonProperty("lastName")
    private String lastName;

    /**
     * Frontend routing path based on user role and privileges.
     * Admin users: '/admin/dashboard', Regular users: '/user/menu'.
     * Enables automatic navigation after successful authentication.
     */
    @JsonProperty("routingPath")
    private String routingPath;

    /**
     * Default constructor required for JSON deserialization.
     * Initializes timestamp to current time for audit trail.
     */
    public LoginResponse() {
        this.timestamp = LocalDateTime.now();
    }

    /**
     * Constructor for successful authentication response creation.
     * Automatically maps user type to Spring Security role and routing path.
     * 
     * @param token JWT authentication token
     * @param userId User identifier from USRSEC
     * @param userType User type ('A' or 'U')
     * @param firstName User's first name
     * @param lastName User's last name
     */
    public LoginResponse(String token, String userId, String userType, String firstName, String lastName) {
        this();
        this.token = token;
        this.userId = userId;
        this.userType = userType;
        this.firstName = firstName;
        this.lastName = lastName;
        
        // Map COBOL user type to Spring Security role
        // Equivalent to CDEMO-USRTYP-ADMIN and CDEMO-USRTYP-USER conditions
        if ("A".equals(userType)) {
            this.role = "ROLE_ADMIN";
            this.routingPath = "/admin/dashboard";
        } else if ("U".equals(userType)) {
            this.role = "ROLE_USER";
            this.routingPath = "/user/menu";
        } else {
            // Default to user role for unknown types
            this.role = "ROLE_USER";
            this.routingPath = "/user/menu";
        }
    }

    /**
     * Gets the JWT authentication token.
     * 
     * @return JWT token string for API authorization
     */
    public String getToken() {
        return token;
    }

    /**
     * Sets the JWT authentication token.
     * 
     * @param token JWT token string
     */
    public void setToken(String token) {
        this.token = token;
    }

    /**
     * Gets the user identifier.
     * 
     * @return User ID from USRSEC SEC-USR-ID
     */
    public String getUserId() {
        return userId;
    }

    /**
     * Sets the user identifier.
     * 
     * @param userId User ID string (8 characters)
     */
    public void setUserId(String userId) {
        this.userId = userId;
    }

    /**
     * Gets the user type indicator.
     * 
     * @return User type ('A' for Admin, 'U' for User)
     */
    public String getUserType() {
        return userType;
    }

    /**
     * Sets the user type and automatically updates role and routing path.
     * 
     * @param userType User type character ('A' or 'U')
     */
    public void setUserType(String userType) {
        this.userType = userType;
        
        // Update role and routing path based on user type
        if ("A".equals(userType)) {
            this.role = "ROLE_ADMIN";
            this.routingPath = "/admin/dashboard";
        } else if ("U".equals(userType)) {
            this.role = "ROLE_USER";
            this.routingPath = "/user/menu";
        } else {
            this.role = "ROLE_USER";
            this.routingPath = "/user/menu";
        }
    }

    /**
     * Gets the Spring Security role.
     * 
     * @return Role string (ROLE_ADMIN or ROLE_USER)
     */
    public String getRole() {
        return role;
    }

    /**
     * Sets the Spring Security role.
     * 
     * @param role Role string for authorization
     */
    public void setRole(String role) {
        this.role = role;
    }

    /**
     * Gets the authentication timestamp.
     * 
     * @return LocalDateTime of successful authentication
     */
    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the authentication timestamp.
     * 
     * @param timestamp LocalDateTime for audit trail
     */
    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Gets the user's first name.
     * 
     * @return First name from USRSEC SEC-USR-FNAME
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Sets the user's first name.
     * 
     * @param firstName First name string
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * Gets the user's last name.
     * 
     * @return Last name from USRSEC SEC-USR-LNAME
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Sets the user's last name.
     * 
     * @param lastName Last name string
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /**
     * Gets the frontend routing path.
     * 
     * @return Routing path based on user role
     */
    public String getRoutingPath() {
        return routingPath;
    }

    /**
     * Sets the frontend routing path.
     * 
     * @param routingPath Path for frontend navigation
     */
    public void setRoutingPath(String routingPath) {
        this.routingPath = routingPath;
    }

    /**
     * Gets full user display name.
     * 
     * @return Concatenated first and last name
     */
    public String getFullName() {
        if (firstName != null && lastName != null) {
            return firstName.trim() + " " + lastName.trim();
        } else if (firstName != null) {
            return firstName.trim();
        } else if (lastName != null) {
            return lastName.trim();
        }
        return userId; // Fallback to user ID
    }

    /**
     * Determines if user has administrative privileges.
     * 
     * @return true if user type is 'A' (admin)
     */
    public boolean isAdmin() {
        return "A".equals(userType) || "ROLE_ADMIN".equals(role);
    }

    /**
     * Creates a success response for authentication.
     * Factory method for consistent response creation.
     * 
     * @param token JWT authentication token
     * @param userId User identifier
     * @param userType User type ('A' or 'U')
     * @param firstName User's first name
     * @param lastName User's last name
     * @return Configured LoginResponse instance
     */
    public static LoginResponse success(String token, String userId, String userType, 
                                      String firstName, String lastName) {
        return new LoginResponse(token, userId, userType, firstName, lastName);
    }

    /**
     * Validates the response data for completeness.
     * 
     * @return true if all required fields are present
     */
    public boolean isValid() {
        return token != null && !token.trim().isEmpty() &&
               userId != null && !userId.trim().isEmpty() &&
               userType != null && !userType.trim().isEmpty() &&
               role != null && !role.trim().isEmpty() &&
               timestamp != null;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        LoginResponse that = (LoginResponse) o;
        return Objects.equals(token, that.token) &&
               Objects.equals(userId, that.userId) &&
               Objects.equals(userType, that.userType) &&
               Objects.equals(role, that.role) &&
               Objects.equals(timestamp, that.timestamp) &&
               Objects.equals(firstName, that.firstName) &&
               Objects.equals(lastName, that.lastName) &&
               Objects.equals(routingPath, that.routingPath);
    }

    @Override
    public int hashCode() {
        return Objects.hash(token, userId, userType, role, timestamp, firstName, lastName, routingPath);
    }

    @Override
    public String toString() {
        return "LoginResponse{" +
                "userId='" + userId + '\'' +
                ", userType='" + userType + '\'' +
                ", role='" + role + '\'' +
                ", timestamp=" + timestamp +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", routingPath='" + routingPath + '\'' +
                ", tokenPresent=" + (token != null && !token.isEmpty()) +
                '}';
    }
}