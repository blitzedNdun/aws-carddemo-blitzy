/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

package com.carddemo.auth.dto;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDateTime;
import java.util.List;

/**
 * LoginResponse DTO for authentication success response containing JWT token,
 * user information, and role-based routing data for frontend state management.
 * 
 * This DTO replaces the original COBOL COMMAREA structure used in COSGN00C.cbl
 * and provides comprehensive authentication context for Spring Security integration.
 * 
 * Original COBOL mapping:
 * - CDEMO-USER-ID -> userId
 * - SEC-USR-TYPE -> userType  
 * - JWT token generation -> token
 * - Navigation routing -> menuItems
 * - Audit timestamp -> timestamp
 * 
 * @version 1.0
 * @since 1.0
 */
public class LoginResponse {
    
    /**
     * JWT authentication token for subsequent API requests.
     * Generated using Spring Security OAuth2 Resource Server with HS256 algorithm.
     */
    @JsonProperty("token")
    private String token;
    
    /**
     * User identifier from USRSEC file (SEC-USR-ID).
     * Case-insensitive authentication matching original COBOL logic.
     */
    @JsonProperty("userId")
    private String userId;
    
    /**
     * User type from SEC-USR-TYPE field determining role assignment.
     * Values: 'A' for Admin, 'U' for User (preserved from original COBOL).
     */
    @JsonProperty("userType")
    private String userType;
    
    /**
     * Spring Security role mapped from userType.
     * 'A' -> ROLE_ADMIN, 'U' -> ROLE_USER for @PreAuthorize annotations.
     */
    @JsonProperty("role")
    private String role;
    
    /**
     * Authentication timestamp for audit trail and session management.
     * Supports SOX compliance and security monitoring requirements.
     */
    @JsonProperty("timestamp")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private LocalDateTime timestamp;
    
    /**
     * User's first name from SEC-USR-FNAME for display purposes.
     */
    @JsonProperty("firstName")
    private String firstName;
    
    /**
     * User's last name from SEC-USR-LNAME for display purposes.
     */
    @JsonProperty("lastName")
    private String lastName;
    
    /**
     * Menu items available to user based on role for frontend navigation.
     * Replaces original COBOL menu routing logic (COADM01C vs COMEN01C).
     */
    @JsonProperty("menuItems")
    private List<String> menuItems;
    
    /**
     * Session expiration time for frontend session management.
     * Aligned with Redis session TTL and JWT token expiration.
     */
    @JsonProperty("sessionExpiry")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private LocalDateTime sessionExpiry;
    
    /**
     * Default constructor for JSON deserialization.
     */
    public LoginResponse() {
        this.timestamp = LocalDateTime.now();
    }
    
    /**
     * Constructor with essential authentication parameters.
     * 
     * @param token JWT authentication token
     * @param userId User identifier from USRSEC
     * @param userType User type ('A' or 'U')
     * @param role Mapped Spring Security role
     */
    public LoginResponse(String token, String userId, String userType, String role) {
        this.token = token;
        this.userId = userId;
        this.userType = userType;
        this.role = role;
        this.timestamp = LocalDateTime.now();
    }
    
    /**
     * Gets the JWT authentication token.
     * 
     * @return JWT token string for Authorization header
     */
    public String getToken() {
        return token;
    }
    
    /**
     * Sets the JWT authentication token.
     * 
     * @param token JWT token string generated by Spring Security
     */
    public void setToken(String token) {
        this.token = token;
    }
    
    /**
     * Gets the user identifier.
     * 
     * @return User ID from USRSEC file (SEC-USR-ID)
     */
    public String getUserId() {
        return userId;
    }
    
    /**
     * Sets the user identifier.
     * 
     * @param userId User ID from authentication process
     */
    public void setUserId(String userId) {
        this.userId = userId;
    }
    
    /**
     * Gets the user type.
     * 
     * @return User type ('A' for Admin, 'U' for User)
     */
    public String getUserType() {
        return userType;
    }
    
    /**
     * Sets the user type.
     * 
     * @param userType User type from SEC-USR-TYPE field
     */
    public void setUserType(String userType) {
        this.userType = userType;
    }
    
    /**
     * Gets the Spring Security role.
     * 
     * @return Role string for @PreAuthorize annotations
     */
    public String getRole() {
        return role;
    }
    
    /**
     * Sets the Spring Security role.
     * 
     * @param role Mapped role (ROLE_ADMIN or ROLE_USER)
     */
    public void setRole(String role) {
        this.role = role;
    }
    
    /**
     * Gets the authentication timestamp.
     * 
     * @return Timestamp when authentication occurred
     */
    public LocalDateTime getTimestamp() {
        return timestamp;
    }
    
    /**
     * Sets the authentication timestamp.
     * 
     * @param timestamp Authentication timestamp for audit trail
     */
    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }
    
    /**
     * Gets the user's first name.
     * 
     * @return First name from SEC-USR-FNAME
     */
    public String getFirstName() {
        return firstName;
    }
    
    /**
     * Sets the user's first name.
     * 
     * @param firstName User's first name for display
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    
    /**
     * Gets the user's last name.
     * 
     * @return Last name from SEC-USR-LNAME
     */
    public String getLastName() {
        return lastName;
    }
    
    /**
     * Sets the user's last name.
     * 
     * @param lastName User's last name for display
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    
    /**
     * Gets the menu items available to user.
     * 
     * @return List of menu items based on user role
     */
    public List<String> getMenuItems() {
        return menuItems;
    }
    
    /**
     * Sets the menu items for user navigation.
     * 
     * @param menuItems List of available menu items
     */
    public void setMenuItems(List<String> menuItems) {
        this.menuItems = menuItems;
    }
    
    /**
     * Gets the session expiration time.
     * 
     * @return Session expiry timestamp
     */
    public LocalDateTime getSessionExpiry() {
        return sessionExpiry;
    }
    
    /**
     * Sets the session expiration time.
     * 
     * @param sessionExpiry Session expiry timestamp
     */
    public void setSessionExpiry(LocalDateTime sessionExpiry) {
        this.sessionExpiry = sessionExpiry;
    }
    
    /**
     * Checks if user has admin privileges.
     * 
     * @return true if user type is 'A' (Admin)
     */
    public boolean isAdmin() {
        return "A".equals(userType);
    }
    
    /**
     * Gets the display name for UI purposes.
     * 
     * @return Formatted full name or user ID if names not available
     */
    public String getDisplayName() {
        if (firstName != null && lastName != null) {
            return firstName + " " + lastName;
        }
        return userId;
    }
    
    /**
     * Determines the default navigation route based on user type.
     * Replicates original COBOL routing logic from COSGN00C.cbl.
     * 
     * @return Default route path for user type
     */
    public String getDefaultRoute() {
        if ("A".equals(userType)) {
            return "/admin-menu";  // Equivalent to COADM01C program
        } else {
            return "/main-menu";   // Equivalent to COMEN01C program
        }
    }
    
    /**
     * Validates if the authentication response is complete.
     * 
     * @return true if all required fields are present
     */
    public boolean isValid() {
        return token != null && !token.isEmpty() &&
               userId != null && !userId.isEmpty() &&
               userType != null && !userType.isEmpty() &&
               role != null && !role.isEmpty() &&
               timestamp != null;
    }
    
    @Override
    public String toString() {
        return "LoginResponse{" +
                "userId='" + userId + '\'' +
                ", userType='" + userType + '\'' +
                ", role='" + role + '\'' +
                ", timestamp=" + timestamp +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", sessionExpiry=" + sessionExpiry +
                ", menuItems=" + (menuItems != null ? menuItems.size() : 0) + " items" +
                '}';
    }
}