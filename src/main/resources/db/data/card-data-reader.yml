# =============================================================================
# Spring Batch Card Data Reader Configuration
# 
# SUMMARY: YAML configuration for Spring Batch FlatFileItemReader processing 
#          carddata.txt with 150-character fixed-width records, Luhn algorithm 
#          validation, PCI compliance, and referential integrity maintenance
#
# MIGRATION FROM: 
#   - Legacy carddata.txt ASCII export file (50 card records)
#   - VSAM CARDDAT dataset structure preservation
#   - Fixed-width 150-character record format
#
# SPRING BOOT INTEGRATION:
#   - JPA Entity: com.carddemo.common.entity.Card.java
#   - Database Table: PostgreSQL cards table via V4__create_cards_table.sql
#   - Batch Processing: Spring Batch chunk-oriented processing
#
# AUTHOR: Blitzy agent - CardDemo PostgreSQL Migration 
# =============================================================================

# Card Data Reader Configuration - Default Export
CardDataReaderConfiguration:
  
  # =============================================================================
  # SPRING BATCH FLAT FILE ITEM READER CONFIGURATION
  # =============================================================================
  
  # Core reader configuration for processing carddata.txt
  itemReader:
    name: "cardDataItemReader"
    resource: "classpath:data/carddata.txt"
    encoding: "UTF-8"
    linesToSkip: 0
    strict: true
    
    # Fixed-width record parsing configuration
    lineTokenizer:
      type: "FixedLengthTokenizer"
      strict: true
      
      # Fixed-width field ranges for 150-character equivalent mapping
      ranges:
        - name: "cardNumber"
          start: 1
          end: 16
          description: "16-digit card number with Luhn algorithm validation"
          
        - name: "accountId"  
          start: 17
          end: 27
          description: "11-digit account identifier with leading zeros"
          
        - name: "customerId"
          start: 28
          end: 36
          description: "9-digit customer identifier with leading zeros"
          
        - name: "cvvCode"
          start: 37
          end: 39
          description: "3-digit CVV security code for PCI compliance"
          
        - name: "embossedName"
          start: 40
          end: 89
          description: "50-character embossed name on physical card"
          
        - name: "expirationDate"
          start: 90
          end: 99  
          description: "Card expiration date in YYYY-MM-DD format"
          
        - name: "activeStatus"
          start: 100
          end: 100
          description: "Card active status flag (Y/N)"
          
        # Padding section (positions 101-150) - not processed
        
    # Field mapping to Card entity properties
    fieldSetMapper:
      type: "BeanWrapperFieldSetMapper"
      targetType: "com.carddemo.common.entity.Card"
      strict: true
      
      # Property mappings with validation and transformation
      propertyMappings:
        cardNumber:
          fieldName: "cardNumber"
          required: true
          validation:
            - type: "length"
              value: 16
              message: "Card number must be exactly 16 digits"
            - type: "numeric"
              message: "Card number must contain only digits"  
            - type: "luhn"
              message: "Card number must pass Luhn algorithm validation"
              
        accountId:
          fieldName: "account" 
          required: true
          transformation: "trim"
          validation:
            - type: "length"
              min: 1
              max: 11
              message: "Account ID must be 1-11 characters after trimming"
            - type: "numeric"
              message: "Account ID must contain only digits"
              
        customerId: 
          fieldName: "customer"
          required: true
          transformation: "trim"
          validation:
            - type: "length" 
              min: 1
              max: 9
              message: "Customer ID must be 1-9 characters after trimming"
            - type: "numeric"
              message: "Customer ID must contain only digits"
              
        cvvCode:
          fieldName: "cvvCode"
          required: true
          validation:
            - type: "length"
              value: 3
              message: "CVV code must be exactly 3 digits"
            - type: "numeric"
              message: "CVV code must contain only digits"
              
        embossedName:
          fieldName: "embossedName"
          required: true
          transformation: "trim"
          validation:  
            - type: "length"
              min: 2
              max: 50
              message: "Embossed name must be 2-50 characters after trimming"
            - type: "pattern"
              value: "^[A-Za-z0-9 .,-]+$"
              message: "Embossed name contains invalid characters"
              
        expirationDate:
          fieldName: "expirationDate"
          required: true
          transformation: "parseLocalDate"
          format: "yyyy-MM-dd"
          validation:
            - type: "futureDate"
              message: "Expiration date must be in the future"
            - type: "maxYearsFromNow"
              value: 10  
              message: "Expiration date cannot exceed 10 years from current date"
              
        activeStatus:
          fieldName: "activeStatus" 
          required: true
          validation:
            - type: "values"
              allowed: ["Y", "N", "C", "E"]
              message: "Active status must be Y, N, C, or E"
  
  # =============================================================================
  # LUHN ALGORITHM VERIFICATION CONFIGURATION
  # =============================================================================
  
  # Luhn algorithm validation for card number integrity
  luhnValidation:
    enabled: true
    description: "Validates card numbers using Luhn checksum algorithm per Section 6.2.6.6"
    
    # Supported card network prefixes for business rule validation  
    supportedPrefixes:
      visa: ["4"]
      mastercard: ["5"] 
      americanExpress: ["34", "37"]
      discover: ["6"]
      
    # Validation rules
    rules:
      - name: "lengthValidation"
        description: "Card number must be exactly 16 digits"
        implementation: "checkLength16"
        
      - name: "numericValidation" 
        description: "Card number must contain only numeric digits"
        implementation: "checkAllNumeric"
        
      - name: "luhnChecksumValidation"
        description: "Card number must pass Luhn algorithm checksum"
        implementation: "validateLuhnChecksum"
        
      - name: "issuerPrefixValidation"
        description: "Card number must start with valid issuer prefix"
        implementation: "validateIssuerPrefix"

  # =============================================================================
  # PCI COMPLIANCE PROCESSING CONFIGURATION  
  # =============================================================================
  
  # PCI DSS compliance settings for secure card data handling
  pciCompliance:
    enabled: true
    description: "PCI DSS compliance for secure card data processing"
    
    # CVV code processing with security considerations
    cvvProcessing:
      storageEncryption: true
      description: "CVV codes require encryption for secure storage per PCI DSS"
      encryptionNote: "Production deployment should implement pgcrypto encryption"
      
    # Card number protection
    cardNumberProtection:
      maskingEnabled: true
      maskingPattern: "****-****-****-{lastFourDigits}"
      description: "Card numbers should be masked in logs and non-secure contexts"
      
    # Audit trail requirements
    auditTrail:
      enabled: true
      trackCardDataAccess: true
      logValidationFailures: true
      description: "Comprehensive audit logging for PCI compliance"

  # =============================================================================
  # FOREIGN KEY CONSTRAINT ENFORCEMENT CONFIGURATION
  # =============================================================================
  
  # Referential integrity maintenance during bulk loading
  foreignKeyValidation:
    enabled: true  
    description: "Validates foreign key relationships during card data loading"
    
    # Account relationship validation
    accountValidation:
      enabled: true
      description: "Validates account_id references exist in accounts table"
      errorHandling: "skipRecord"
      logging:
        logSkippedRecords: true
        logValidationErrors: true
        
    # Customer relationship validation  
    customerValidation:
      enabled: true
      description: "Validates customer_id references exist in customers table"
      errorHandling: "skipRecord"
      logging:
        logSkippedRecords: true
        logValidationErrors: true
        
    # Composite relationship validation
    accountCustomerValidation:
      enabled: true
      description: "Validates account-customer relationship consistency"
      rule: "account.customer_id must match card.customer_id"
      errorHandling: "skipRecord"
      logging:
        logSkippedRecords: true
        logValidationErrors: true

  # =============================================================================
  # CARD ACCOUNT LINKAGE CONFIGURATION
  # =============================================================================
  
  # Account linkage processing for card-to-account relationships
  accountLinkage:
    enabled: true
    description: "Processes card account linkage maintaining foreign key relationships"
    
    # Account lookup configuration
    accountLookup:
      method: "repositoryLookup"
      caching: true
      cacheSize: 1000
      cacheTTL: "30m" 
      description: "Efficient account entity lookup with caching"
      
    # Relationship mapping
    relationshipMapping:
      cardToAccount: "manyToOne"
      fetchType: "LAZY"
      cascadeOptions: []
      description: "JPA relationship configuration per Card entity design"

  # =============================================================================  
  # FIXED-WIDTH ASCII FILE PARSING CONFIGURATION
  # =============================================================================
  
  # ASCII file parsing from carddata.txt with precise field positioning
  asciiFileProcessing:
    enabled: true
    description: "Processes carddata.txt with fixed-width 150-character record format"
    
    # File characteristics
    fileFormat:
      type: "fixedWidth"
      recordLength: 150
      totalRecords: 50
      encoding: "UTF-8"
      lineTerminator: "LF"
      
    # Field positioning and data type conversion
    fieldPositioning:
      strictPositioning: true
      paddingHandling: "trim"
      description: "Precise field positioning with automatic padding removal"
      
    # Data type conversions
    dataTypeConversion:
      numericFields: ["cardNumber", "accountId", "customerId", "cvvCode"]
      dateFields: ["expirationDate"]
      stringFields: ["embossedName", "activeStatus"]
      dateFormat: "yyyy-MM-dd"
      description: "Automatic data type conversion during parsing"

  # =============================================================================
  # CARD STATUS FLAG PROCESSING CONFIGURATION  
  # =============================================================================
  
  # Active status validation and business rule enforcement
  cardStatusProcessing:
    enabled: true
    description: "Processes card status flags with business rule enforcement"
    
    # Status code definitions
    statusCodes:
      active: "Y"
      inactive: "N" 
      cancelled: "C"
      expired: "E"
      
    # Business rules
    businessRules:
      - name: "defaultActiveStatus"
        description: "New cards default to active status"
        rule: "if status is empty, set to Y"
        
      - name: "validateStatusCode"
        description: "Status must be valid code"
        rule: "status must be in [Y, N, C, E]"
        
      - name: "expiredCardHandling"
        description: "Handle expired cards appropriately"
        rule: "if expiration_date <= current_date, consider setting status to E"

  # =============================================================================
  # EXPIRATION DATE VALIDATION CONFIGURATION
  # =============================================================================
  
  # Expiration date handling with business rule enforcement
  expirationDateValidation:
    enabled: true
    description: "Validates card expiration dates with comprehensive business rules"
    
    # Validation rules
    validationRules:
      - name: "futureDate"
        description: "Expiration date must be in the future"
        rule: "expiration_date > current_date"
        action: "skipRecord"
        
      - name: "reasonableRange"
        description: "Expiration date must be within reasonable range"
        rule: "expiration_date <= (current_date + 10 years)"
        action: "skipRecord"
        
      - name: "monthEndNormalization"
        description: "Normalize to last day of expiration month"
        rule: "set to last day of month if day is not last day"
        action: "transform"
        
    # Date processing
    dateProcessing:
      inputFormat: "yyyy-MM-dd"
      outputFormat: "LocalDate"
      timezone: "UTC"
      description: "Date parsing and normalization configuration"

  # =============================================================================
  # SPRING BATCH CHUNK PROCESSING CONFIGURATION
  # =============================================================================
  
  # Chunk processing optimization for card data loading
  chunkProcessing:
    enabled: true
    description: "Optimized chunk processing for 50 card records from carddata.txt"
    
    # Chunk size configuration
    chunkSize: 10
    description: "Process 10 cards per chunk for optimal memory usage"
    
    # Error handling
    errorHandling:
      skipLimit: 5
      skipPolicy: "skipOnValidationError"
      retryLimit: 3
      retryableExceptions: ["TransientDataAccessException"]
      
    # Performance optimization
    performance:
      prefetchSize: 20
      batchInserts: true
      jdbcBatchSize: 10
      description: "Optimized batch performance for PostgreSQL cards table"

  # =============================================================================
  # INTEGRATION WITH SPRING BOOT BATCH AUTO-CONFIGURATION
  # =============================================================================
  
  # Spring Boot integration configuration
  springBootIntegration:
    enabled: true
    description: "Integration with Spring Boot Batch auto-configuration"
    
    # Auto-configuration settings  
    autoConfiguration:
      itemReader: true
      jobLauncher: true
      transactionManager: true
      dataSource: true
      
    # YAML configuration support
    yamlConfiguration:
      enabled: true
      configurationBinding: "CardDataReaderConfiguration"
      description: "YAML-based configuration binding for Spring Boot"

  # =============================================================================
  # DATABASE CONNECTION AND TRANSACTION CONFIGURATION
  # =============================================================================
  
  # PostgreSQL integration with HikariCP connection pooling
  databaseIntegration:
    enabled: true
    description: "PostgreSQL database integration with optimized connection management"
    
    # Connection pool optimization
    connectionPool:
      hikaricp:
        minimumIdle: 5
        maximumPoolSize: 20
        connectionTimeout: 30000
        idleTimeout: 600000
        description: "HikariCP optimization for batch operations"
        
    # Transaction management
    transactionManagement:
      isolationLevel: "READ_COMMITTED"
      timeout: 60
      rollbackOnException: true
      description: "Transaction management for bulk card data loading"
      
    # Batch operation optimization
    batchOperations:
      jdbcBatchSize: 10
      bulkInsertOptimization: true
      foreignKeyConstraintDeferring: false
      description: "Optimized batch operations for PostgreSQL cards table"

  # =============================================================================
  # COMPREHENSIVE CARD DATA LOADING METADATA
  # =============================================================================
  
  # Processing metadata and documentation
  processingMetadata:
    version: "1.0.0"
    created: "2024-01-15"
    author: "Blitzy agent"
    description: "Card data loading configuration for CardDemo migration"
    
    # Source file metadata
    sourceFile:
      name: "carddata.txt"
      recordCount: 50
      recordLength: 150
      format: "fixed-width ASCII"
      encoding: "UTF-8"
      
    # Target table metadata  
    targetTable:
      name: "cards"
      schema: "public"  
      primaryKey: "card_number"
      foreignKeys: ["account_id", "customer_id"]
      
    # Processing statistics
    expectedStatistics:
      totalRecords: 50
      estimatedProcessingTime: "2-5 seconds"
      memoryUsage: "minimal"
      description: "Expected processing metrics for performance monitoring"

# =============================================================================
# CONFIGURATION VALIDATION AND COMPLIANCE NOTES
# =============================================================================

# This configuration implements:
# ✓ 150-char equivalent mapping per Section 6.6.2.3
# ✓ Luhn algorithm verification per Section 6.2.6.6  
# ✓ PCI compliance processing for CVV codes
# ✓ Foreign key integrity maintenance for accounts/customers
# ✓ Fixed-width record parser for 50 card records
# ✓ Comprehensive field validation and business rules
# ✓ Spring Batch FlatFileItemReader integration
# ✓ PostgreSQL cards table compatibility
# ✓ Card status flag and expiration date validation
# ✓ HikariCP connection pool optimization
# ✓ Chunk-based processing with error handling

# Production deployment notes:
# - Enable pgcrypto encryption for CVV codes
# - Configure appropriate logging levels for PCI compliance
# - Set up monitoring for batch job execution
# - Implement backup procedures for card data loading
# - Review and test all validation rules thoroughly

# =============================================================================
# END OF CONFIGURATION
# =============================================================================