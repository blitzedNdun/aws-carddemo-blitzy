# Spring Batch MultiResourceItemReader Configuration for Reference Data Loading
# CardDemo System - VSAM to PostgreSQL Migration
# Processes 5 ASCII reference data files maintaining COBOL COMP-3 precision

# =====================================================================================
# REFERENCE DATA READER CONFIGURATION
# =====================================================================================
# This configuration supports the transformation from mainframe VSAM reference datasets
# to PostgreSQL relational tables with exact precision preservation and constraint
# validation per Section 6.2.4.2 requirements.
#
# Processing Order:
# 1. disclosure_groups (discgrp.txt) - Interest rate configuration
# 2. transaction_types (trantype.txt) - Transaction classification  
# 3. transaction_categories (trancatg.txt) - Category management
# 4. transaction_category_balances (tcatbal.txt) - Balance tracking with composite keys
# 5. cards (cardxref.txt) - Card cross-reference data
#
# Key Features:
# - MultiResourceItemReader for processing 5 ASCII files
# - BigDecimal precision for DECIMAL(5,4) interest rates
# - Composite primary key handling for category balances
# - Foreign key constraint validation
# - Redis cache warming for reference tables
# =====================================================================================

batch:
  jobs:
    reference-data-load:
      description: "Multi-resource reference data loading from ASCII files to PostgreSQL"
      
      # =====================================================================================
      # JOB EXECUTION CONFIGURATION
      # =====================================================================================
      execution:
        chunk-size: 1000
        skip-limit: 10
        retry-limit: 3
        commit-interval: 100
        transaction-isolation: SERIALIZABLE
        
      # =====================================================================================
      # STEP 1: DISCLOSURE GROUPS PROCESSING
      # =====================================================================================
      steps:
        - name: "load-disclosure-groups"
          description: "Load disclosure group reference data with DECIMAL(5,4) interest rate precision"
          order: 1
          
          reader:
            type: "FlatFileItemReader"
            resource: "classpath:data/discgrp.txt"
            encoding: "UTF-8"
            line-mapper:
              type: "FixedLengthTokenizer"
              strict: true
              columns:
                - name: "groupId"
                  range: "1-10"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    max-length: 10
                    pattern: "^[A-Z0-9]+$"
                    
                - name: "interestRateRaw"
                  range: "11-15"
                  type: "String"
                  description: "Raw interest rate data requiring BigDecimal conversion"
                  
                - name: "rateCode"
                  range: "16-18"
                  type: "String"
                  description: "Rate classification code"
                  
                - name: "effectiveFlag"
                  range: "19-19"
                  type: "String"
                  description: "Rate effectiveness indicator"
                  
                - name: "padding"
                  range: "20-50"
                  type: "String"
                  description: "Reserved padding fields"
                  
          processor:
            type: "Custom"
            class: "com.carddemo.batch.processor.DisclosureGroupProcessor"
            configuration:
              interest-rate-precision:
                scale: 4
                precision: 5
                math-context: "DECIMAL128"
                rounding-mode: "HALF_EVEN"
              validation:
                rate-range:
                  min: "0.0001"
                  max: "9.9999"
                group-id-format: "^[A-Z0-9]{1,10}$"
              transformation:
                # Convert COBOL packed decimal format to BigDecimal
                interest-rate-formula: "parsePackedDecimal(interestRateRaw, 5, 4)"
                effective-date-default: "2024-01-01T00:00:00"
                disclosure-text-template: "Interest rate disclosure for group {groupId}: {interestRate}% APR"
                
          writer:
            type: "JpaItemWriter"
            entity-class: "com.carddemo.common.entity.DisclosureGroup"
            repository: "com.carddemo.repository.DisclosureGroupRepository"
            write-mode: "INSERT"
            
        # =====================================================================================
        # STEP 2: TRANSACTION TYPES PROCESSING  
        # =====================================================================================
        - name: "load-transaction-types"
          description: "Load transaction type reference data with debit/credit indicators"
          order: 2
          depends-on: ["load-disclosure-groups"]
          
          reader:
            type: "FlatFileItemReader"
            resource: "classpath:data/trantype.txt"
            encoding: "UTF-8"
            line-mapper:
              type: "FixedLengthTokenizer"
              strict: true
              columns:
                - name: "transactionType"
                  range: "1-2"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    exact-length: 2
                    pattern: "^[0-9]{2}$"
                    
                - name: "typeDescription"
                  range: "3-52"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    max-length: 60
                    min-length: 1
                    
                - name: "statusCode"
                  range: "53-60"
                  type: "String"
                  description: "Status and control flags"
                  
          processor:
            type: "Custom"
            class: "com.carddemo.batch.processor.TransactionTypeProcessor"
            configuration:
              debit-credit-mapping:
                # Map transaction types to debit/credit indicators
                debit-types: ["01", "02", "04", "07"]  # Purchase, Cash Advance, etc.
                credit-types: ["03", "05", "06"]       # Payment, Credit, Refund
              validation:
                description-required: true
                type-code-format: "^[0-9]{2}$"
                
          writer:
            type: "JpaItemWriter"
            entity-class: "com.carddemo.common.entity.TransactionType"
            repository: "com.carddemo.repository.TransactionTypeRepository"
            write-mode: "INSERT"
            
        # =====================================================================================
        # STEP 3: TRANSACTION CATEGORIES PROCESSING
        # =====================================================================================
        - name: "load-transaction-categories"
          description: "Load transaction category reference data with active status management"
          order: 3
          depends-on: ["load-transaction-types"]
          
          reader:
            type: "FlatFileItemReader"
            resource: "classpath:data/trancatg.txt"
            encoding: "UTF-8"
            line-mapper:
              type: "FixedLengthTokenizer"
              strict: true
              columns:
                - name: "transactionCategory"
                  range: "1-6"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    exact-length: 6
                    pattern: "^[0-9]{6}$"
                    
                - name: "categoryDescription"
                  range: "7-56"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    max-length: 60
                    min-length: 1
                    
                - name: "statusFlags"
                  range: "57-60"
                  type: "String"
                  description: "Category status and control flags"
                  
          processor:
            type: "Custom"
            class: "com.carddemo.batch.processor.TransactionCategoryProcessor"
            configuration:
              # Map 6-digit codes to 4-digit format for database compatibility
              category-code-mapping:
                format: "truncate-to-4-digits"  # 010001 -> 0100
                validation: "ensure-unique"
              active-status:
                default: true
                inactive-patterns: ["9999", "0000"]
              validation:
                description-required: true
                category-format: "^[0-9]{4}$"
                
          writer:
            type: "JpaItemWriter"  
            entity-class: "com.carddemo.common.entity.TransactionCategory"
            repository: "com.carddemo.repository.TransactionCategoryRepository"
            write-mode: "INSERT"
            
        # =====================================================================================
        # STEP 4: TRANSACTION CATEGORY BALANCES PROCESSING (COMPOSITE KEYS)
        # =====================================================================================
        - name: "load-transaction-category-balances"
          description: "Load category balance data with composite primary keys and BigDecimal precision"
          order: 4
          depends-on: ["load-transaction-categories"]
          
          reader:
            type: "FlatFileItemReader"
            resource: "classpath:data/tcatbal.txt"
            encoding: "UTF-8"
            line-mapper:
              type: "FixedLengthTokenizer"
              strict: true
              columns:
                - name: "accountId"
                  range: "1-11"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    exact-length: 11
                    pattern: "^[0-9]{11}$"
                    
                - name: "transactionCategory"
                  range: "12-15"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    exact-length: 4
                    pattern: "^[0-9]{4}$"
                    
                - name: "categoryBalanceRaw"
                  range: "16-26"
                  type: "String"
                  description: "Raw balance requiring BigDecimal conversion"
                  
                - name: "lastUpdateFlag"
                  range: "27-27"
                  type: "String"
                  description: "Update timestamp indicator"
                  
                - name: "padding"
                  range: "28-50"
                  type: "String"
                  description: "Reserved padding fields"
                  
          processor:
            type: "Custom"
            class: "com.carddemo.batch.processor.TransactionCategoryBalanceProcessor"
            configuration:
              composite-key:
                # Create composite primary key from account_id + transaction_category
                key-class: "com.carddemo.common.entity.TransactionCategoryBalanceId"
                account-id-field: "accountId"
                category-field: "transactionCategory"
              balance-precision:
                scale: 2
                precision: 12
                math-context: "DECIMAL128"
                rounding-mode: "HALF_EVEN"
              foreign-key-validation:
                # Ensure referenced accounts and categories exist
                validate-account-exists: true
                validate-category-exists: true
              transformation:
                balance-formula: "parseSignedDecimal(categoryBalanceRaw, 12, 2)"
                last-updated-default: "now()"
                
          writer:
            type: "JpaItemWriter"
            entity-class: "com.carddemo.common.entity.TransactionCategoryBalance"
            repository: "com.carddemo.repository.TransactionCategoryBalanceRepository"
            write-mode: "INSERT"
            
        # =====================================================================================
        # STEP 5: CARD CROSS-REFERENCE DATA PROCESSING
        # =====================================================================================
        - name: "load-card-cross-reference"
          description: "Load card cross-reference data with account and customer relationships"
          order: 5
          depends-on: ["load-transaction-category-balances"]
          
          reader:
            type: "FlatFileItemReader"
            resource: "classpath:data/cardxref.txt" 
            encoding: "UTF-8"
            line-mapper:
              type: "FixedLengthTokenizer"
              strict: true
              columns:
                - name: "cardNumber"
                  range: "1-16"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    exact-length: 16
                    pattern: "^[0-9]{16}$"
                    luhn-validation: true
                    
                - name: "accountId"
                  range: "17-27"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    exact-length: 11
                    pattern: "^[0-9]{11}$"
                    
                - name: "customerId"
                  range: "28-36"
                  type: "String"
                  trim: true
                  required: true
                  validation:
                    exact-length: 9
                    pattern: "^[0-9]{9}$"
                    
                - name: "statusCode"
                  range: "37-38"
                  type: "String"
                  description: "Card status indicator"
                  
                - name: "padding"
                  range: "39-50"
                  type: "String"
                  description: "Reserved fields"
                  
          processor:
            type: "Custom"
            class: "com.carddemo.batch.processor.CardProcessor"
            configuration:
              luhn-validation:
                enabled: true
                fail-on-invalid: true
              foreign-key-validation:
                validate-account-exists: true
                validate-customer-exists: false  # Customer service may be separate
              card-defaults:
                active-status: "Y"
                cvv-code: "000"  # Placeholder - actual CVV handled separately
                embossed-name: "CARDHOLDER"
                expiration-date: "2026-12-31"
                
          writer:
            type: "JpaItemWriter"
            entity-class: "com.carddemo.common.entity.Card"
            repository: "com.carddemo.repository.CardRepository"
            write-mode: "INSERT"

      # =====================================================================================
      # POST-PROCESSING CONFIGURATION
      # =====================================================================================
      post-processing:
        # Redis cache warming for reference tables per Section 6.2.4.2
        cache-warming:
          enabled: true
          cache-provider: "redis"
          caches:
            - name: "transactionTypes"
              key-pattern: "transaction-type:*"
              ttl: "86400"  # 24 hours
              
            - name: "transactionCategories" 
              key-pattern: "transaction-category:*"
              ttl: "86400"  # 24 hours
              
            - name: "disclosureGroups"
              key-pattern: "disclosure-group:*"
              ttl: "86400"  # 24 hours
              
        # Database constraint validation
        constraint-validation:
          enabled: true
          validate-foreign-keys: true
          validate-unique-constraints: true
          
        # Performance metrics collection
        metrics:
          enabled: true
          record-processing-time: true
          record-row-counts: true
          export-to-prometheus: true

# =====================================================================================
# SPRING BATCH INFRASTRUCTURE CONFIGURATION
# =====================================================================================
spring:
  batch:
    job:
      enabled: false  # Prevent auto-execution on startup
    jdbc:
      initialize-schema: embedded
      table-prefix: "BATCH_"
      
  datasource:
    # PostgreSQL connection configuration
    url: "${DATABASE_URL:jdbc:postgresql://localhost:5432/carddemo}"
    username: "${DATABASE_USERNAME:carddemo_user}"
    password: "${DATABASE_PASSWORD:carddemo_pass}"
    driver-class-name: "org.postgresql.Driver"
    
    # HikariCP connection pool optimization per Section 6.2.4.3
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      pool-name: "ReferenceDataPool"
      
  # Redis configuration for cache warming
  redis:
    host: "${REDIS_HOST:localhost}"
    port: "${REDIS_PORT:6379}"
    timeout: "2000ms"
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

# =====================================================================================  
# LOGGING CONFIGURATION
# =====================================================================================
logging:
  level:
    com.carddemo.batch: DEBUG
    org.springframework.batch: INFO
    org.postgresql: WARN
    root: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# =====================================================================================
# ACTUATOR ENDPOINTS FOR MONITORING
# =====================================================================================
management:
  endpoints:
    web:
      exposure:
        include: "health,metrics,info,batch"
  endpoint:
    health:
      show-details: "when-authorized"
  metrics:
    export:
      prometheus:
        enabled: true

# =====================================================================================
# PROFILE-SPECIFIC OVERRIDES
# =====================================================================================
---
spring:
  config:
    activate:
      on-profile: "production"
      
logging:
  level:
    com.carddemo.batch: INFO
    root: WARN
    
spring:
  datasource:
    hikari:
      maximum-pool-size: 100
      connection-timeout: 60000

---  
spring:
  config:
    activate:
      on-profile: "development"
      
logging:
  level:
    com.carddemo.batch: TRACE
    org.springframework.batch: DEBUG
    
spring:
  datasource:
    hikari:
      maximum-pool-size: 20
      leak-detection-threshold: 30000