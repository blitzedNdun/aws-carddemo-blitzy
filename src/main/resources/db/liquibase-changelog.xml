<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.25.xsd">

    <!-- 
    Master Liquibase Changelog for CardDemo VSAM-to-PostgreSQL Migration
    
    This master changelog orchestrates all database schema migrations and data loading
    for the complete transformation from IBM COBOL/CICS/VSAM to modern PostgreSQL.
    
    Migration Strategy:
    - V1-V10: Core schema creation (tables, indexes, views, partitions, settings)
    - V20-V28: Initial data loading from ASCII sources
    
    Features:
    - Semantic versioning with rollback support
    - Environment-specific contexts (dev, test, prod)
    - Checksums for validation and integrity
    - Atomic transactions per changeset
    -->

    <!-- =================================================================== -->
    <!-- SCHEMA CREATION MIGRATIONS (V1-V10) -->
    <!-- =================================================================== -->

    <!-- V1: User Management System - Replaces VSAM USRSEC dataset -->
    <include file="migration/V1__create_users_table.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V2: Customer Management - Replaces VSAM CUSTDATA dataset -->
    <include file="migration/V2__create_customers_table.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V3: Account Management - Replaces VSAM ACCTDATA dataset -->
    <include file="migration/V3__create_accounts_table.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V4: Card Management - Replaces VSAM CARDDATA dataset -->
    <include file="migration/V4__create_cards_table.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V5: Transaction Processing - Replaces VSAM TRANSACT dataset -->
    <include file="migration/V5__create_transactions_table.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V6: Reference Data - Replaces ASCII reference files -->
    <include file="migration/V6__create_reference_tables.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V7: Index Strategy - Replaces VSAM alternate indexes -->
    <include file="migration/V7__create_indexes.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V8: Materialized Views - Optimized cross-reference queries -->
    <include file="migration/V8__create_materialized_views.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V9: Partitioning Strategy - High-performance transaction processing -->
    <include file="migration/V9__create_partitions.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V10: Database Configuration - Enterprise-grade settings -->
    <include file="migration/V10__configure_database_settings.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- =================================================================== -->
    <!-- DATA LOADING MIGRATIONS (V20-V28) -->
    <!-- =================================================================== -->

    <!-- V20: Initial User Data - System accounts and roles -->
    <include file="migration/data/V20__load_users_initial_data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V21: Customer Data - From custdata.txt -->
    <include file="migration/data/V21__load_customers_data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V22: Account Data - From acctdata.txt -->
    <include file="migration/data/V22__load_accounts_data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V23: Card Data - From carddata.txt and cardxref.txt -->
    <include file="migration/data/V23__load_cards_data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V24: Transaction Type Reference - From trantype.txt -->
    <include file="migration/data/V24__load_transaction_types_data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V25: Transaction Category Reference - From trancatg.txt -->
    <include file="migration/data/V25__load_transaction_categories_data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V26: Disclosure Group Reference - From discgrp.txt -->
    <include file="migration/data/V26__load_disclosure_groups_data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V27: Transaction Category Balance Reference - From tcatbal.txt -->
    <include file="migration/data/V27__load_transaction_category_balances_data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- V28: Transaction Data - From dailytran.txt -->
    <include file="migration/data/V28__load_transactions_data.sql" relativeToChangelogFile="true">
        <validCheckSum>ANY</validCheckSum>
    </include>

    <!-- =================================================================== -->
    <!-- ENVIRONMENT-SPECIFIC CONFIGURATIONS -->
    <!-- =================================================================== -->

    <!-- Development Environment - Additional test data and debugging features -->
    <changeSet id="dev-environment-setup" author="blitzy-agent" context="dev">
        <comment>Development environment specific configurations</comment>
        <sql>
            -- Enable additional logging for development
            SET log_statement = 'all';
            SET log_min_duration_statement = 0;
            
            -- Create development-specific schemas
            CREATE SCHEMA IF NOT EXISTS dev_sandbox;
            
            -- Grant additional permissions for development
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO carddemo_dev;
            GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO carddemo_dev;
        </sql>
        <rollback>
            <sql>
                -- Restore production logging levels
                SET log_statement = 'none';
                SET log_min_duration_statement = -1;
                
                -- Remove development schema
                DROP SCHEMA IF EXISTS dev_sandbox CASCADE;
            </sql>
        </rollback>
    </changeSet>

    <!-- Test Environment - Performance monitoring and validation -->
    <changeSet id="test-environment-setup" author="blitzy-agent" context="test">
        <comment>Test environment specific configurations</comment>
        <sql>
            -- Enable performance monitoring
            SET shared_preload_libraries = 'pg_stat_statements';
            
            -- Create test-specific monitoring views
            CREATE OR REPLACE VIEW performance_monitor AS
            SELECT 
                query,
                calls,
                total_exec_time,
                mean_exec_time,
                rows
            FROM pg_stat_statements
            WHERE query LIKE '%carddemo%'
            ORDER BY total_exec_time DESC;
        </sql>
        <rollback>
            <sql>
                DROP VIEW IF EXISTS performance_monitor;
            </sql>
        </rollback>
    </changeSet>

    <!-- Production Environment - Security and performance optimizations -->
    <changeSet id="prod-environment-setup" author="blitzy-agent" context="prod">
        <comment>Production environment specific configurations</comment>
        <sql>
            -- Production security settings
            SET log_statement = 'ddl';
            SET log_min_duration_statement = 1000;
            
            -- Enable row level security
            ALTER TABLE users ENABLE ROW LEVEL SECURITY;
            ALTER TABLE customers ENABLE ROW LEVEL SECURITY;
            ALTER TABLE accounts ENABLE ROW LEVEL SECURITY;
            ALTER TABLE cards ENABLE ROW LEVEL SECURITY;
            ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;
            
            -- Create production monitoring roles
            CREATE ROLE carddemo_monitor;
            GRANT SELECT ON ALL TABLES IN SCHEMA public TO carddemo_monitor;
            GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO carddemo_monitor;
        </sql>
        <rollback>
            <sql>
                -- Disable row level security
                ALTER TABLE users DISABLE ROW LEVEL SECURITY;
                ALTER TABLE customers DISABLE ROW LEVEL SECURITY;
                ALTER TABLE accounts DISABLE ROW LEVEL SECURITY;
                ALTER TABLE cards DISABLE ROW LEVEL SECURITY;
                ALTER TABLE transactions DISABLE ROW LEVEL SECURITY;
                
                -- Remove production monitoring roles
                DROP ROLE IF EXISTS carddemo_monitor;
            </sql>
        </rollback>
    </changeSet>

    <!-- =================================================================== -->
    <!-- VALIDATION AND VERIFICATION CHANGESETS -->
    <!-- =================================================================== -->

    <!-- Post-Migration Validation - Verify data integrity and constraints -->
    <changeSet id="post-migration-validation" author="blitzy-agent" runOnChange="true">
        <comment>Comprehensive validation of migrated data and schema integrity</comment>
        <sql>
            -- Validate referential integrity
            DO $$
            BEGIN
                -- Check user references
                IF EXISTS (SELECT 1 FROM accounts WHERE customer_id NOT IN (SELECT customer_id FROM customers)) THEN
                    RAISE EXCEPTION 'Referential integrity violation: accounts.customer_id';
                END IF;
                
                -- Check card references
                IF EXISTS (SELECT 1 FROM cards WHERE account_id NOT IN (SELECT account_id FROM accounts)) THEN
                    RAISE EXCEPTION 'Referential integrity violation: cards.account_id';
                END IF;
                
                -- Check transaction references
                IF EXISTS (SELECT 1 FROM transactions WHERE card_id NOT IN (SELECT card_id FROM cards)) THEN
                    RAISE EXCEPTION 'Referential integrity violation: transactions.card_id';
                END IF;
                
                -- Validate transaction type references
                IF EXISTS (SELECT 1 FROM transactions WHERE transaction_type_id NOT IN (SELECT transaction_type_id FROM transaction_types)) THEN
                    RAISE EXCEPTION 'Referential integrity violation: transactions.transaction_type_id';
                END IF;
                
                -- Validate transaction category references
                IF EXISTS (SELECT 1 FROM transactions WHERE transaction_category_id NOT IN (SELECT transaction_category_id FROM transaction_categories)) THEN
                    RAISE EXCEPTION 'Referential integrity violation: transactions.transaction_category_id';
                END IF;
                
                RAISE NOTICE 'Post-migration validation completed successfully';
            END $$;
        </sql>
        <rollback>
            <sql>
                -- Rollback validation (no action needed)
                SELECT 'Post-migration validation rollback' as status;
            </sql>
        </rollback>
    </changeSet>

    <!-- Performance Verification - Ensure optimal query performance -->
    <changeSet id="performance-verification" author="blitzy-agent" runOnChange="true">
        <comment>Verify index effectiveness and query performance</comment>
        <sql>
            -- Analyze tables for optimal statistics
            ANALYZE users;
            ANALYZE customers;
            ANALYZE accounts;
            ANALYZE cards;
            ANALYZE transactions;
            ANALYZE transaction_types;
            ANALYZE transaction_categories;
            ANALYZE disclosure_groups;
            ANALYZE transaction_category_balances;
            
            -- Update materialized views
            REFRESH MATERIALIZED VIEW CONCURRENTLY mv_account_summary;
            REFRESH MATERIALIZED VIEW CONCURRENTLY mv_card_cross_reference;
            REFRESH MATERIALIZED VIEW CONCURRENTLY mv_transaction_summary;
            
            -- Verify index usage
            DO $$
            BEGIN
                -- Check if critical indexes exist
                IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_accounts_customer_id') THEN
                    RAISE EXCEPTION 'Critical index missing: idx_accounts_customer_id';
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_cards_account_id') THEN
                    RAISE EXCEPTION 'Critical index missing: idx_cards_account_id';
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_transactions_card_id') THEN
                    RAISE EXCEPTION 'Critical index missing: idx_transactions_card_id';
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_transactions_transaction_date') THEN
                    RAISE EXCEPTION 'Critical index missing: idx_transactions_transaction_date';
                END IF;
                
                RAISE NOTICE 'Performance verification completed successfully';
            END $$;
        </sql>
        <rollback>
            <sql>
                -- Rollback performance verification (no action needed)
                SELECT 'Performance verification rollback' as status;
            </sql>
        </rollback>
    </changeSet>

</databaseChangeLog>