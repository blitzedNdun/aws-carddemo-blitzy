# =============================================================================
# JaCoCo Code Coverage Configuration Properties
# CardDemo Spring Boot Application - COBOL to Java Migration Project
# =============================================================================
# 
# This configuration enforces enterprise-grade quality gates for the CardDemo
# modernization project, ensuring comprehensive test coverage across all
# Spring Boot components while excluding generated code and configuration classes.
#
# Coverage Requirements:
# - 100% business logic coverage for service classes (COBOL translation)
# - 90% overall code coverage enforced by SonarQube quality gates
# - Comprehensive reporting for identifying untested code paths
# - Exclusion of generated code, getters/setters, and configuration classes
# =============================================================================

# =============================================================================
# COVERAGE THRESHOLDS - Package-Level Enforcement
# =============================================================================

# Business Logic - COBOL Translation Service Classes (100% Required)
# These classes contain critical financial business logic translated from COBOL
jacoco.coverage.service.instruction=100
jacoco.coverage.service.branch=100
jacoco.coverage.service.line=100
jacoco.coverage.service.complexity=100
jacoco.coverage.service.method=100
jacoco.coverage.service.class=100

# REST Controllers - API Endpoint Coverage (95% Required)
# Spring Boot REST controllers handling transaction processing
jacoco.coverage.controller.instruction=95
jacoco.coverage.controller.branch=95
jacoco.coverage.controller.line=95
jacoco.coverage.controller.complexity=90
jacoco.coverage.controller.method=95
jacoco.coverage.controller.class=95

# Repository Layer - Data Access Coverage (90% Required)
# JPA repositories for PostgreSQL data operations
jacoco.coverage.repository.instruction=90
jacoco.coverage.repository.branch=85
jacoco.coverage.repository.line=90
jacoco.coverage.repository.complexity=80
jacoco.coverage.repository.method=90
jacoco.coverage.repository.class=90

# Batch Processing - Spring Batch Jobs (100% Required)
# Critical batch processing components for financial operations
jacoco.coverage.batch.instruction=100
jacoco.coverage.batch.branch=100
jacoco.coverage.batch.line=100
jacoco.coverage.batch.complexity=95
jacoco.coverage.batch.method=100
jacoco.coverage.batch.class=100

# Utility Classes - Business Logic Utilities (100% Required)
# Includes CobolDataConverter and other critical business utilities
jacoco.coverage.util.instruction=100
jacoco.coverage.util.branch=100
jacoco.coverage.util.line=100
jacoco.coverage.util.complexity=95
jacoco.coverage.util.method=100
jacoco.coverage.util.class=100

# Overall Application Coverage (90% SonarQube Requirement)
jacoco.coverage.overall.instruction=90
jacoco.coverage.overall.branch=85
jacoco.coverage.overall.line=90
jacoco.coverage.overall.complexity=80
jacoco.coverage.overall.method=85
jacoco.coverage.overall.class=85

# =============================================================================
# EXCLUSION PATTERNS - Generated and Configuration Code
# =============================================================================

# JPA Entity Classes - Exclude Generated Methods
# Excludes getters, setters, equals, hashCode, toString methods
jacoco.exclude.entity.patterns=**/*Entity.class,\
                              **/*$Builder.class,\
                              **/entity/**/*$*.class

# Spring Boot Configuration Classes
# Excludes Spring configuration and auto-configuration classes
jacoco.exclude.config.patterns=**/*Config.class,\
                               **/*Configuration.class,\
                               **/*Properties.class,\
                               **/config/**/*.class,\
                               **/*AutoConfiguration.class

# Generated Code Patterns
# Excludes Lombok-generated code and other auto-generated classes
jacoco.exclude.generated.patterns=**/*$Generated.class,\
                                  **/*$Builder.class,\
                                  **/*$*$*.class,\
                                  **/generated/**/*.class

# Spring Boot Application Main Classes
# Excludes main application entry points
jacoco.exclude.main.patterns=**/*Application.class,\
                             **/Application.class,\
                             **/*ApplicationRunner.class

# Test-Related Exclusions
# Excludes test configuration and helper classes
jacoco.exclude.test.patterns=**/*Test*.class,\
                             **/*IT.class,\
                             **/test/**/*.class,\
                             **/*TestConfiguration.class

# Third-Party Integration Exclusions
# Excludes external library integration code where appropriate
jacoco.exclude.integration.patterns=**/integration/**/*Adapter.class,\
                                    **/integration/**/*Wrapper.class

# =============================================================================
# REPORT GENERATION CONFIGURATION
# =============================================================================

# HTML Report Settings
jacoco.report.html.enabled=true
jacoco.report.html.outputDirectory=target/site/jacoco
jacoco.report.html.title=CardDemo Code Coverage Report
jacoco.report.html.footer=Generated for COBOL to Java Migration Project
jacoco.report.html.includePackageNames=true
jacoco.report.html.includeClassNames=true
jacoco.report.html.includeSourceFiles=true

# XML Report Settings (SonarQube Integration)
jacoco.report.xml.enabled=true
jacoco.report.xml.outputFile=target/site/jacoco/jacoco.xml
jacoco.report.xml.includePackageNames=true
jacoco.report.xml.includeClassNames=true

# CSV Report Settings (CI/CD Integration)
jacoco.report.csv.enabled=true
jacoco.report.csv.outputFile=target/site/jacoco/jacoco.csv
jacoco.report.csv.includeHeaders=true

# =============================================================================
# PACKAGE-SPECIFIC COVERAGE RULES
# =============================================================================

# Service Package Rules (COBOL Business Logic)
jacoco.rule.service.packages=com.carddemo.service.**
jacoco.rule.service.instruction.minimum=100
jacoco.rule.service.branch.minimum=100
jacoco.rule.service.excludes=

# Controller Package Rules (REST API Layer)
jacoco.rule.controller.packages=com.carddemo.controller.**
jacoco.rule.controller.instruction.minimum=95
jacoco.rule.controller.branch.minimum=95
jacoco.rule.controller.excludes=**/*Config*.class

# Repository Package Rules (Data Access Layer)
jacoco.rule.repository.packages=com.carddemo.repository.**
jacoco.rule.repository.instruction.minimum=90
jacoco.rule.repository.branch.minimum=85
jacoco.rule.repository.excludes=

# Batch Package Rules (Spring Batch Jobs)
jacoco.rule.batch.packages=com.carddemo.batch.**
jacoco.rule.batch.instruction.minimum=100
jacoco.rule.batch.branch.minimum=100
jacoco.rule.batch.excludes=**/*Config*.class

# Utility Package Rules (Business Utilities)
jacoco.rule.util.packages=com.carddemo.util.**
jacoco.rule.util.instruction.minimum=100
jacoco.rule.util.branch.minimum=100
jacoco.rule.util.excludes=

# Entity Package Rules (Relaxed for JPA Entities)
jacoco.rule.entity.packages=com.carddemo.entity.**
jacoco.rule.entity.instruction.minimum=60
jacoco.rule.entity.branch.minimum=50
jacoco.rule.entity.excludes=**/*$Builder.class,**/get*.class,**/set*.class

# =============================================================================
# COVERAGE VERIFICATION SETTINGS
# =============================================================================

# Fail Build on Coverage Violations
jacoco.haltOnFailure=true
jacoco.skipCoverageCheck=false

# Verification Rules
jacoco.verify.rules.enabled=true
jacoco.verify.violationSummary.enabled=true
jacoco.verify.violationSummary.format=HTML

# Coverage Check Scopes
jacoco.check.scope.instruction=ALL
jacoco.check.scope.branch=ALL
jacoco.check.scope.line=ALL
jacoco.check.scope.complexity=ALL
jacoco.check.scope.method=ALL
jacoco.check.scope.class=ALL

# =============================================================================
# INTEGRATION SETTINGS
# =============================================================================

# Maven Surefire Integration
jacoco.maven.surefire.argLine.enabled=true
jacoco.maven.surefire.includes=**/*Test.java,**/*Tests.java
jacoco.maven.surefire.excludes=**/*IT.java,**/*IntegrationTest.java

# Maven Failsafe Integration (Integration Tests)
jacoco.maven.failsafe.argLine.enabled=true
jacoco.maven.failsafe.includes=**/*IT.java,**/*IntegrationTest.java

# SonarQube Integration
jacoco.sonarqube.reportPath=target/site/jacoco/jacoco.xml
jacoco.sonarqube.excludePattern=**/generated/**/*,**/*Config.class,**/*Entity.class

# CI/CD Pipeline Integration
jacoco.ci.reportFormat=XML,HTML,CSV
jacoco.ci.outputDirectory=target/site/jacoco
jacoco.ci.failOnError=true

# =============================================================================
# SPECIALIZED COVERAGE PATTERNS
# =============================================================================

# Financial Calculation Coverage (COBOL COMP-3 Translation)
jacoco.pattern.financial.packages=com.carddemo.util.**/*Converter*,\
                                  com.carddemo.service.**/*Calculation*,\
                                  com.carddemo.service.**/*Interest*,\
                                  com.carddemo.service.**/*Balance*
jacoco.pattern.financial.coverage.minimum=100

# Security-Related Coverage
jacoco.pattern.security.packages=com.carddemo.service.**/*Security*,\
                                 com.carddemo.service.**/*Auth*,\
                                 com.carddemo.controller.**/*Security*
jacoco.pattern.security.coverage.minimum=95

# Transaction Processing Coverage
jacoco.pattern.transaction.packages=com.carddemo.service.**/*Transaction*,\
                                    com.carddemo.controller.**/*Transaction*,\
                                    com.carddemo.batch.**/*Transaction*
jacoco.pattern.transaction.coverage.minimum=100

# =============================================================================
# EXECUTION SETTINGS
# =============================================================================

# Agent Configuration
jacoco.agent.output=file
jacoco.agent.append=false
jacoco.agent.includes=com.carddemo.**
jacoco.agent.excludes=com.carddemo.config.**,com.carddemo.**.*Config*

# Session Management
jacoco.sessionId=carddemo-${maven.build.timestamp}
jacoco.destFile=target/jacoco.exec

# Performance Settings
jacoco.agent.dumpOnExit=true
jacoco.agent.classDumpDir=target/jacoco-dump

# =============================================================================
# END OF CONFIGURATION
# =============================================================================