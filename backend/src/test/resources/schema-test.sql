-- CardDemo Test Database Schema for H2 Database
-- H2 Mode: PostgreSQL for compatibility with main database
-- This schema supports comprehensive testing of COBOL-to-Java migration

-- Create database schema for test environment
CREATE SCHEMA IF NOT EXISTS carddemo;

-- Account data table - maps to Account entity (CVACT01Y.cpy)
CREATE TABLE IF NOT EXISTS account_data (
    account_id BIGINT PRIMARY KEY,
    customer_id BIGINT NOT NULL,
    active_status CHAR(1) DEFAULT 'Y',
    current_balance DECIMAL(15,2) DEFAULT 0.00,
    credit_limit DECIMAL(15,2) NOT NULL,
    cash_credit_limit DECIMAL(15,2) NOT NULL,
    open_date DATE NOT NULL,
    expiration_date DATE,
    reissue_date DATE,
    current_cycle_credit DECIMAL(15,2) DEFAULT 0.00,
    current_cycle_debit DECIMAL(15,2) DEFAULT 0.00,
    address_zip VARCHAR(10),
    group_id VARCHAR(10),
    last_transaction_date DATE,
    disclosure_group_id BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Customer data table - maps to Customer entity (CUSTREC.cpy)
CREATE TABLE IF NOT EXISTS customer_data (
    customer_id BIGINT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    middle_name VARCHAR(20),
    last_name VARCHAR(20) NOT NULL,
    address_line_1 VARCHAR(50),
    address_line_2 VARCHAR(50),
    address_line_3 VARCHAR(50),
    state_code VARCHAR(2),
    country_code VARCHAR(3),
    zip_code VARCHAR(10),
    phone_number_1 VARCHAR(15),
    phone_number_2 VARCHAR(15),
    ssn VARCHAR(11), -- Encrypted field
    government_issued_id VARCHAR(20),
    date_of_birth DATE,
    eft_account_id VARCHAR(20),
    primary_card_holder_indicator CHAR(1) DEFAULT 'Y',
    fico_score INT,
    credit_limit DECIMAL(15,2),
    last_update_timestamp TIMESTAMP,
    created_timestamp TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User security table - maps to UserSecurity entity (CSUSR01Y.cpy)
CREATE TABLE IF NOT EXISTS user_security (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sec_usr_id VARCHAR(8) UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(100) NOT NULL,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL,
    sec_usr_type VARCHAR(1) NOT NULL,
    enabled BOOLEAN NOT NULL DEFAULT TRUE,
    account_non_expired BOOLEAN NOT NULL DEFAULT TRUE,
    account_non_locked BOOLEAN NOT NULL DEFAULT TRUE,
    credentials_non_expired BOOLEAN NOT NULL DEFAULT TRUE,
    failed_login_attempts INT NOT NULL DEFAULT 0,
    last_login TIMESTAMP,
    filler VARCHAR(23),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User business data table - maps to User entity
CREATE TABLE IF NOT EXISTS user_data (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id VARCHAR(20) UNIQUE NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(20),
    status VARCHAR(10) DEFAULT 'ACTIVE',
    user_type VARCHAR(10) DEFAULT 'USER',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Card data table - maps to Card entity (CVACT02Y.cpy)
CREATE TABLE IF NOT EXISTS card_data (
    card_number VARCHAR(16) PRIMARY KEY,
    account_id BIGINT NOT NULL,
    customer_id BIGINT NOT NULL,
    cvv_code VARCHAR(3),
    embossed_name VARCHAR(50),
    expiration_date DATE NOT NULL,
    active_status CHAR(1) DEFAULT 'Y',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (account_id) REFERENCES account_data(account_id),
    FOREIGN KEY (customer_id) REFERENCES customer_data(customer_id)
);

-- Transaction types reference table - maps to TransactionType entity (CVTRA03Y.cpy)
CREATE TABLE IF NOT EXISTS transaction_types (
    transaction_type_code VARCHAR(2) PRIMARY KEY,
    type_description VARCHAR(50) NOT NULL,
    debit_credit_flag CHAR(1) NOT NULL CHECK (debit_credit_flag IN ('D', 'C'))
);

-- Transaction categories reference table - maps to TransactionCategory entity (CVTRA04Y.cpy)
CREATE TABLE IF NOT EXISTS transaction_categories (
    category_code VARCHAR(4) NOT NULL,
    subcategory_code VARCHAR(2) NOT NULL,
    category_description VARCHAR(50) NOT NULL,
    category_name VARCHAR(25) NOT NULL,
    transaction_type_code VARCHAR(2),
    PRIMARY KEY (category_code, subcategory_code),
    FOREIGN KEY (transaction_type_code) REFERENCES transaction_types(transaction_type_code)
);

-- Disclosure groups table - maps to DisclosureGroup entity (CVTRA02Y.cpy)
CREATE TABLE IF NOT EXISTS disclosure_groups (
    disclosure_group_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_group_id VARCHAR(10),
    transaction_type_code VARCHAR(2),
    transaction_category_code VARCHAR(4),
    interest_rate DECIMAL(6,4) NOT NULL,
    terms_text TEXT,
    disclosure_group_name VARCHAR(50),
    promotional_rate DECIMAL(6,4),
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(50),
    updated_by VARCHAR(50),
    effective_date DATE,
    expiration_date DATE,
    description TEXT,
    group_name VARCHAR(50)
);

-- Transaction data table - maps to Transaction entity (CVTRA05Y.cpy)
-- Using partitioning for better performance with large datasets
CREATE TABLE IF NOT EXISTS transactions (
    transaction_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id BIGINT NOT NULL,
    card_number VARCHAR(16),
    transaction_type_code VARCHAR(2) NOT NULL,
    category_code VARCHAR(4),
    subcategory_code VARCHAR(2),
    source VARCHAR(10),
    description VARCHAR(100),
    amount DECIMAL(15,2) NOT NULL,
    merchant_id VARCHAR(15),
    merchant_name VARCHAR(100),
    merchant_city VARCHAR(50),
    merchant_zip VARCHAR(10),
    original_timestamp TIMESTAMP,
    processed_timestamp TIMESTAMP,
    transaction_date DATE NOT NULL,
    authorization_code VARCHAR(6),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Transaction category balance table - maps to TransactionCategoryBalance entity
CREATE TABLE IF NOT EXISTS transaction_category_balance (
    account_id BIGINT NOT NULL,
    category_code VARCHAR(4) NOT NULL,
    balance_date DATE NOT NULL,
    balance DECIMAL(15,2) DEFAULT 0.00,
    PRIMARY KEY (account_id, category_code, balance_date),
    FOREIGN KEY (account_id) REFERENCES account_data(account_id)
);

-- Daily transaction table - maps to DailyTransaction entity (CVTRA06Y.cpy)
CREATE TABLE IF NOT EXISTS daily_transactions (
    transaction_id VARCHAR(16) PRIMARY KEY,
    account_id BIGINT,
    type_code VARCHAR(2),
    category_code VARCHAR(4),
    source VARCHAR(10),
    description VARCHAR(100),
    amount DECIMAL(15,2) NOT NULL,
    merchant_id VARCHAR(15),
    merchant_name VARCHAR(100),
    merchant_city VARCHAR(50),
    merchant_zip VARCHAR(10),
    card_number VARCHAR(16),
    original_timestamp TIMESTAMP,
    processed_timestamp TIMESTAMP,
    transaction_date DATE NOT NULL,
    processing_status VARCHAR(20) DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Card cross-reference table - maps to CardXref entity (CVACT03Y.cpy)
CREATE TABLE IF NOT EXISTS card_xref (
    xref_card_num VARCHAR(16) NOT NULL,
    xref_cust_id BIGINT NOT NULL,
    xref_acct_id BIGINT NOT NULL,
    PRIMARY KEY (xref_card_num, xref_cust_id, xref_acct_id),
    FOREIGN KEY (xref_card_num) REFERENCES card_data(card_number),
    FOREIGN KEY (xref_cust_id) REFERENCES customer_data(customer_id),
    FOREIGN KEY (xref_acct_id) REFERENCES account_data(account_id)
);

-- Account closure table - maps to AccountClosure entity  
CREATE TABLE IF NOT EXISTS account_closure (
    closure_request_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id BIGINT NOT NULL,
    closure_reason_code VARCHAR(10) NOT NULL,
    requested_date DATE NOT NULL,
    closure_date DATE,
    final_balance DECIMAL(15,2) DEFAULT 0.00,
    closure_status VARCHAR(20) DEFAULT 'PENDING',
    notification_sent BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (account_id) REFERENCES account_data(account_id)
);

-- Statement table - maps to Statement entity (complete definition matching entity)
CREATE TABLE IF NOT EXISTS statements (
    statement_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id BIGINT NOT NULL,
    statement_date DATE NOT NULL,
    current_balance DECIMAL(12,2) NOT NULL,
    previous_balance DECIMAL(12,2),
    minimum_payment_amount DECIMAL(12,2),
    payment_due_date DATE,
    cycle_start_date DATE,
    cycle_end_date DATE,
    statement_status CHAR(1),
    total_credits DECIMAL(12,2),
    total_debits DECIMAL(12,2),
    interest_charges DECIMAL(12,2),
    fees DECIMAL(12,2),
    credit_limit DECIMAL(12,2),
    available_credit DECIMAL(12,2),
    created_date TIMESTAMP,
    last_updated_date TIMESTAMP,
    created_by VARCHAR(8),
    statement_file_path VARCHAR(255),
    cash_advance_limit DECIMAL(12,2),
    cash_advance_balance DECIMAL(12,2),
    FOREIGN KEY (account_id) REFERENCES account_data(account_id)
);

-- Report table - maps to Report entity
CREATE TABLE IF NOT EXISTS report (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    report_type VARCHAR(50) NOT NULL,
    start_date DATE,
    end_date DATE,
    status VARCHAR(20) DEFAULT 'PENDING',
    format VARCHAR(10) DEFAULT 'PDF',
    file_path VARCHAR(500),
    user_id VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Fee table - maps to Fee entity
CREATE TABLE IF NOT EXISTS fees (
    fee_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id BIGINT NOT NULL,
    fee_type VARCHAR(30) NOT NULL,
    fee_amount DECIMAL(15,2) NOT NULL,
    assessment_date DATE NOT NULL,
    posting_date DATE,
    fee_status VARCHAR(20) DEFAULT 'ASSESSED',
    calculation_reference VARCHAR(100),
    description VARCHAR(200),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (account_id) REFERENCES account_data(account_id)
);

-- Interest rate table - maps to InterestRate entity
CREATE TABLE IF NOT EXISTS interest_rate (
    rate_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_group_id VARCHAR(10),
    transaction_type_code VARCHAR(2),
    current_apr DECIMAL(6,4) NOT NULL,
    promotional_rate DECIMAL(6,4),
    effective_date DATE NOT NULL,
    expiration_date DATE,
    daily_rate DECIMAL(10,8),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Notification table - maps to Notification entity
CREATE TABLE IF NOT EXISTS notifications (
    notification_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id BIGINT NOT NULL,
    notification_type VARCHAR(20) NOT NULL,
    channel_address VARCHAR(100),
    template_id VARCHAR(50),
    template_variables TEXT,
    delivery_status VARCHAR(20) DEFAULT 'PENDING',
    retry_count INT DEFAULT 0,
    max_retries INT DEFAULT 3,
    priority INT DEFAULT 5,
    opt_out_checked BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    sent_at TIMESTAMP,
    delivered_at TIMESTAMP,
    failure_reason VARCHAR(500),
    FOREIGN KEY (customer_id) REFERENCES customer_data(customer_id)
);

-- Dispute table - maps to Dispute entity
CREATE TABLE IF NOT EXISTS disputes (
    dispute_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    transaction_id BIGINT,
    account_id BIGINT NOT NULL,
    dispute_type VARCHAR(25) NOT NULL,
    status VARCHAR(20) DEFAULT 'OPEN',
    reason_code VARCHAR(10),
    description VARCHAR(1000),
    provisional_credit_amount DECIMAL(12,2),
    created_date DATE NOT NULL,
    resolution_date DATE,
    dispute_amount DECIMAL(12,2),
    provisional_credit_eligible BOOLEAN,
    provisional_credit_issued BOOLEAN,
    provisional_credit_date TIMESTAMP,
    provisional_txn_id VARCHAR(50),
    chargeback_initiated BOOLEAN,
    chargeback_case_id VARCHAR(50),
    chargeback_date TIMESTAMP,
    merchant_response_received BOOLEAN,
    merchant_response_date TIMESTAMP,
    merchant_response_type VARCHAR(20),
    last_updated_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (account_id) REFERENCES account_data(account_id)
);

-- Archive table - maps to Archive entity
CREATE TABLE IF NOT EXISTS archive (
    archive_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    data_type VARCHAR(50) NOT NULL,
    archive_date DATE NOT NULL,
    retention_period INT NOT NULL,
    storage_path VARCHAR(500),
    legal_hold BOOLEAN DEFAULT FALSE,
    compression_type VARCHAR(20),
    metadata TEXT,
    expiration_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Configuration table - maps to Configuration entity (used by ConfigurationService)
CREATE TABLE IF NOT EXISTS configuration (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    environment VARCHAR(10) NOT NULL,
    name VARCHAR(100) NOT NULL,
    config_key VARCHAR(200) NOT NULL,
    category VARCHAR(50) NOT NULL,
    config_value VARCHAR(4000) NOT NULL,
    description VARCHAR(1000),
    version INT NOT NULL DEFAULT 1,
    active BOOLEAN NOT NULL DEFAULT FALSE,
    requires_validation BOOLEAN NOT NULL DEFAULT FALSE,
    last_modified TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR(50),
    created_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(50),
    entity_version BIGINT DEFAULT 0,
    CONSTRAINT uk_config_env_key_version UNIQUE (environment, config_key, version),
    CONSTRAINT uk_config_env_key_active UNIQUE (environment, config_key, active)
);

-- Create indexes for Configuration table
CREATE INDEX IF NOT EXISTS idx_config_env_key ON configuration (environment, config_key);
CREATE INDEX IF NOT EXISTS idx_config_category ON configuration (category);
CREATE INDEX IF NOT EXISTS idx_config_active ON configuration (active);
CREATE INDEX IF NOT EXISTS idx_config_last_modified ON configuration (last_modified);

-- System configuration table - maps to SystemConfiguration entity
CREATE TABLE IF NOT EXISTS system_configuration (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    config_category VARCHAR(50) NOT NULL,
    config_key VARCHAR(100) NOT NULL,
    config_value TEXT,
    data_type VARCHAR(20) DEFAULT 'STRING',
    description TEXT,
    default_value TEXT,
    validation_rule VARCHAR(500),
    version_number INT DEFAULT 1,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_modified_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (config_category, config_key)
);

-- Authorization table - maps to Authorization entity
CREATE TABLE IF NOT EXISTS authorization_data (
    authorization_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    card_number VARCHAR(16) NOT NULL,
    account_id BIGINT NOT NULL,
    transaction_amount DECIMAL(15,2) NOT NULL,
    authorization_code VARCHAR(6),
    approval_status VARCHAR(10) DEFAULT 'PENDING',
    decline_reason_code VARCHAR(5),
    request_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    response_timestamp TIMESTAMP,
    processing_time INT,
    fraud_score DECIMAL(5,2),
    velocity_check_result BOOLEAN,
    merchant_id BIGINT,
    FOREIGN KEY (card_number) REFERENCES card_data(card_number),
    FOREIGN KEY (account_id) REFERENCES account_data(account_id)
);

-- Settlement table - maps to Settlement entity
CREATE TABLE IF NOT EXISTS settlement (
    settlement_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    transaction_id VARCHAR(16),
    authorization_id BIGINT,
    merchant_id VARCHAR(15),
    merchant_name VARCHAR(100),
    settlement_amount DECIMAL(15,2) NOT NULL,
    settlement_date DATE NOT NULL,
    processed_date DATE,
    settlement_status VARCHAR(20) DEFAULT 'PENDING',
    batch_id VARCHAR(20),
    acquirer_reference_number VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Fee transaction table - maps to FeeTransaction entity
CREATE TABLE IF NOT EXISTS fee_transaction (
    fee_transaction_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fee_id BIGINT NOT NULL,
    transaction_type VARCHAR(20) NOT NULL,
    posting_status VARCHAR(20) DEFAULT 'PENDING',
    amount DECIMAL(15,2) NOT NULL,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (fee_id) REFERENCES fees(fee_id)
);

-- Fee schedule table - maps to FeeSchedule entity
CREATE TABLE IF NOT EXISTS fee_schedule (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fee_type VARCHAR(30) NOT NULL,
    account_type VARCHAR(20),
    fee_amount DECIMAL(15,2),
    fee_percentage DECIMAL(5,4),
    waiver_conditions TEXT,
    effective_date DATE NOT NULL,
    expiration_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Audit log table - maps to AuditLog entity
CREATE TABLE IF NOT EXISTS audit_log (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(50),
    event_type VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    source_ip VARCHAR(45),
    resource_accessed VARCHAR(200),
    action_performed VARCHAR(100),
    outcome VARCHAR(20),
    correlation_id VARCHAR(100),
    integrity_hash VARCHAR(256)
);

-- Add foreign key constraints for account_data
ALTER TABLE account_data ADD FOREIGN KEY (customer_id) REFERENCES customer_data(customer_id);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_account_customer ON account_data(customer_id);
CREATE INDEX IF NOT EXISTS idx_transaction_account ON transactions(account_id);
CREATE INDEX IF NOT EXISTS idx_transaction_date ON transactions(transaction_date);
CREATE INDEX IF NOT EXISTS idx_card_account ON card_data(account_id);
CREATE INDEX IF NOT EXISTS idx_user_username ON user_security(username);
CREATE INDEX IF NOT EXISTS idx_user_sec_usr_id ON user_security(sec_usr_id);
CREATE INDEX IF NOT EXISTS idx_statement_account ON statements(account_id);
CREATE INDEX IF NOT EXISTS idx_fee_account ON fees(account_id);
CREATE INDEX IF NOT EXISTS idx_notification_customer ON notifications(customer_id);
CREATE INDEX IF NOT EXISTS idx_dispute_account ON disputes(account_id);
CREATE INDEX IF NOT EXISTS idx_authorization_card ON authorization_data(card_number);
CREATE INDEX IF NOT EXISTS idx_authorization_account ON authorization_data(account_id);
CREATE INDEX IF NOT EXISTS idx_closure_account ON account_closure(account_id);

-- Add foreign key constraints after all tables are created
-- Drop constraints first if they exist to avoid conflicts
ALTER TABLE transactions DROP CONSTRAINT IF EXISTS fk_transaction_account;
ALTER TABLE transactions DROP CONSTRAINT IF EXISTS fk_transaction_card;
ALTER TABLE transactions DROP CONSTRAINT IF EXISTS fk_transaction_type;
ALTER TABLE transactions DROP CONSTRAINT IF EXISTS fk_transaction_category;

ALTER TABLE transactions ADD CONSTRAINT fk_transaction_account 
    FOREIGN KEY (account_id) REFERENCES account_data(account_id);
ALTER TABLE transactions ADD CONSTRAINT fk_transaction_card 
    FOREIGN KEY (card_number) REFERENCES card_data(card_number);
ALTER TABLE transactions ADD CONSTRAINT fk_transaction_type 
    FOREIGN KEY (transaction_type_code) REFERENCES transaction_types(transaction_type_code);
ALTER TABLE transactions ADD CONSTRAINT fk_transaction_category 
    FOREIGN KEY (category_code, subcategory_code) REFERENCES transaction_categories(category_code, subcategory_code);

-- Insert reference data for transaction types
MERGE INTO transaction_types (transaction_type_code, type_description, debit_credit_flag) KEY(transaction_type_code) VALUES
('01', 'Purchase', 'D'),
('02', 'Cash Advance', 'D'),
('03', 'Payment', 'C'),
('04', 'Credit Adjustment', 'C'),
('05', 'Debit Adjustment', 'D'),
('06', 'Interest Charge', 'D'),
('07', 'Late Fee', 'D'),
('08', 'Annual Fee', 'D'),
('09', 'Over Limit Fee', 'D'),
('10', 'Foreign Transaction Fee', 'D');

-- Insert reference data for transaction categories
MERGE INTO transaction_categories (category_code, subcategory_code, category_description, category_name, transaction_type_code) KEY(category_code, subcategory_code) VALUES
('0100', '01', 'Retail Purchase', 'Retail', '01'),
('0100', '02', 'Online Purchase', 'Online', '01'),
('0200', '01', 'ATM Cash Advance', 'ATM Cash', '02'),
('0200', '02', 'Over Counter Cash', 'Counter Cash', '02'),
('0300', '01', 'Electronic Payment', 'Electronic', '03'),
('0300', '02', 'Check Payment', 'Check', '03'),
('0400', '01', 'Merchandise Return', 'Return', '04'),
('0400', '02', 'Service Credit', 'Service', '04'),
('0500', '01', 'Chargeback Debit', 'Chargeback', '05'),
('0600', '01', 'Purchase Interest', 'Interest', '06'),
('0700', '01', 'Late Payment Fee', 'Late Fee', '07'),
('0800', '01', 'Annual Membership', 'Annual', '08'),
('0900', '01', 'Credit Limit Fee', 'Over Limit', '09'),
('1000', '01', 'International Fee', 'Foreign', '10');

-- Insert basic system configuration
MERGE INTO system_configuration (config_category, config_key, config_value, description, data_type) KEY(config_category, config_key) VALUES
('SYSTEM', 'DEFAULT_CREDIT_LIMIT', '1000.00', 'Default credit limit for new accounts', 'DECIMAL'),
('SYSTEM', 'MAX_TRANSACTION_AMOUNT', '50000.00', 'Maximum single transaction amount', 'DECIMAL'),
('SYSTEM', 'INTEREST_RATE_DEFAULT', '19.99', 'Default APR for new accounts', 'DECIMAL'),
('SYSTEM', 'LATE_FEE_AMOUNT', '35.00', 'Standard late payment fee', 'DECIMAL'),
('SYSTEM', 'FOREIGN_TX_FEE_RATE', '3.00', 'Foreign transaction fee percentage', 'DECIMAL');

COMMIT;