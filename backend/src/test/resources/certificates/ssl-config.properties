# Spring Boot SSL Configuration Properties for Test Environment
# CardDemo Application - SSL/TLS Security Configuration
# Environment: Test
# Version: v2.1.0

# =============================================================================
# SERVER SSL CONFIGURATION
# =============================================================================

# SSL/TLS Protocol Configuration
server.ssl.enabled=true
server.ssl.protocol=TLS
server.ssl.enabled-protocols=TLSv1.2,TLSv1.3

# Keystore Configuration for Server Certificate
server.ssl.key-store=classpath:certificates/test-keystore.p12
server.ssl.key-store-type=PKCS12
server.ssl.key-store-password=carddemo-test-keystore-password
server.ssl.key-alias=carddemo-test-server
server.ssl.key-password=carddemo-test-key-password

# Truststore Configuration for Client Certificate Verification
server.ssl.trust-store=classpath:certificates/test-truststore.p12
server.ssl.trust-store-type=PKCS12
server.ssl.trust-store-password=carddemo-test-truststore-password

# Client Authentication Configuration for Mutual TLS
server.ssl.client-auth=want

# =============================================================================
# CIPHER SUITE CONFIGURATION FOR SECURITY COMPLIANCE
# =============================================================================

# TLSv1.2 and TLSv1.3 Compatible Cipher Suites
# Prioritized for financial services security requirements
server.ssl.ciphers=TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256

# =============================================================================
# SPRING BOOT SSL CONFIGURATION
# =============================================================================

# Application Port Configuration for HTTPS
server.port=8443

# SSL Session Configuration
server.ssl.session.cache-size=10000
server.ssl.session.timeout=600

# =============================================================================
# ACTUATOR SSL CONFIGURATION FOR MONITORING
# =============================================================================

# Actuator Management Port SSL Configuration
management.server.ssl.enabled=true
management.server.ssl.key-store=${server.ssl.key-store}
management.server.ssl.key-store-type=${server.ssl.key-store-type}
management.server.ssl.key-store-password=${server.ssl.key-store-password}
management.server.ssl.key-alias=${server.ssl.key-alias}
management.server.ssl.key-password=${server.ssl.key-password}
management.server.ssl.trust-store=${server.ssl.trust-store}
management.server.ssl.trust-store-type=${server.ssl.trust-store-type}
management.server.ssl.trust-store-password=${server.ssl.trust-store-password}
management.server.ssl.protocol=${server.ssl.protocol}
management.server.ssl.enabled-protocols=${server.ssl.enabled-protocols}
management.server.ssl.ciphers=${server.ssl.ciphers}
management.server.ssl.client-auth=none
management.server.port=8543

# =============================================================================
# DATABASE SSL CONFIGURATION
# =============================================================================

# PostgreSQL SSL Connection Configuration
spring.datasource.hikari.data-source-properties.ssl=true
spring.datasource.hikari.data-source-properties.sslmode=require
spring.datasource.hikari.data-source-properties.sslcert=classpath:certificates/test-client.crt
spring.datasource.hikari.data-source-properties.sslkey=classpath:certificates/test-client.key
spring.datasource.hikari.data-source-properties.sslrootcert=classpath:certificates/test-ca.crt

# =============================================================================
# REDIS SSL CONFIGURATION
# =============================================================================

# Redis SSL Configuration for Session Store
spring.data.redis.ssl.enabled=true
spring.data.redis.ssl.key-store=${server.ssl.key-store}
spring.data.redis.ssl.key-store-type=${server.ssl.key-store-type}
spring.data.redis.ssl.key-store-password=${server.ssl.key-store-password}
spring.data.redis.ssl.trust-store=${server.ssl.trust-store}
spring.data.redis.ssl.trust-store-type=${server.ssl.trust-store-type}
spring.data.redis.ssl.trust-store-password=${server.ssl.trust-store-password}

# =============================================================================
# REST TEMPLATE SSL CONFIGURATION
# =============================================================================

# HTTP Client SSL Configuration for Service-to-Service Communication
spring.cloud.gateway.httpclient.ssl.use-insecure-trust-manager=false
spring.cloud.gateway.httpclient.ssl.trusted-x509-certificates=classpath:certificates/test-ca.crt
spring.cloud.gateway.httpclient.ssl.key-store=${server.ssl.key-store}
spring.cloud.gateway.httpclient.ssl.key-store-type=${server.ssl.key-store-type}
spring.cloud.gateway.httpclient.ssl.key-store-password=${server.ssl.key-store-password}

# =============================================================================
# LOGGING CONFIGURATION FOR SSL/TLS
# =============================================================================

# SSL/TLS Debugging Configuration for Test Environment
logging.level.javax.net.ssl=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG
logging.level.org.springframework.security.web=DEBUG
logging.level.org.springframework.boot.web.embedded.tomcat.TomcatWebServer=INFO

# =============================================================================
# SECURITY HEADERS CONFIGURATION
# =============================================================================

# HTTP Security Headers for HTTPS Enforcement
server.ssl.security.require-ssl=true
spring.security.headers.content-security-policy=default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';
spring.security.headers.frame-options=DENY
spring.security.headers.content-type-options=nosniff
spring.security.headers.xss-protection=1; mode=block
spring.security.headers.referrer-policy=strict-origin-when-cross-origin

# =============================================================================
# TEST ENVIRONMENT SPECIFIC CONFIGURATIONS
# =============================================================================

# Test Certificate Validation Settings
server.ssl.trust-store.provider=SUN
server.ssl.key-store.provider=SUN

# Certificate Revocation Checking for Test Environment
security.ssl.ocsp.enabled=false
security.ssl.crl.enabled=false

# Test Environment Certificate Path Validation
server.ssl.certificate.path-validation.enabled=true
server.ssl.certificate.path-validation.max-path-length=3

# =============================================================================
# MUTUAL TLS CONFIGURATION FOR MICROSERVICES
# =============================================================================

# Mutual TLS Settings for Service-to-Service Authentication
server.ssl.client-auth=want
server.ssl.verify-client=true
server.ssl.need-client-auth=false
server.ssl.want-client-auth=true

# Client Certificate Subject Validation
security.ssl.client.certificate.subject-pattern=CN=carddemo-.*,OU=Test,O=CardDemo,C=US

# =============================================================================
# PERFORMANCE AND TIMEOUT CONFIGURATIONS
# =============================================================================

# SSL Handshake Timeout Configuration
server.ssl.handshake-timeout=30000
server.ssl.connection-timeout=60000

# SSL Session Reuse Configuration
server.ssl.session.reuse=true
server.ssl.session.cache-size=10000
server.ssl.session.timeout=600

# =============================================================================
# MONITORING AND OBSERVABILITY SSL CONFIGURATION
# =============================================================================

# Prometheus Metrics SSL Configuration
management.metrics.web.server.request.autotime.enabled=true
management.endpoint.prometheus.enabled=true
management.endpoints.web.exposure.include=health,metrics,prometheus,info

# Health Check SSL Configuration
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true
management.health.readiness-state.enabled=true
management.health.liveness-state.enabled=true

# =============================================================================
# SPRING SECURITY SSL INTEGRATION
# =============================================================================

# Spring Security SSL Channel Security
spring.security.require-ssl=true
spring.security.user.name=carddemo-test-user
spring.security.user.password=carddemo-test-password
spring.security.user.roles=USER,ADMIN

# OAuth2 Resource Server SSL Configuration (if applicable)
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://localhost:8443/oauth2/token

# =============================================================================
# SPRING CLOUD GATEWAY SSL CONFIGURATION
# =============================================================================

# Gateway SSL Configuration for Route Forwarding
spring.cloud.gateway.httpclient.ssl.handshake-timeout=10s
spring.cloud.gateway.httpclient.ssl.close-notify-flush-timeout=3s
spring.cloud.gateway.httpclient.ssl.close-notify-read-timeout=3s

# Gateway Default Filters for SSL
spring.cloud.gateway.default-filters[0]=SecureHeaders
spring.cloud.gateway.default-filters[1]=RemoveRequestHeader=X-Forwarded-Proto
spring.cloud.gateway.default-filters[2]=AddRequestHeader=X-Forwarded-Proto, https

# =============================================================================
# TESTING AND VALIDATION CONFIGURATIONS
# =============================================================================

# SSL/TLS Test Validation Settings
test.ssl.verify-hostname=false
test.ssl.verify-certificate=true
test.ssl.allow-self-signed=true

# Test Environment Certificate Generation Settings
test.ssl.key-size=2048
test.ssl.validity-days=365
test.ssl.signature-algorithm=SHA256withRSA

# Test Certificate Subject Alternative Names
test.ssl.subject-alt-names=DNS:localhost,DNS:carddemo-backend,DNS:carddemo-gateway,IP:127.0.0.1,IP:0.0.0.0

# =============================================================================
# ERROR HANDLING AND FALLBACK CONFIGURATIONS
# =============================================================================

# SSL Error Handling Configuration
server.ssl.enabled-on-error=false
server.ssl.force-ssl-on-error=true

# Fallback HTTP Configuration for Development Testing
server.http.enabled=false
server.http.port=8080

# SSL Protocol Fallback Configuration
server.ssl.protocol-fallback=TLSv1.2
server.ssl.cipher-fallback=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384