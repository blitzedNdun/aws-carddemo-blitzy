{
  "metadata": {
    "name": "CardDemo System Test Scenarios",
    "version": "1.0.0",
    "description": "Comprehensive end-to-end test scenarios covering all major user workflows including sign-on, account management, transaction processing, and report generation matching original COBOL program flows",
    "lastUpdated": "2025-01-13",
    "totalScenarios": 24,
    "coverage": "All 24 CICS transactions plus batch operations"
  },
  "configuration": {
    "baseUrl": "http://localhost:8080",
    "apiPrefix": "/api",
    "testDataPath": "src/test/resources/data",
    "timeouts": {
      "authentication": 2000,
      "accountQuery": 1000,
      "transactionUpdate": 1000,
      "menuNavigation": 500
    },
    "retryPolicy": {
      "maxRetries": 3,
      "backoffMs": 500
    }
  },
  "testData": {
    "validUsers": {
      "adminUser": {
        "userId": "ADMIN001",
        "password": "ADMIN123",
        "userType": "A",
        "description": "Administrative user with full access"
      },
      "regularUser": {
        "userId": "USER0001",
        "password": "USER1234",
        "userType": "U",
        "description": "Regular user with limited access"
      }
    },
    "invalidUsers": {
      "wrongPassword": {
        "userId": "USER0001",
        "password": "WRONGPWD",
        "expectedError": "Wrong Password. Try again ..."
      },
      "nonExistentUser": {
        "userId": "BADUSER1",
        "password": "PASSWORD",
        "expectedError": "User not found. Try again ..."
      }
    },
    "sampleAccounts": {
      "validAccount": {
        "accountId": "00000000001",
        "customerId": "000000001",
        "accountStatus": "Active",
        "creditLimit": "5000.00"
      },
      "invalidAccount": {
        "accountId": "99999999999",
        "customerId": "999999999",
        "expectedError": "Account not found"
      }
    },
    "sampleCards": {
      "validCard": {
        "cardNumber": "4000123456781234",
        "accountId": "00000000001",
        "cardStatus": "Active",
        "expiryDate": "12/25"
      }
    },
    "sampleTransactions": {
      "purchaseTransaction": {
        "accountId": "00000000001",
        "amount": "125.50",
        "transactionType": "Purchase",
        "merchantName": "TEST MERCHANT"
      },
      "paymentTransaction": {
        "accountId": "00000000001",
        "amount": "100.00",
        "transactionType": "Payment",
        "description": "Online Payment"
      }
    }
  },
  "scenarios": [
    {
      "scenarioId": "AUTH_001",
      "name": "User Authentication - Valid Admin Login",
      "transactionCode": "CC00",
      "category": "Authentication",
      "priority": "Critical",
      "description": "Test successful admin user authentication and redirect to admin menu",
      "preconditions": [
        "System is running and accessible",
        "Admin user ADMIN001 exists in USRSEC table",
        "User is not currently logged in"
      ],
      "steps": [
        {
          "stepId": "AUTH_001_01",
          "action": "Navigate to sign-on screen",
          "method": "GET",
          "endpoint": "/signin",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["User ID", "Password", "CARDDEMO APPLICATION SIGN-ON"]
          }
        },
        {
          "stepId": "AUTH_001_02",
          "action": "Submit valid admin credentials",
          "method": "POST",
          "endpoint": "/api/auth/signon",
          "requestBody": {
            "userId": "ADMIN001",
            "password": "ADMIN123"
          },
          "expectedResponse": {
            "statusCode": 200,
            "sessionAttributes": {
              "userType": "A",
              "userId": "ADMIN001"
            },
            "redirectTo": "/menus/admin"
          }
        },
        {
          "stepId": "AUTH_001_03",
          "action": "Verify admin menu is displayed",
          "method": "GET",
          "endpoint": "/menus/admin",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Administrative Menu", "User Management", "System Reports"]
          }
        }
      ],
      "expectedOutcome": "User successfully authenticates and accesses admin menu",
      "testType": "positive"
    },
    {
      "scenarioId": "AUTH_002", 
      "name": "User Authentication - Valid Regular User Login",
      "transactionCode": "CC00",
      "category": "Authentication",
      "priority": "Critical",
      "description": "Test successful regular user authentication and redirect to main menu",
      "preconditions": [
        "System is running and accessible",
        "Regular user USER0001 exists in USRSEC table",
        "User is not currently logged in"
      ],
      "steps": [
        {
          "stepId": "AUTH_002_01",
          "action": "Navigate to sign-on screen",
          "method": "GET",
          "endpoint": "/signin",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["User ID", "Password"]
          }
        },
        {
          "stepId": "AUTH_002_02",
          "action": "Submit valid regular user credentials",
          "method": "POST",
          "endpoint": "/api/auth/signon",
          "requestBody": {
            "userId": "USER0001",
            "password": "USER1234"
          },
          "expectedResponse": {
            "statusCode": 200,
            "sessionAttributes": {
              "userType": "U",
              "userId": "USER0001"
            },
            "redirectTo": "/menus/main"
          }
        },
        {
          "stepId": "AUTH_002_03",
          "action": "Verify main menu is displayed",
          "method": "GET",
          "endpoint": "/menus/main",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Main Menu", "Account Management", "Transaction Processing"]
          }
        }
      ],
      "expectedOutcome": "User successfully authenticates and accesses main menu",
      "testType": "positive"
    },
    {
      "scenarioId": "AUTH_003",
      "name": "User Authentication - Invalid Password",
      "transactionCode": "CC00",
      "category": "Authentication",
      "priority": "High",
      "description": "Test authentication failure with wrong password",
      "preconditions": [
        "System is running and accessible",
        "User USER0001 exists in USRSEC table"
      ],
      "steps": [
        {
          "stepId": "AUTH_003_01",
          "action": "Navigate to sign-on screen",
          "method": "GET",
          "endpoint": "/signin",
          "expectedResponse": {
            "statusCode": 200
          }
        },
        {
          "stepId": "AUTH_003_02",
          "action": "Submit invalid password",
          "method": "POST",
          "endpoint": "/api/auth/signon",
          "requestBody": {
            "userId": "USER0001",
            "password": "WRONGPWD"
          },
          "expectedResponse": {
            "statusCode": 400,
            "errorMessage": "Wrong Password. Try again ...",
            "fieldErrors": {
              "password": "highlighted"
            }
          }
        }
      ],
      "expectedOutcome": "Authentication fails with appropriate error message",
      "testType": "negative"
    },
    {
      "scenarioId": "AUTH_004",
      "name": "User Authentication - Non-existent User",
      "transactionCode": "CC00",
      "category": "Authentication",
      "priority": "High",
      "description": "Test authentication failure with non-existent user",
      "preconditions": [
        "System is running and accessible"
      ],
      "steps": [
        {
          "stepId": "AUTH_004_01",
          "action": "Submit non-existent user credentials",
          "method": "POST",
          "endpoint": "/api/auth/signon",
          "requestBody": {
            "userId": "BADUSER1",
            "password": "PASSWORD"
          },
          "expectedResponse": {
            "statusCode": 404,
            "errorMessage": "User not found. Try again ...",
            "fieldErrors": {
              "userId": "highlighted"
            }
          }
        }
      ],
      "expectedOutcome": "Authentication fails with user not found error",
      "testType": "negative"
    },
    {
      "scenarioId": "MENU_001",
      "name": "Main Menu Navigation - Option Selection",
      "transactionCode": "CM00",
      "category": "Navigation",
      "priority": "High",
      "description": "Test main menu option selection and navigation",
      "preconditions": [
        "User is authenticated as regular user",
        "Main menu is displayed"
      ],
      "steps": [
        {
          "stepId": "MENU_001_01",
          "action": "Display main menu options",
          "method": "GET",
          "endpoint": "/menus/main",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["1 - Account Management", "2 - Card Management", "3 - Bill Payment"]
          }
        },
        {
          "stepId": "MENU_001_02",
          "action": "Select account management option",
          "method": "POST",
          "endpoint": "/api/menus/select",
          "requestBody": {
            "option": "1"
          },
          "expectedResponse": {
            "statusCode": 200,
            "redirectTo": "/accounts/view"
          }
        }
      ],
      "expectedOutcome": "User successfully navigates to selected menu option",
      "testType": "positive"
    },
    {
      "scenarioId": "MENU_002",
      "name": "Admin Menu Access Control",
      "transactionCode": "CA00",
      "category": "Navigation",
      "priority": "High",
      "description": "Test admin menu access control for regular users",
      "preconditions": [
        "User is authenticated as regular user"
      ],
      "steps": [
        {
          "stepId": "MENU_002_01",
          "action": "Attempt to access admin menu",
          "method": "GET",
          "endpoint": "/menus/admin",
          "expectedResponse": {
            "statusCode": 403,
            "errorMessage": "No access - Admin Only option..."
          }
        }
      ],
      "expectedOutcome": "Access denied for regular user trying to access admin functions",
      "testType": "negative"
    },
    {
      "scenarioId": "ACCT_001",
      "name": "Account View - Valid Account ID",
      "transactionCode": "CAVW",
      "category": "Account Management",
      "priority": "Critical",
      "description": "Test account information retrieval with valid account ID",
      "preconditions": [
        "User is authenticated",
        "Account 00000000001 exists in ACCTDAT table"
      ],
      "steps": [
        {
          "stepId": "ACCT_001_01",
          "action": "Navigate to account view screen",
          "method": "GET",
          "endpoint": "/accounts/view",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Account ID", "Enter 11-Digit Account"]
          }
        },
        {
          "stepId": "ACCT_001_02",
          "action": "Submit valid account ID",
          "method": "POST",
          "endpoint": "/api/accounts/view",
          "requestBody": {
            "accountId": "00000000001"
          },
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Account Information", "Customer Information"],
            "accountData": {
              "accountId": "00000000001",
              "accountStatus": "Active",
              "creditLimit": "5000.00"
            }
          }
        }
      ],
      "expectedOutcome": "Account information is successfully retrieved and displayed",
      "testType": "positive"
    },
    {
      "scenarioId": "ACCT_002",
      "name": "Account View - Invalid Account ID",
      "transactionCode": "CAVW",
      "category": "Account Management",
      "priority": "High",
      "description": "Test account information retrieval with invalid account ID",
      "preconditions": [
        "User is authenticated"
      ],
      "steps": [
        {
          "stepId": "ACCT_002_01",
          "action": "Submit invalid account ID",
          "method": "POST",
          "endpoint": "/api/accounts/view",
          "requestBody": {
            "accountId": "99999999999"
          },
          "expectedResponse": {
            "statusCode": 404,
            "errorMessage": "Account not found"
          }
        }
      ],
      "expectedOutcome": "Account not found error is displayed",
      "testType": "negative"
    },
    {
      "scenarioId": "ACCT_003",
      "name": "Account Update - Valid Account Data",
      "transactionCode": "CAUP",
      "category": "Account Management",
      "priority": "Critical",
      "description": "Test account information update with valid data",
      "preconditions": [
        "User is authenticated",
        "Account 00000000001 exists and is available for update"
      ],
      "steps": [
        {
          "stepId": "ACCT_003_01",
          "action": "Navigate to account update screen",
          "method": "GET",
          "endpoint": "/accounts/update",
          "expectedResponse": {
            "statusCode": 200
          }
        },
        {
          "stepId": "ACCT_003_02",
          "action": "Lock account for update",
          "method": "POST",
          "endpoint": "/api/accounts/lock",
          "requestBody": {
            "accountId": "00000000001"
          },
          "expectedResponse": {
            "statusCode": 200,
            "lockAcquired": true
          }
        },
        {
          "stepId": "ACCT_003_03",
          "action": "Update account information",
          "method": "PUT",
          "endpoint": "/api/accounts/update",
          "requestBody": {
            "accountId": "00000000001",
            "creditLimit": "6000.00",
            "phoneNumber": "555-123-4567"
          },
          "expectedResponse": {
            "statusCode": 200,
            "updated": true,
            "message": "Account successfully updated"
          }
        }
      ],
      "expectedOutcome": "Account information is successfully updated",
      "testType": "positive"
    },
    {
      "scenarioId": "ACCT_004",
      "name": "Account Update - Record Locked",
      "transactionCode": "CAUP",
      "category": "Account Management",
      "priority": "High",
      "description": "Test account update when record is locked by another user",
      "preconditions": [
        "User is authenticated",
        "Account 00000000001 is locked by another session"
      ],
      "steps": [
        {
          "stepId": "ACCT_004_01",
          "action": "Attempt to lock account for update",
          "method": "POST",
          "endpoint": "/api/accounts/lock",
          "requestBody": {
            "accountId": "00000000001"
          },
          "expectedResponse": {
            "statusCode": 409,
            "errorMessage": "Record is busy - try again later",
            "lockAcquired": false
          }
        }
      ],
      "expectedOutcome": "Record busy error is displayed",
      "testType": "negative"
    },
    {
      "scenarioId": "CARD_001",
      "name": "Credit Card List - Browse Cards",
      "transactionCode": "CCLI",
      "category": "Card Management",
      "priority": "High",
      "description": "Test credit card listing with pagination",
      "preconditions": [
        "User is authenticated",
        "Card data exists in CARDDAT table"
      ],
      "steps": [
        {
          "stepId": "CARD_001_01",
          "action": "Navigate to card list screen",
          "method": "GET",
          "endpoint": "/cards/list",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Credit Card List", "Search Criteria"]
          }
        },
        {
          "stepId": "CARD_001_02",
          "action": "Retrieve first page of cards",
          "method": "GET",
          "endpoint": "/api/cards/list",
          "queryParams": {
            "page": 0,
            "size": 7
          },
          "expectedResponse": {
            "statusCode": 200,
            "cardsReturned": "<=7",
            "pagination": {
              "hasNext": true
            }
          }
        },
        {
          "stepId": "CARD_001_03",
          "action": "Navigate to next page (PF8 equivalent)",
          "method": "GET",
          "endpoint": "/api/cards/list",
          "queryParams": {
            "page": 1,
            "size": 7
          },
          "expectedResponse": {
            "statusCode": 200,
            "cardsReturned": ">=1"
          }
        }
      ],
      "expectedOutcome": "Credit cards are listed with proper pagination",
      "testType": "positive"
    },
    {
      "scenarioId": "CARD_002",
      "name": "Credit Card Detail View",
      "transactionCode": "CCDL",
      "category": "Card Management", 
      "priority": "High",
      "description": "Test credit card detail information display",
      "preconditions": [
        "User is authenticated",
        "Card 4000123456781234 exists in CARDDAT table"
      ],
      "steps": [
        {
          "stepId": "CARD_002_01",
          "action": "Request card details",
          "method": "GET",
          "endpoint": "/api/cards/detail",
          "queryParams": {
            "cardNumber": "4000123456781234"
          },
          "expectedResponse": {
            "statusCode": 200,
            "cardData": {
              "cardNumber": "4000123456781234",
              "accountId": "00000000001",
              "cardStatus": "Active",
              "expiryDate": "12/25"
            },
            "crossReference": {
              "accountLinked": true
            }
          }
        }
      ],
      "expectedOutcome": "Card details are displayed with cross-reference information",
      "testType": "positive"
    },
    {
      "scenarioId": "CARD_003",
      "name": "Credit Card Update - Status Change",
      "transactionCode": "CCUP",
      "category": "Card Management",
      "priority": "Critical",
      "description": "Test credit card status update with business rule validation",
      "preconditions": [
        "User is authenticated with admin privileges",
        "Card 4000123456781234 exists and is in Active status"
      ],
      "steps": [
        {
          "stepId": "CARD_003_01",
          "action": "Navigate to card update screen",
          "method": "GET",
          "endpoint": "/cards/update",
          "expectedResponse": {
            "statusCode": 200
          }
        },
        {
          "stepId": "CARD_003_02",
          "action": "Update card status",
          "method": "PUT",
          "endpoint": "/api/cards/update",
          "requestBody": {
            "cardNumber": "4000123456781234",
            "cardStatus": "Suspended",
            "reason": "Fraud investigation"
          },
          "expectedResponse": {
            "statusCode": 200,
            "updated": true,
            "message": "Card status successfully updated"
          }
        }
      ],
      "expectedOutcome": "Card status is successfully updated with business rule validation",
      "testType": "positive"
    },
    {
      "scenarioId": "TXN_001",
      "name": "Transaction List - Browse Transactions",
      "transactionCode": "CT00",
      "category": "Transaction Processing",
      "priority": "Critical",
      "description": "Test transaction listing with pagination and filtering",
      "preconditions": [
        "User is authenticated",
        "Transaction data exists in TRANSACT table"
      ],
      "steps": [
        {
          "stepId": "TXN_001_01",
          "action": "Navigate to transaction list screen",
          "method": "GET",
          "endpoint": "/transactions/list",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Transaction List", "Account Filter"]
          }
        },
        {
          "stepId": "TXN_001_02",
          "action": "Retrieve transactions for account",
          "method": "GET",
          "endpoint": "/api/transactions/list",
          "queryParams": {
            "accountId": "00000000001",
            "page": 0,
            "size": 10
          },
          "expectedResponse": {
            "statusCode": 200,
            "transactionsReturned": "<=10",
            "pagination": {
              "totalElements": ">=1"
            }
          }
        }
      ],
      "expectedOutcome": "Transactions are listed with proper pagination and filtering",
      "testType": "positive"
    },
    {
      "scenarioId": "TXN_002",
      "name": "Add Transaction - Valid Purchase",
      "transactionCode": "CT02",
      "category": "Transaction Processing",
      "priority": "Critical",
      "description": "Test transaction entry with valid purchase data",
      "preconditions": [
        "User is authenticated",
        "Account 00000000001 exists and is active",
        "Card is linked to account"
      ],
      "steps": [
        {
          "stepId": "TXN_002_01",
          "action": "Navigate to add transaction screen",
          "method": "GET",
          "endpoint": "/transactions/add",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Add Transaction", "Account ID", "Amount"]
          }
        },
        {
          "stepId": "TXN_002_02",
          "action": "Validate account and card cross-reference",
          "method": "POST",
          "endpoint": "/api/transactions/validate",
          "requestBody": {
            "accountId": "00000000001",
            "cardNumber": "4000123456781234"
          },
          "expectedResponse": {
            "statusCode": 200,
            "crossReferenceValid": true
          }
        },
        {
          "stepId": "TXN_002_03",
          "action": "Submit new transaction",
          "method": "POST",
          "endpoint": "/api/transactions/add",
          "requestBody": {
            "accountId": "00000000001",
            "cardNumber": "4000123456781234",
            "amount": "125.50",
            "transactionType": "Purchase",
            "merchantName": "TEST MERCHANT",
            "description": "Test purchase transaction"
          },
          "expectedResponse": {
            "statusCode": 201,
            "transactionId": "generated",
            "balanceUpdated": true,
            "message": "Transaction successfully created"
          }
        }
      ],
      "expectedOutcome": "Transaction is successfully created and account balance is updated",
      "testType": "positive"
    },
    {
      "scenarioId": "TXN_003",
      "name": "Add Transaction - Invalid Cross-Reference",
      "transactionCode": "CT02",
      "category": "Transaction Processing",
      "priority": "High",
      "description": "Test transaction entry with invalid account-card cross-reference",
      "preconditions": [
        "User is authenticated"
      ],
      "steps": [
        {
          "stepId": "TXN_003_01",
          "action": "Submit transaction with invalid cross-reference",
          "method": "POST",
          "endpoint": "/api/transactions/validate",
          "requestBody": {
            "accountId": "00000000001",
            "cardNumber": "4000999999999999"
          },
          "expectedResponse": {
            "statusCode": 400,
            "errorMessage": "Invalid account/card cross-reference",
            "crossReferenceValid": false
          }
        }
      ],
      "expectedOutcome": "Transaction validation fails with cross-reference error",
      "testType": "negative"
    },
    {
      "scenarioId": "PAY_001",
      "name": "Bill Payment - Valid Payment",
      "transactionCode": "CB00",
      "category": "Payment Processing",
      "priority": "Critical",
      "description": "Test bill payment processing with valid payment data",
      "preconditions": [
        "User is authenticated",
        "Account 00000000001 exists with outstanding balance"
      ],
      "steps": [
        {
          "stepId": "PAY_001_01",
          "action": "Navigate to bill payment screen",
          "method": "GET",
          "endpoint": "/payments/entry",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Bill Payment", "Account ID", "Payment Amount"]
          }
        },
        {
          "stepId": "PAY_001_02",
          "action": "Validate payment account",
          "method": "POST",
          "endpoint": "/api/payments/validate-account",
          "requestBody": {
            "accountId": "00000000001"
          },
          "expectedResponse": {
            "statusCode": 200,
            "accountValid": true,
            "currentBalance": "1250.75"
          }
        },
        {
          "stepId": "PAY_001_03",
          "action": "Process payment",
          "method": "POST",
          "endpoint": "/api/payments/process",
          "requestBody": {
            "accountId": "00000000001",
            "paymentAmount": "100.00",
            "paymentMethod": "Online Transfer"
          },
          "expectedResponse": {
            "statusCode": 200,
            "paymentProcessed": true,
            "newBalance": "1150.75",
            "confirmationNumber": "generated"
          }
        }
      ],
      "expectedOutcome": "Payment is successfully processed and account balance is updated",
      "testType": "positive"
    },
    {
      "scenarioId": "PAY_002",
      "name": "Bill Payment - Insufficient Payment Amount",
      "transactionCode": "CB00",
      "category": "Payment Processing",
      "priority": "High",
      "description": "Test bill payment validation with invalid payment amount",
      "preconditions": [
        "User is authenticated"
      ],
      "steps": [
        {
          "stepId": "PAY_002_01",
          "action": "Submit payment with invalid amount",
          "method": "POST",
          "endpoint": "/api/payments/validate",
          "requestBody": {
            "accountId": "00000000001",
            "paymentAmount": "0.00"
          },
          "expectedResponse": {
            "statusCode": 400,
            "errorMessage": "Payment amount must be greater than zero",
            "fieldErrors": {
              "paymentAmount": "highlighted"
            }
          }
        }
      ],
      "expectedOutcome": "Payment validation fails with amount error",
      "testType": "negative"
    },
    {
      "scenarioId": "USER_001",
      "name": "User Management - List Users",
      "transactionCode": "CU00",
      "category": "User Administration",
      "priority": "Medium",
      "description": "Test user listing functionality for admin users",
      "preconditions": [
        "User is authenticated as admin",
        "User data exists in USRSEC table"
      ],
      "steps": [
        {
          "stepId": "USER_001_01",
          "action": "Navigate to user list screen",
          "method": "GET",
          "endpoint": "/users/list",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["User Management", "User Directory"]
          }
        },
        {
          "stepId": "USER_001_02",
          "action": "Retrieve user list",
          "method": "GET",
          "endpoint": "/api/users/list",
          "expectedResponse": {
            "statusCode": 200,
            "usersReturned": ">=1",
            "userData": {
              "includesUserType": true,
              "includesUserStatus": true
            }
          }
        }
      ],
      "expectedOutcome": "User list is displayed with user information",
      "testType": "positive"
    },
    {
      "scenarioId": "USER_002",
      "name": "User Management - Add New User",
      "transactionCode": "CU01",
      "category": "User Administration",
      "priority": "Medium",
      "description": "Test new user creation with role assignment",
      "preconditions": [
        "User is authenticated as admin",
        "User ID NEWUSER1 does not exist"
      ],
      "steps": [
        {
          "stepId": "USER_002_01",
          "action": "Navigate to add user screen",
          "method": "GET",
          "endpoint": "/users/add",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Add User", "User ID", "User Type"]
          }
        },
        {
          "stepId": "USER_002_02",
          "action": "Create new user",
          "method": "POST",
          "endpoint": "/api/users/add",
          "requestBody": {
            "userId": "NEWUSER1",
            "password": "TEMP1234",
            "userType": "U",
            "firstName": "Test",
            "lastName": "User"
          },
          "expectedResponse": {
            "statusCode": 201,
            "userCreated": true,
            "message": "User successfully created"
          }
        }
      ],
      "expectedOutcome": "New user is successfully created with assigned role",
      "testType": "positive"
    },
    {
      "scenarioId": "USER_003",
      "name": "User Management - Update User Information",
      "transactionCode": "CU02",
      "category": "User Administration",
      "priority": "Medium",
      "description": "Test user information update and role modification",
      "preconditions": [
        "User is authenticated as admin",
        "User NEWUSER1 exists"
      ],
      "steps": [
        {
          "stepId": "USER_003_01",
          "action": "Navigate to update user screen",
          "method": "GET",
          "endpoint": "/users/update",
          "expectedResponse": {
            "statusCode": 200
          }
        },
        {
          "stepId": "USER_003_02",
          "action": "Update user information",
          "method": "PUT",
          "endpoint": "/api/users/update",
          "requestBody": {
            "userId": "NEWUSER1",
            "userType": "A",
            "firstName": "Updated",
            "lastName": "User",
            "status": "Active"
          },
          "expectedResponse": {
            "statusCode": 200,
            "userUpdated": true,
            "message": "User information successfully updated"
          }
        }
      ],
      "expectedOutcome": "User information is successfully updated including role change",
      "testType": "positive"
    },
    {
      "scenarioId": "RPT_001",
      "name": "Report Generation - Transaction Report",
      "transactionCode": "CRPT",
      "category": "Reporting",
      "priority": "Medium",
      "description": "Test transaction report generation with date range filtering",
      "preconditions": [
        "User is authenticated",
        "Transaction data exists for report period"
      ],
      "steps": [
        {
          "stepId": "RPT_001_01",
          "action": "Navigate to report menu",
          "method": "GET",
          "endpoint": "/reports/menu",
          "expectedResponse": {
            "statusCode": 200,
            "contains": ["Report Menu", "Transaction Reports"]
          }
        },
        {
          "stepId": "RPT_001_02",
          "action": "Generate transaction report",
          "method": "POST",
          "endpoint": "/api/reports/transactions",
          "requestBody": {
            "startDate": "2025-01-01",
            "endDate": "2025-01-31",
            "reportFormat": "PDF"
          },
          "expectedResponse": {
            "statusCode": 200,
            "reportGenerated": true,
            "reportId": "generated",
            "downloadUrl": "/api/reports/download/{reportId}"
          }
        }
      ],
      "expectedOutcome": "Transaction report is successfully generated and available for download",
      "testType": "positive"
    }
  ],
  "batchJobScenarios": [
    {
      "scenarioId": "BATCH_001",
      "name": "Daily Transaction Posting Job",
      "jobName": "TransactionPostingBatch",
      "category": "Batch Processing",
      "priority": "Critical",
      "description": "Test daily transaction posting batch job execution",
      "preconditions": [
        "Daily transaction file exists",
        "System is in batch processing window"
      ],
      "steps": [
        {
          "stepId": "BATCH_001_01",
          "action": "Trigger transaction posting job",
          "method": "POST",
          "endpoint": "/api/batch/jobs/transaction-posting/start",
          "expectedResponse": {
            "statusCode": 202,
            "jobStarted": true,
            "jobExecutionId": "generated"
          }
        },
        {
          "stepId": "BATCH_001_02",
          "action": "Monitor job execution",
          "method": "GET",
          "endpoint": "/api/batch/jobs/transaction-posting/status/{jobExecutionId}",
          "expectedResponse": {
            "statusCode": 200,
            "jobStatus": "COMPLETED",
            "recordsProcessed": ">=0",
            "errorCount": "0"
          }
        }
      ],
      "expectedOutcome": "Daily transaction posting completes successfully within processing window",
      "testType": "positive",
      "maxExecutionTime": "4 hours"
    },
    {
      "scenarioId": "BATCH_002",
      "name": "Interest Calculation Job",
      "jobName": "InterestCalculationBatch",
      "category": "Batch Processing",
      "priority": "Critical",
      "description": "Test monthly interest calculation batch job",
      "preconditions": [
        "Account balance data is current",
        "Interest rate tables are updated"
      ],
      "steps": [
        {
          "stepId": "BATCH_002_01",
          "action": "Trigger interest calculation job",
          "method": "POST",
          "endpoint": "/api/batch/jobs/interest-calculation/start",
          "expectedResponse": {
            "statusCode": 202,
            "jobStarted": true,
            "jobExecutionId": "generated"
          }
        },
        {
          "stepId": "BATCH_002_02",
          "action": "Verify calculation results",
          "method": "GET",
          "endpoint": "/api/batch/jobs/interest-calculation/results/{jobExecutionId}",
          "expectedResponse": {
            "statusCode": 200,
            "calculationsCompleted": true,
            "accountsProcessed": ">=1",
            "interestTransactionsCreated": ">=0"
          }
        }
      ],
      "expectedOutcome": "Interest calculations complete and interest transactions are generated",
      "testType": "positive",
      "maxExecutionTime": "2 hours"
    },
    {
      "scenarioId": "BATCH_003",
      "name": "Statement Generation Job",
      "jobName": "StatementGenerationBatch",
      "category": "Batch Processing",
      "priority": "High",
      "description": "Test monthly statement generation batch job",
      "preconditions": [
        "Monthly transactions are posted",
        "Account data is current"
      ],
      "steps": [
        {
          "stepId": "BATCH_003_01",
          "action": "Trigger statement generation job",
          "method": "POST",
          "endpoint": "/api/batch/jobs/statement-generation/start",
          "requestBody": {
            "statementMonth": "2025-01",
            "outputFormat": "both"
          },
          "expectedResponse": {
            "statusCode": 202,
            "jobStarted": true,
            "jobExecutionId": "generated"
          }
        },
        {
          "stepId": "BATCH_003_02",
          "action": "Verify statement files generated",
          "method": "GET",
          "endpoint": "/api/batch/jobs/statement-generation/output/{jobExecutionId}",
          "expectedResponse": {
            "statusCode": 200,
            "plainTextStatementsGenerated": true,
            "htmlStatementsGenerated": true,
            "statementsCount": ">=1"
          }
        }
      ],
      "expectedOutcome": "Monthly statements are generated in both plain text and HTML formats",
      "testType": "positive",
      "maxExecutionTime": "3 hours"
    }
  ],
  "validationRules": {
    "fieldValidation": {
      "accountId": {
        "pattern": "^\\d{11}$",
        "errorMessage": "Account ID must be 11 digits"
      },
      "cardNumber": {
        "pattern": "^\\d{16}$",
        "errorMessage": "Card number must be 16 digits"
      },
      "amount": {
        "pattern": "^\\d+\\.\\d{2}$",
        "min": "0.01",
        "max": "99999999.99",
        "errorMessage": "Amount must be positive with 2 decimal places"
      },
      "userId": {
        "pattern": "^[A-Z0-9]{1,8}$",
        "errorMessage": "User ID must be 1-8 alphanumeric characters"
      },
      "password": {
        "minLength": 4,
        "maxLength": 8,
        "errorMessage": "Password must be 4-8 characters"
      }
    },
    "businessRules": {
      "transactionLimits": {
        "dailyLimit": "10000.00",
        "singleTransactionLimit": "5000.00"
      },
      "accountStatus": {
        "validStatuses": ["Active", "Suspended", "Closed"],
        "allowedTransitions": {
          "Active": ["Suspended", "Closed"],
          "Suspended": ["Active", "Closed"],
          "Closed": []
        }
      },
      "cardStatus": {
        "validStatuses": ["Active", "Suspended", "Expired", "Lost", "Stolen"],
        "allowedTransitions": {
          "Active": ["Suspended", "Lost", "Stolen"],
          "Suspended": ["Active"],
          "Expired": [],
          "Lost": [],
          "Stolen": []
        }
      }
    }
  },
  "performanceTargets": {
    "responseTimeTargets": {
      "authentication": "< 2 seconds",
      "accountQueries": "< 1 second", 
      "transactionUpdates": "< 1 second",
      "menuNavigation": "< 0.5 seconds"
    },
    "throughputTargets": {
      "peakConcurrentUsers": 100,
      "transactionsPerSecond": 50,
      "batchProcessingWindow": "4 hours"
    }
  }
}