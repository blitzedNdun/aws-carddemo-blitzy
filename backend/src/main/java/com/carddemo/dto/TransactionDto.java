/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

package com.carddemo.dto;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * Data Transfer Object for transaction data used in bill payment processing and transaction record validation.
 * This DTO facilitates data exchange between the service layer and presentation layer during bill payment
 * operations, providing a clean abstraction from the underlying JPA entity structure.
 * 
 * <p>The TransactionDto serves as the primary interface for transaction data manipulation in bill payment
 * testing scenarios, supporting validation of payment transaction creation, balance updates, and transaction
 * record accuracy. It maintains compatibility with COBOL data structures while providing modern Java
 * conveniences for testing and validation operations.</p>
 * 
 * <p>Key Features:
 * <ul>
 * <li>BigDecimal precision matching COBOL COMP-3 packed decimal handling</li>
 * <li>JSON serialization support for REST API communication</li>
 * <li>Builder pattern for flexible object construction in test scenarios</li>
 * <li>Comprehensive field validation for bill payment operations</li>
 * <li>Immutable data transfer suitable for concurrent processing</li>
 * </ul>
 * 
 * <p>Usage in Bill Payment Testing:
 * <ul>
 * <li>Validating payment transaction creation with correct amounts and types</li>
 * <li>Testing transaction ID generation and sequencing</li>
 * <li>Verifying transaction categorization and type code assignment</li>
 * <li>Ensuring proper account ID association during bill payment processing</li>
 * <li>Supporting test data generation for comprehensive validation scenarios</li>
 * </ul>
 * 
 * @author CardDemo Migration Team
 * @version 1.0
 * @since 2024
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class TransactionDto {

    /**
     * Unique transaction identifier generated by the system.
     * Maps to COBOL transaction sequence number for compatibility.
     */
    @JsonProperty("transactionId")
    private Long transactionId;

    /**
     * Account identifier associated with this transaction.
     * Links the transaction to the customer account for bill payment processing.
     */
    @JsonProperty("accountId") 
    private Long accountId;

    /**
     * Transaction amount with precision matching COBOL COMP-3 packed decimal handling.
     * Supports positive values for charges and negative values for credits/payments.
     */
    @JsonProperty("amount")
    private BigDecimal amount;

    /**
     * Transaction type code indicating the nature of the transaction.
     * Common values: 'BP' (Bill Payment), 'PU' (Purchase), 'CA' (Cash Advance), 'CR' (Credit).
     */
    @JsonProperty("typeCode")
    private String typeCode;

    /**
     * Transaction category code for detailed transaction classification.
     * Used for reporting and analysis of transaction patterns.
     */
    @JsonProperty("categoryCode")
    private String categoryCode;

    /**
     * Human-readable description of the transaction.
     * Provides context for the transaction purpose and details.
     */
    @JsonProperty("description")
    private String description;

    /**
     * Credit card number associated with the transaction (if applicable).
     * May be masked for security purposes in certain contexts.
     */
    @JsonProperty("cardNumber")
    private String cardNumber;

    /**
     * Merchant name where the transaction occurred.
     * Used for transaction categorization and customer statement display.
     */
    @JsonProperty("merchantName")
    private String merchantName;

    /**
     * Date when the transaction was initiated or occurred.
     * Used for transaction posting and reporting operations.
     */
    @JsonProperty("transactionDate")
    @JsonFormat(pattern = "yyyy-MM-dd")
    private LocalDate transactionDate;

    /**
     * Timestamp when the transaction was originally processed.
     * Maintains audit trail and processing history.
     */
    @JsonProperty("originalTimestamp")
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private LocalDateTime originalTimestamp;

    /**
     * Timestamp when the transaction was processed by batch operations.
     * Used for settlement and reconciliation processes.
     */
    @JsonProperty("processedTimestamp")
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private LocalDateTime processedTimestamp;

    /**
     * Reference number for external transaction tracking.
     * Links to external payment networks or banking systems.
     */
    @JsonProperty("referenceNumber")
    private String referenceNumber;

    /**
     * Authorization code provided by payment processor.
     * Used for transaction validation and dispute resolution.
     */
    @JsonProperty("authorizationCode")
    private String authorizationCode;

    /**
     * Indicates whether the transaction has been reversed or voided.
     * Used for payment processing and refund operations.
     */
    @JsonProperty("isReversed")
    @Builder.Default
    private Boolean isReversed = false;

    /**
     * Additional notes or comments about the transaction.
     * Supports customer service and dispute resolution activities.
     */
    @JsonProperty("notes")
    private String notes;

    /**
     * Convenience method to determine if this is a bill payment transaction.
     * 
     * @return true if the transaction type indicates a bill payment
     */
    public boolean isBillPayment() {
        return "BP".equals(typeCode) || "BILL_PAYMENT".equals(typeCode);
    }

    /**
     * Convenience method to determine if this is a credit transaction.
     * 
     * @return true if the amount is positive (credit to account)
     */
    public boolean isCredit() {
        return amount != null && amount.compareTo(BigDecimal.ZERO) > 0;
    }

    /**
     * Convenience method to determine if this is a debit transaction.
     * 
     * @return true if the amount is negative (debit from account)  
     */
    public boolean isDebit() {
        return amount != null && amount.compareTo(BigDecimal.ZERO) < 0;
    }

    /**
     * Returns the absolute value of the transaction amount.
     * Useful for display purposes regardless of transaction direction.
     * 
     * @return absolute value of the amount, or zero if amount is null
     */
    public BigDecimal getAbsoluteAmount() {
        return amount != null ? amount.abs() : BigDecimal.ZERO;
    }

    /**
     * Validates that the transaction has all required fields for bill payment processing.
     * 
     * @return true if all required fields are present and valid
     */
    public boolean isValidForBillPayment() {
        return accountId != null 
            && amount != null 
            && amount.compareTo(BigDecimal.ZERO) != 0
            && typeCode != null 
            && !typeCode.trim().isEmpty()
            && transactionDate != null;
    }

    /**
     * Creates a copy of this TransactionDto with a new transaction ID.
     * Useful for testing scenarios where transaction ID assignment is validated.
     * 
     * @param newTransactionId the new transaction ID to assign
     * @return a new TransactionDto instance with the specified transaction ID
     */
    public TransactionDto withTransactionId(Long newTransactionId) {
        return TransactionDto.builder()
            .transactionId(newTransactionId)
            .accountId(this.accountId)
            .amount(this.amount)
            .typeCode(this.typeCode)
            .categoryCode(this.categoryCode)
            .description(this.description)
            .cardNumber(this.cardNumber)
            .merchantName(this.merchantName)
            .transactionDate(this.transactionDate)
            .originalTimestamp(this.originalTimestamp)
            .processedTimestamp(this.processedTimestamp)
            .referenceNumber(this.referenceNumber)
            .authorizationCode(this.authorizationCode)
            .isReversed(this.isReversed)
            .notes(this.notes)
            .build();
    }

    /**
     * Creates a copy of this TransactionDto with a new amount.
     * Useful for testing payment amount validation and modification scenarios.
     * 
     * @param newAmount the new amount to assign
     * @return a new TransactionDto instance with the specified amount
     */
    public TransactionDto withAmount(BigDecimal newAmount) {
        return TransactionDto.builder()
            .transactionId(this.transactionId)
            .accountId(this.accountId)
            .amount(newAmount)
            .typeCode(this.typeCode)
            .categoryCode(this.categoryCode)
            .description(this.description)
            .cardNumber(this.cardNumber)
            .merchantName(this.merchantName)
            .transactionDate(this.transactionDate)
            .originalTimestamp(this.originalTimestamp)
            .processedTimestamp(this.processedTimestamp)
            .referenceNumber(this.referenceNumber)
            .authorizationCode(this.authorizationCode)
            .isReversed(this.isReversed)
            .notes(this.notes)
            .build();
    }

}