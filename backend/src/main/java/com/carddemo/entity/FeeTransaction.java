package com.carddemo.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * JPA entity representing fee transaction records generated by the fee assessment batch process.
 * Links fees to their corresponding transaction entries in the transactions table.
 * Tracks fee posting details, reversals, and audit information for regulatory compliance
 * and fee dispute resolution.
 * 
 * This entity maps to the fee transaction processing logic from CBACT04C batch program,
 * supporting fee assessment, reversal, and waiver operations with full audit trail.
 */
@Entity
@Table(name = "fee_transactions")
public class FeeTransaction {

    /**
     * Transaction types for fee categorization based on CBACT04C processing patterns.
     * Maps to TRAN-TYPE-CD field in CVTRA05Y copybook structure.
     */
    public enum TransactionType {
        /**
         * Fee assessment transaction - initial fee charge
         * Corresponds to TRAN-TYPE-CD = '01' in COBOL batch processing
         */
        FEE_ASSESSMENT,
        
        /**
         * Fee reversal transaction - reverses previously posted fee
         * Used for error corrections and dispute resolutions
         */
        FEE_REVERSAL,
        
        /**
         * Fee waiver transaction - administrative fee forgiveness
         * Used for customer service adjustments and promotional waivers
         */
        FEE_WAIVER
    }

    /**
     * Posting status tracking for fee transaction lifecycle management.
     * Enables monitoring and reconciliation of fee processing operations.
     */
    public enum PostingStatus {
        /**
         * Fee transaction created but not yet posted to account
         * Initial status for batch-generated fee assessments
         */
        PENDING,
        
        /**
         * Fee transaction successfully posted to account balance
         * Final status for completed fee processing
         */
        POSTED,
        
        /**
         * Fee transaction posting failed due to system or validation error
         * Requires manual intervention for resolution
         */
        FAILED,
        
        /**
         * Fee transaction has been reversed
         * Used when fee adjustments or corrections are applied
         */
        REVERSED
    }

    /**
     * Primary key with auto-generation for unique fee transaction identification.
     * Provides surrogate key for efficient database operations and referential integrity.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "fee_transaction_id")
    private Long feeTransactionId;

    /**
     * Foreign key reference to Fee entity for fee association.
     * Links this transaction record to the specific fee being processed.
     * Maps to fee assessment logic in CBACT04C batch program.
     */
    @NotNull(message = "Fee ID cannot be null")
    @Column(name = "fee_id", nullable = false)
    private Long feeId;

    /**
     * Foreign key reference to Transaction entity for transaction linkage.
     * Connects fee processing to the generated transaction record.
     * Maps to TRAN-ID field created in CBACT04C.1300-B-WRITE-TX routine.
     */
    @NotNull(message = "Transaction ID cannot be null")
    @Column(name = "transaction_id", nullable = false)
    private Long transactionId;

    /**
     * Transaction type for fee categorization.
     * Determines the nature of the fee operation being performed.
     * Maps to TRAN-TYPE-CD processing in CBACT04C batch program.
     */
    @NotNull(message = "Transaction type cannot be null")
    @Enumerated(EnumType.STRING)
    @Column(name = "transaction_type", nullable = false, length = 20)
    private TransactionType transactionType;

    /**
     * Posting status tracking for transaction lifecycle management.
     * Enables monitoring of fee processing from creation through completion.
     */
    @NotNull(message = "Posting status cannot be null")
    @Enumerated(EnumType.STRING)
    @Column(name = "posting_status", nullable = false, length = 20)
    private PostingStatus postingStatus;

    /**
     * Fee amount for reconciliation and audit trail.
     * Uses BigDecimal with scale 2 to match COBOL COMP-3 packed decimal precision.
     * Maps to TRAN-AMT field in CVTRA05Y transaction record structure.
     */
    @NotNull(message = "Amount cannot be null")
    @DecimalMin(value = "0.00", message = "Amount must be non-negative")
    @Column(name = "amount", nullable = false, precision = 12, scale = 2)
    private BigDecimal amount;

    /**
     * Fee transaction creation timestamp for audit trail.
     * Records when the fee transaction was initially created in the system.
     * Supports regulatory compliance and dispute resolution requirements.
     */
    @NotNull(message = "Created date cannot be null")
    @Column(name = "created_date", nullable = false)
    private LocalDateTime createdDate;

    /**
     * Fee transaction processing timestamp for audit trail.
     * Records when the fee transaction was last processed or updated.
     * Maps to TRAN-PROC-TS processing timestamp in CVTRA05Y structure.
     */
    @Column(name = "processed_date")
    private LocalDateTime processedDate;

    /**
     * Default constructor for JPA entity instantiation.
     * Initializes posting status to PENDING and creation timestamp to current time.
     */
    public FeeTransaction() {
        this.postingStatus = PostingStatus.PENDING;
        this.createdDate = LocalDateTime.now();
    }

    /**
     * Constructor for fee transaction creation with required fields.
     * 
     * @param feeId The ID of the associated fee
     * @param transactionId The ID of the associated transaction
     * @param transactionType The type of fee transaction
     * @param amount The fee amount
     */
    public FeeTransaction(Long feeId, Long transactionId, TransactionType transactionType, BigDecimal amount) {
        this();
        this.feeId = feeId;
        this.transactionId = transactionId;
        this.transactionType = transactionType;
        this.amount = amount;
    }

    // Getter and Setter methods

    /**
     * Gets the fee transaction ID.
     * 
     * @return The auto-generated primary key
     */
    public Long getFeeTransactionId() {
        return feeTransactionId;
    }

    /**
     * Sets the fee transaction ID.
     * 
     * @param feeTransactionId The primary key value
     */
    public void setFeeTransactionId(Long feeTransactionId) {
        this.feeTransactionId = feeTransactionId;
    }

    /**
     * Gets the associated fee ID.
     * 
     * @return The fee ID foreign key
     */
    public Long getFee() {
        return feeId;
    }

    /**
     * Sets the associated fee ID.
     * 
     * @param fee The fee ID to associate
     */
    public void setFee(Long fee) {
        this.feeId = fee;
    }

    /**
     * Gets the transaction type for fee categorization.
     * 
     * @return The transaction type enum value
     */
    public TransactionType getTransactionType() {
        return transactionType;
    }

    /**
     * Sets the transaction type for fee categorization.
     * 
     * @param transactionType The transaction type to set
     */
    public void setTransactionType(TransactionType transactionType) {
        this.transactionType = transactionType;
    }

    /**
     * Gets the posting status for transaction tracking.
     * 
     * @return The posting status enum value
     */
    public PostingStatus getPostingStatus() {
        return postingStatus;
    }

    /**
     * Sets the posting status for transaction tracking.
     * 
     * @param postingStatus The posting status to set
     */
    public void setPostingStatus(PostingStatus postingStatus) {
        this.postingStatus = postingStatus;
        // Update processed date when status changes
        if (postingStatus != PostingStatus.PENDING) {
            this.processedDate = LocalDateTime.now();
        }
    }

    /**
     * Gets the fee amount for reconciliation.
     * 
     * @return The fee amount with 2-decimal precision
     */
    public BigDecimal getAmount() {
        return amount;
    }

    /**
     * Sets the fee amount for reconciliation.
     * 
     * @param amount The fee amount to set
     */
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    /**
     * Gets the creation date for audit trail.
     * 
     * @return The transaction creation timestamp
     */
    public LocalDateTime getCreatedDate() {
        return createdDate;
    }

    /**
     * Sets the creation date for audit trail.
     * 
     * @param createdDate The creation timestamp to set
     */
    public void setCreatedDate(LocalDateTime createdDate) {
        this.createdDate = createdDate;
    }

    /**
     * Gets the processing date for audit trail.
     * 
     * @return The transaction processing timestamp
     */
    public LocalDateTime getProcessedDate() {
        return processedDate;
    }

    /**
     * Sets the processing date for audit trail.
     * 
     * @param processedDate The processing timestamp to set
     */
    public void setProcessedDate(LocalDateTime processedDate) {
        this.processedDate = processedDate;
    }

    /**
     * Checks equality based on fee transaction ID and key business fields.
     * Implements proper equality semantics for JPA entity management.
     * 
     * @param obj The object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        FeeTransaction that = (FeeTransaction) obj;
        
        // If both have IDs, compare by ID
        if (feeTransactionId != null && that.feeTransactionId != null) {
            return Objects.equals(feeTransactionId, that.feeTransactionId);
        }
        
        // Otherwise compare by business key (feeId + transactionId + transactionType)
        return Objects.equals(feeId, that.feeId) &&
               Objects.equals(transactionId, that.transactionId) &&
               Objects.equals(transactionType, that.transactionType);
    }

    /**
     * Generates hash code based on fee transaction ID or business key.
     * Ensures consistency with equals() method for proper collection behavior.
     * 
     * @return The calculated hash code
     */
    @Override
    public int hashCode() {
        if (feeTransactionId != null) {
            return Objects.hash(feeTransactionId);
        }
        return Objects.hash(feeId, transactionId, transactionType);
    }

    /**
     * Provides string representation of fee transaction for debugging and logging.
     * Includes key identifying information and current status.
     * 
     * @return Formatted string representation of the entity
     */
    @Override
    public String toString() {
        return String.format(
            "FeeTransaction{id=%d, feeId=%d, transactionId=%d, type=%s, status=%s, amount=%s, created=%s}",
            feeTransactionId, feeId, transactionId, transactionType, postingStatus, amount, createdDate
        );
    }
}